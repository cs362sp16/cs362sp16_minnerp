        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    10036:    8:int compare(const void* a, const void* b) {
    10036:    9:	if (*(int*)a > *(int*)b)
     4460:   10:		return 1;
     5576:   11:	if (*(int*)a < *(int*)b)
     1676:   12:		return -1;
     3900:   13:	return 0;
        -:   14:}
        -:   15:
        2:   16:struct gameState* newGame() {
        2:   17:	struct gameState* g = (struct gameState*) malloc(sizeof(struct gameState));
        2:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = (int *)malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
        2:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
        2:   44:	SelectStream(1);
        2:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
        2:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
        2:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
       22:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
      220:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
      200:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
        2:   73:	if (numPlayers == 2)
        -:   74:	{
        2:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
        2:   87:	if (numPlayers == 2)
        -:   88:	{
        2:   89:		state->supplyCount[estate] = 8;
        2:   90:		state->supplyCount[duchy] = 8;
        2:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
        2:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:	state->supplyCount[silver] = 40;
        2:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
       42:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
      330:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
      310:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
       20:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
        4:  115:					if (numPlayers == 2){ 
        2:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
       18:  122:					state->supplyCount[i] = 10;
        -:  123:				}
       20:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
      290:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
        6:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
        4:  140:		state->deckCount[i] = 0;
       16:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
       12:  143:			state->deck[i][j] = estate;
       12:  144:			state->deckCount[i]++;
        -:  145:		}
       32:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
       28:  148:			state->deck[i][j] = copper;
       28:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
        6:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
        4:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
        6:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
        4:  166:		state->handCount[i] = 0;
        4:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
       56:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
       54:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
        2:  182:	state->outpostPlayed = 0;
        2:  183:	state->phase = 0;
        2:  184:	state->numActions = 1;
        2:  185:	state->numBuys = 1;
        2:  186:	state->playedCardCount = 0;
        2:  187:	state->whoseTurn = 0;
        2:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
       12:  192:	for (it = 0; it < 5; it++){
       10:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
        2:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
        2:  198:	return 0;
        -:  199:}
        -:  200:
      472:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
      472:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
      472:  209:	if (state->deckCount[player] < 1)
        2:  210:		return -1;
      470:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     5390:  214:	while (state->deckCount[player] > 0) {
     4450:  215:		card = floor(Random() * state->deckCount[player]);
     4450:  216:		newDeck[newDeckPos] = state->deck[player][card];
     4450:  217:		newDeckPos++;
    16414:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
    11964:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
     4450:  221:		state->deckCount[player]--;
        -:  222:	}
     4920:  223:	for (i = 0; i < newDeckPos; i++) {
     4450:  224:		state->deck[player][i] = newDeck[i];
     4450:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
      470:  228:	return 0;
        -:  229:}
        -:  230:
      830:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
      830:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
      830:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
      830:  243:	if ( state->numActions < 1 )
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
      830:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
      830:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
      640:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
      190:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
       22:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
      168:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
      168:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
      168:  269:	return 0;
        -:  270:}
        -:  271:
      830:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
      830:  280:	who = state->whoseTurn;
        -:  281:
      830:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
      830:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
      312:  289:		return -1;
      518:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      326:  293:		return -1;
        -:  294:	} else {
      192:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
      192:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
      192:  299:		state->coins = (state->coins) - (getCost(supplyPos));
      192:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
      192:  308:	return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
      840:  315:int handCard(int handPos, struct gameState *state) {
      840:  316:	int currentPlayer = whoseTurn(state);
      840:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     1024:  320:int supplyCount(int card, struct gameState *state) {
     1024:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
        4:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
        4:  326:	int count = 0;
        -:  327:
       36:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:	{
       32:  330:		if (state->deck[player][i] == card) count++;
        -:  331:	}
        -:  332:
        4:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->hand[player][i] == card) count++;
        -:  336:	}
        -:  337:
       28:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:	{
       24:  340:		if (state->discard[player][i] == card) count++;
        -:  341:	}
        -:  342:
        4:  343:	return count;
        -:  344:}
        -:  345:
     2708:  346:int whoseTurn(struct gameState *state) {
     2708:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
      830:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
      830:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
     4950:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
     4120:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     4120:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
      830:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
      830:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
      416:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
      414:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
      830:  370:	state->outpostPlayed = 0;
      830:  371:	state->phase = 0;
      830:  372:	state->numActions = 1;
      830:  373:	state->coins = 0;
      830:  374:	state->numBuys = 1;
      830:  375:	state->playedCardCount = 0;
      830:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
     4980:  380:	for (k = 0; k < 5; k++){
     4150:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
      830:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
      830:  387:	return 0;
        -:  388:}
        -:  389:
      832:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
      832:  395:	if (state->supplyCount[province] == 0)
        -:  396:	{
    #####:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
      832:  401:	j = 0;
    21632:  402:	for (i = 0; i < 25; i++)
        -:  403:	{
    20800:  404:		if (state->supplyCount[i] == 0)
        -:  405:		{
     1036:  406:			j++;
        -:  407:		}
        -:  408:	}
      832:  409:	if ( j >= 3)
        -:  410:	{
        2:  411:		return 1;
        -:  412:	}
        -:  413:
      830:  414:	return 0;
        -:  415:}
        -:  416:
        4:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
        4:  420:	int score = 0;
        -:  421:	//score from hand
       14:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:	{
       10:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
       10:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
       10:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
       10:  427:		if (state->hand[player][i] == province) { score = score + 6; };
       10:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
       10:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
       16:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:	{
       12:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
       12:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
       12:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
       12:  438:		if (state->discard[player][i] == province) { score = score + 6; };
       12:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
       12:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
       16:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:	{
       12:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
       12:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
       12:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
       12:  449:		if (state->deck[player][i] == province) { score = score + 6; };
       12:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
       12:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:	}
        -:  453:
        4:  454:	return score;
        -:  455:}
        -:  456:
        2:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
       10:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:	{
        -:  466:		//set unused player scores to -9999
        8:  467:		if (i >= state->numPlayers)
        -:  468:		{
        4:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
        4:  473:			players[i] = scoreFor (i, state);
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
        2:  478:	j = 0;
       10:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:	{
        8:  481:		if (players[i] > players[j])
        -:  482:		{
        2:  483:			j = i;
        -:  484:		}
        -:  485:	}
        2:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
        2:  489:	currentPlayer = whoseTurn(state);
       10:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:	{
        8:  492:		if ( players[i] == highScore && i > currentPlayer )
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
        2:  499:	j = 0;
       10:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:	{
        8:  502:		if ( players[i] > players[j] )
        -:  503:		{
        2:  504:			j = i;
        -:  505:		}
        -:  506:	}
        2:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
       10:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:	{
        8:  512:		if ( players[i] == highScore )
        -:  513:		{
        2:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
        6:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
        2:  522:	return 0;
        -:  523:}
        -:  524:
     4196:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
     4196:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
     4878:  533:		for (i = 0; i < state->discardCount[player];i++){
     4410:  534:			state->deck[player][i] = state->discard[player][i];
     4410:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
      468:  538:		state->deckCount[player] = state->discardCount[player];
      468:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
      468:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
      468:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
      468:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
      468:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      468:  559:		if (deckCounter == 0)
        2:  560:			return -1;
        -:  561:
      466:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      466:  563:		state->deckCount[player]--;
      466:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
     3728:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
     3728:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
     3728:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     3728:  576:		state->deckCount[player]--;
     3728:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
     4194:  580:	return 0;
        -:  581:}
        -:  582:
      748:  583:int getCost(int cardNumber)
        -:  584:{
      748:  585:	switch( cardNumber ) 
        -:  586:	{
        -:  587:		case curse:
       28:  588:			return 0;
        -:  589:		case estate:
       40:  590:			return 2;
        -:  591:		case duchy:
       34:  592:			return 5;
        -:  593:		case province:
       48:  594:			return 8;
        -:  595:		case copper:
       92:  596:			return 0;
        -:  597:		case silver:
       50:  598:			return 3;
        -:  599:		case gold:
       38:  600:			return 6;
        -:  601:		case adventurer:
       34:  602:			return 6;
        -:  603:		case council_room:
       40:  604:			return 5;
        -:  605:		case feast:
    #####:  606:			return 4;
        -:  607:		case gardens:
       52:  608:			return 4;
        -:  609:		case mine:
       28:  610:			return 5;
        -:  611:		case remodel:
    #####:  612:			return 4;
        -:  613:		case smithy:
       42:  614:			return 4;
        -:  615:		case village:
    #####:  616:			return 3;
        -:  617:		case baron:
    #####:  618:			return 4;
        -:  619:		case great_hall:
    #####:  620:			return 3;
        -:  621:		case minion:
    #####:  622:			return 5;
        -:  623:		case steward:
    #####:  624:			return 3;
        -:  625:		case tribute:
       22:  626:			return 5;
        -:  627:		case ambassador:
    #####:  628:			return 3;
        -:  629:		case cutpurse:
       42:  630:			return 4;
        -:  631:		case embargo: 
       44:  632:			return 2;
        -:  633:		case outpost:
    #####:  634:			return 5;
        -:  635:		case salvager:
       56:  636:			return 4;
        -:  637:		case sea_hag:
       58:  638:			return 4;
        -:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
        -:  646://adventurer function
        2:  647:int adventurer_card_f(struct gameState *state){
        -:  648:	int cardDrawn;
        -:  649:	int temphand[MAX_HAND];
        2:  650:	int z = 0;
        2:  651:	int drawntreasure = 0;
        2:  652:	int currentPlayer = whoseTurn(state);
       14:  653:	while(drawntreasure<2){
       10:  654:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:			shuffle(currentPlayer, state);
        -:  656:		}
       10:  657:		drawCard(currentPlayer, state);
       10:  658:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       10:  659:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        4:  660:			drawntreasure++;
        -:  661:		else{
        6:  662:			temphand[z]=cardDrawn;
        6:  663:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        6:  664:			z++;
        -:  665:		}
        -:  666:	}
       10:  667:	while(z-1>=0){
        6:  668:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        6:  669:		z=z-1;
        -:  670:	}
        2:  671:	return 0;
        -:  672:}
        -:  673:
        -:  674://council room func
    #####:  675:int council_room_card_f(struct gameState *state, int handPos){
    #####:  676:	int currentPlayer = whoseTurn(state);
        -:  677:	int i;
        -:  678:	//+4 Cards
    #####:  679:	for (i = 0; i < 4; i++)
        -:  680:	{
    #####:  681:		drawCard(currentPlayer, state);
        -:  682:	}
        -:  683:
        -:  684:	//+1 Buy
    #####:  685:	state->numBuys++;
        -:  686:
        -:  687:	//Each other player draws a card
    #####:  688:	for (i = 0; i < state->numPlayers; i++)
        -:  689:	{
    #####:  690:		if ( i != currentPlayer )
        -:  691:		{
    #####:  692:			drawCard(i, state);
        -:  693:		}
        -:  694:	}
        -:  695:
        -:  696:	//put played card in played card pile
    #####:  697:	discardCard(handPos, currentPlayer, state, 0);
    #####:  698:	return 0;
        -:  699:}
        -:  700:
        -:  701://feast func
    #####:  702:int feast_func(struct gameState *state, int choice1){
    #####:  703:	int i, x, currentPlayer = whoseTurn(state);
        -:  704:	int temphand[MAX_HAND];
        -:  705:	//gain card with cost up to 5
        -:  706:	//Backup hand
    #####:  707:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  708:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  709:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  710:	}
        -:  711:	//Backup hand
        -:  712:
        -:  713:	//Update Coins for Buy
    #####:  714:	updateCoins(currentPlayer, state, 5);
    #####:  715:	x = 1;//Condition to loop on
    #####:  716:	while( x == 1) {//Buy one card
    #####:  717:		if (supplyCount(choice1, state) <= 0){
        -:  718:			if (DEBUG)
        -:  719:				printf("None of that card left, sorry!\n");
        -:  720:
        -:  721:			if (DEBUG){
        -:  722:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  723:			}
        -:  724:		}
    #####:  725:		else if (state->coins < getCost(choice1)){
    #####:  726:			printf("That card is too expensive!\n");
        -:  727:
        -:  728:			if (DEBUG){
        -:  729:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  730:			}
        -:  731:		}
        -:  732:		else{
        -:  733:
        -:  734:			if (DEBUG){
        -:  735:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:			}
        -:  737:
    #####:  738:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  739:			x = 0;//No more buying cards
        -:  740:
        -:  741:			if (DEBUG){
        -:  742:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  743:			}
        -:  744:
        -:  745:		}
        -:  746:	}     
        -:  747:
        -:  748:	//Reset Hand
    #####:  749:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  750:		state->hand[currentPlayer][i] = temphand[i];
    #####:  751:		temphand[i] = -1;
        -:  752:	}
        -:  753:	//Reset Hand
    #####:  754:	return -1;
        -:  755:}
        -:  756:
        -:  757:// mine
       14:  758:int mine_func(struct gameState *state, int choice1, int choice2, int handPos){
       14:  759:	int j, i, currentPlayer = whoseTurn(state);
       14:  760:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  761:
       14:  762:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  763:	{
    #####:  764:		return -1;
        -:  765:	}
        -:  766:
       14:  767:	if (choice2 > treasure_map || choice2 < curse)
        -:  768:	{
    #####:  769:		return -1;
        -:  770:	}
        -:  771:
       14:  772:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  773:	{
       12:  774:		return 1;
        -:  775:	}
        -:  776:
        2:  777:	gainCard(choice2, state, 2, currentPlayer);
        -:  778:
        -:  779:	//discard card from hand
        2:  780:	discardCard(handPos, currentPlayer, state, 0);
        -:  781:
        -:  782:	//discard trashed card
        4:  783:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  784:	{
        4:  785:		if (state->hand[currentPlayer][i] == j)
        -:  786:		{
        2:  787:			discardCard(i, currentPlayer, state, 0);			
        2:  788:			break;
        -:  789:		}
        -:  790:	}
        2:  791:	return 0;
        -:  792:}
        -:  793://remodel
    #####:  794:int remodel_func(struct gameState *state, int choice1, int choice2, int handPos){
    #####:  795:	int j, i, currentPlayer = whoseTurn(state);
    #####:  796:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  797:
    #####:  798:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  799:	{
    #####:  800:		return -1;
        -:  801:	}
        -:  802:
    #####:  803:	gainCard(choice2, state, 0, currentPlayer);
        -:  804:
        -:  805:	//discard card from hand
    #####:  806:	discardCard(handPos, currentPlayer, state, 0);
        -:  807:
        -:  808:	//discard trashed card
    #####:  809:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  810:	{
    #####:  811:		if (state->hand[currentPlayer][i] == j)
        -:  812:		{
    #####:  813:			discardCard(i, currentPlayer, state, 0);			
    #####:  814:			break;
        -:  815:		}
        -:  816:	}
    #####:  817:	return 0;
        -:  818:}
        -:  819:
      190:  820:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  821:{
        -:  822:	int i;
        -:  823:	int j;
        -:  824:	int k;
        -:  825:	int x;
        -:  826:	int index;
      190:  827:	int currentPlayer = whoseTurn(state);
      190:  828:	int nextPlayer = currentPlayer + 1;
        -:  829:
      190:  830:	int tributeRevealedCards[2] = {-1, -1};
        -:  831:	int temphand[MAX_HAND];// moved above the if statement
      190:  832:	int drawntreasure=0;
        -:  833:	int cardDrawn;
      190:  834:	int z = 0;// this is the counter for the temp hand
      190:  835:	if (nextPlayer > (state->numPlayers - 1)){
       86:  836:		nextPlayer = 0;
        -:  837:	}
        -:  838:
        -:  839:
        -:  840:	//uses switch to select card and perform actions
      190:  841:	switch( card ) 
        -:  842:	{
        -:  843:		case adventurer:
        2:  844:			return adventurer_card_f(state);
        -:  845:
        -:  846:		case council_room:
    #####:  847:			return council_room_card_f(state, handPos);
        -:  848:
        -:  849:		case feast:
    #####:  850:			return feast_func(state, choice2);
        -:  851:
        -:  852:		case gardens:
       22:  853:			return -1;
        -:  854:
        -:  855:		case mine:
       14:  856:			return mine_func(state, choice3, choice1, choice2);
        -:  857:
        -:  858:		case remodel:
    #####:  859:			return remodel_func(state, choice1, choice2, handPos);
        -:  860:
        -:  861:		case smithy:
        -:  862:			//+3 Cards
       24:  863:			for (i = 0; i < 3; i++)
        -:  864:			{
       18:  865:				drawCard(currentPlayer, state);
        -:  866:			}
        -:  867:
        -:  868:			//discard card from hand
        6:  869:			discardCard(handPos, currentPlayer, state, 0);
        6:  870:			return 0;
        -:  871:
        -:  872:		case village:
        -:  873:			//+1 Card
    #####:  874:			drawCard(currentPlayer, state);
        -:  875:
        -:  876:			//+2 Actions
    #####:  877:			state->numActions = state->numActions + 2;
        -:  878:
        -:  879:			//discard played card from hand
    #####:  880:			discardCard(handPos, currentPlayer, state, 0);
    #####:  881:			return 0;
        -:  882:
        -:  883:		case baron:
    #####:  884:			state->numBuys++;//Increase buys by 1!
    #####:  885:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  886:				int p = 0;//Iterator for hand!
    #####:  887:				int card_not_discarded = 1;//Flag for discard set!
    #####:  888:				while(card_not_discarded){
    #####:  889:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  890:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  891:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  892:						state->discardCount[currentPlayer]++;
    #####:  893:						for (;p < state->handCount[currentPlayer]; p++){
    #####:  894:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  895:						}
    #####:  896:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  897:						state->handCount[currentPlayer]--;
    #####:  898:						card_not_discarded = 0;//Exit the loop
        -:  899:					}
    #####:  900:					else if (p > state->handCount[currentPlayer]){
        -:  901:						if(DEBUG) {
        -:  902:							printf("No estate cards in your hand, invalid choice\n");
        -:  903:							printf("Must gain an estate if there are any\n");
        -:  904:						}
    #####:  905:						if (supplyCount(estate, state) > 0){
    #####:  906:							gainCard(estate, state, 0, currentPlayer);
    #####:  907:							state->supplyCount[estate]--;//Decrement estates
    #####:  908:							if (supplyCount(estate, state) == 0){
    #####:  909:								isGameOver(state);
        -:  910:							}
        -:  911:						}
    #####:  912:						card_not_discarded = 0;//Exit the loop
        -:  913:					}
        -:  914:
        -:  915:					else{
    #####:  916:						p++;//Next card
        -:  917:					}
        -:  918:				}
        -:  919:			}
        -:  920:
        -:  921:			else{
    #####:  922:				if (supplyCount(estate, state) > 0){
    #####:  923:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  924:					state->supplyCount[estate]--;//Decrement Estates
    #####:  925:					if (supplyCount(estate, state) == 0){
    #####:  926:						isGameOver(state);
        -:  927:					}
        -:  928:				}
        -:  929:			}
        -:  930:
        -:  931:
    #####:  932:			return 0;
        -:  933:
        -:  934:		case great_hall:
        -:  935:			//+1 Card
    #####:  936:			drawCard(currentPlayer, state);
        -:  937:
        -:  938:			//+1 Actions
    #####:  939:			state->numActions++;
        -:  940:
        -:  941:			//discard card from hand
    #####:  942:			discardCard(handPos, currentPlayer, state, 0);
    #####:  943:			return 0;
        -:  944:
        -:  945:		case minion:
        -:  946:			//+1 action
    #####:  947:			state->numActions++;
        -:  948:
        -:  949:			//discard card from hand
    #####:  950:			discardCard(handPos, currentPlayer, state, 0);
        -:  951:
    #####:  952:			if (choice1)		//+2 coins
        -:  953:			{
    #####:  954:				state->coins = state->coins + 2;
        -:  955:			}
        -:  956:
    #####:  957:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  958:			{
        -:  959:				//discard hand
    #####:  960:				while(numHandCards(state) > 0)
        -:  961:				{
    #####:  962:					discardCard(handPos, currentPlayer, state, 0);
        -:  963:				}
        -:  964:
        -:  965:				//draw 4
    #####:  966:				for (i = 0; i < 4; i++)
        -:  967:				{
    #####:  968:					drawCard(currentPlayer, state);
        -:  969:				}
        -:  970:
        -:  971:				//other players discard hand and redraw if hand size > 4
    #####:  972:				for (i = 0; i < state->numPlayers; i++)
        -:  973:				{
    #####:  974:					if (i != currentPlayer)
        -:  975:					{
    #####:  976:						if ( state->handCount[i] > 4 )
        -:  977:						{
        -:  978:							//discard hand
    #####:  979:							while( state->handCount[i] > 0 )
        -:  980:							{
    #####:  981:								discardCard(handPos, i, state, 0);
        -:  982:							}
        -:  983:
        -:  984:							//draw 4
    #####:  985:							for (j = 0; j < 4; j++)
        -:  986:							{
    #####:  987:								drawCard(i, state);
        -:  988:							}
        -:  989:						}
        -:  990:					}
        -:  991:				}
        -:  992:
        -:  993:			}
    #####:  994:			return 0;
        -:  995:
        -:  996:		case steward:
    #####:  997:			if (choice1 == 1)
        -:  998:			{
        -:  999:				//+2 cards
    #####: 1000:				drawCard(currentPlayer, state);
    #####: 1001:				drawCard(currentPlayer, state);
        -: 1002:			}
    #####: 1003:			else if (choice1 == 2)
        -: 1004:			{
        -: 1005:				//+2 coins
    #####: 1006:				state->coins = state->coins + 2;
        -: 1007:			}
        -: 1008:			else
        -: 1009:			{
        -: 1010:				//trash 2 cards in hand
    #####: 1011:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1012:				discardCard(choice3, currentPlayer, state, 1);
        -: 1013:			}
        -: 1014:
        -: 1015:			//discard card from hand
    #####: 1016:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1017:			return 0;
        -: 1018:
        -: 1019:		case tribute:
        2: 1020:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1021:				if (state->deckCount[nextPlayer] > 0){
    #####: 1022:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1023:					state->deckCount[nextPlayer]--;
        -: 1024:				}
    #####: 1025:				else if (state->discardCount[nextPlayer] > 0){
    #####: 1026:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1027:					state->discardCount[nextPlayer]--;
        -: 1028:				}
        -: 1029:				else{
        -: 1030:					//No Card to Reveal
        -: 1031:					if (DEBUG){
        -: 1032:						printf("No cards to reveal\n");
        -: 1033:					}
        -: 1034:				}
        -: 1035:			}
        -: 1036:
        -: 1037:			else{
        2: 1038:				if (state->deckCount[nextPlayer] == 0){
    #####: 1039:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1040:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1041:						state->deckCount[nextPlayer]++;
    #####: 1042:						state->discard[nextPlayer][i] = -1;
    #####: 1043:						state->discardCount[nextPlayer]--;
        -: 1044:					}
        -: 1045:
    #####: 1046:					shuffle(nextPlayer,state);//Shuffle the deck
        -: 1047:				} 
        2: 1048:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        2: 1049:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        2: 1050:				state->deckCount[nextPlayer]--;
        2: 1051:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        2: 1052:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        2: 1053:				state->deckCount[nextPlayer]--;
        -: 1054:			}    
        -: 1055:
        2: 1056:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1057:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1058:				state->playedCardCount++;
    #####: 1059:				tributeRevealedCards[1] = -1;
        -: 1060:			}
        -: 1061:
        8: 1062:			for (i = 0; i <= 2; i ++){
        6: 1063:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1064:					state->coins += 2;
        -: 1065:				}
        -: 1066:
        6: 1067:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        4: 1068:					drawCard(currentPlayer, state);
        4: 1069:					drawCard(currentPlayer, state);
        -: 1070:				}
        -: 1071:				else{//Action Card
        2: 1072:					state->numActions = state->numActions + 2;
        -: 1073:				}
        -: 1074:			}
        -: 1075:
        2: 1076:			return 0;
        -: 1077:
        -: 1078:		case ambassador:
    #####: 1079:			j = 0;		//used to check if player has enough cards to discard
        -: 1080:
    #####: 1081:			if (choice2 > 2 || choice2 < 0)
        -: 1082:			{
    #####: 1083:				return -1;				
        -: 1084:			}
        -: 1085:
    #####: 1086:			if (choice1 == handPos)
        -: 1087:			{
    #####: 1088:				return -1;
        -: 1089:			}
        -: 1090:
    #####: 1091:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1092:			{
    #####: 1093:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1094:				{
    #####: 1095:					j++;
        -: 1096:				}
        -: 1097:			}
    #####: 1098:			if (j < choice2)
        -: 1099:			{
    #####: 1100:				return -1;				
        -: 1101:			}
        -: 1102:
        -: 1103:			if (DEBUG) 
        -: 1104:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1105:
        -: 1106:			//increase supply count for choosen card by amount being discarded
    #####: 1107:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1108:
        -: 1109:			//each other player gains a copy of revealed card
    #####: 1110:			for (i = 0; i < state->numPlayers; i++)
        -: 1111:			{
    #####: 1112:				if (i != currentPlayer)
        -: 1113:				{
    #####: 1114:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1115:				}
        -: 1116:			}
        -: 1117:
        -: 1118:			//discard played card from hand
    #####: 1119:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1120:
        -: 1121:			//trash copies of cards returned to supply
    #####: 1122:			for (j = 0; j < choice2; j++)
        -: 1123:			{
    #####: 1124:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1125:				{
    #####: 1126:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1127:					{
    #####: 1128:						discardCard(i, currentPlayer, state, 1);
    #####: 1129:						break;
        -: 1130:					}
        -: 1131:				}
        -: 1132:			}			
        -: 1133:
    #####: 1134:			return 0;
        -: 1135:
        -: 1136:		case cutpurse:
        -: 1137:
       10: 1138:			updateCoins(currentPlayer, state, 2);
       30: 1139:			for (i = 0; i < state->numPlayers; i++)
        -: 1140:			{
       20: 1141:				if (i != currentPlayer)
        -: 1142:				{
       10: 1143:					for (j = 0; j < state->handCount[i]; j++)
        -: 1144:					{
    #####: 1145:						if (state->hand[i][j] == copper)
        -: 1146:						{
    #####: 1147:							discardCard(j, i, state, 0);
    #####: 1148:							break;
        -: 1149:						}
    #####: 1150:						if (j == state->handCount[i])
        -: 1151:						{
    #####: 1152:							for (k = 0; k < state->handCount[i]; k++)
        -: 1153:							{
        -: 1154:								if (DEBUG)
        -: 1155:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1156:							}	
    #####: 1157:							break;
        -: 1158:						}		
        -: 1159:					}
        -: 1160:
        -: 1161:				}
        -: 1162:
        -: 1163:			}				
        -: 1164:
        -: 1165:			//discard played card from hand
       10: 1166:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1167:
       10: 1168:			return 0;
        -: 1169:
        -: 1170:
        -: 1171:		case embargo: 
        -: 1172:			//+2 Coins
       18: 1173:			state->coins = state->coins + 2;
        -: 1174:
        -: 1175:			//see if selected pile is in play
       18: 1176:			if ( state->supplyCount[choice1] == -1 )
        -: 1177:			{
    #####: 1178:				return -1;
        -: 1179:			}
        -: 1180:
        -: 1181:			//add embargo token to selected supply pile
       18: 1182:			state->embargoTokens[choice1]++;
        -: 1183:
        -: 1184:			//trash card
       18: 1185:			discardCard(handPos, currentPlayer, state, 1);		
       18: 1186:			return 0;
        -: 1187:
        -: 1188:		case outpost:
        -: 1189:			//set outpost flag
    #####: 1190:			state->outpostPlayed++;
        -: 1191:
        -: 1192:			//discard card
    #####: 1193:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1194:			return 0;
        -: 1195:
        -: 1196:		case salvager:
        -: 1197:			//+1 buy
       12: 1198:			state->numBuys++;
        -: 1199:
       12: 1200:			if (choice1)
        -: 1201:			{
        -: 1202:				//gain coins equal to trashed card
       10: 1203:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1204:				//trash card
       10: 1205:				discardCard(choice1, currentPlayer, state, 1);	
        -: 1206:			}
        -: 1207:
        -: 1208:			//discard card
       12: 1209:			discardCard(handPos, currentPlayer, state, 0);
       12: 1210:			return 0;
        -: 1211:
        -: 1212:		case sea_hag:
      312: 1213:			for (i = 0; i < state->numPlayers; i++){
      208: 1214:				if (i != currentPlayer){
      104: 1215:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
      104: 1216:					state->discardCount[i]++;
      104: 1217:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:				}
        -: 1219:			}
      104: 1220:			return 0;
        -: 1221:
        -: 1222:		case treasure_map:
        -: 1223:			//search hand for another treasure_map
    #####: 1224:			index = -1;
    #####: 1225:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1226:			{
    #####: 1227:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1228:				{
    #####: 1229:					index = i;
    #####: 1230:					break;
        -: 1231:				}
        -: 1232:			}
    #####: 1233:			if (index > -1)
        -: 1234:			{
        -: 1235:				//trash both treasure cards
    #####: 1236:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1237:				discardCard(index, currentPlayer, state, 1);
        -: 1238:
        -: 1239:				//gain 4 Gold cards
    #####: 1240:				for (i = 0; i < 4; i++)
        -: 1241:				{
    #####: 1242:					gainCard(gold, state, 1, currentPlayer);
        -: 1243:				}
        -: 1244:
        -: 1245:				//return success
    #####: 1246:				return 1;
        -: 1247:			}
        -: 1248:
        -: 1249:			//no second treasure_map found in hand
    #####: 1250:			return -1;
        -: 1251:	}
        -: 1252:
    #####: 1253:	return -1;
        -: 1254:}
        -: 1255:
       60: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:
        -: 1259:	//if card is not trashed, added to Played pile 
       60: 1260:	if (trashFlag < 1)
        -: 1261:	{
        -: 1262:		//add card to played pile
       32: 1263:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       32: 1264:		state->playedCardCount++;
        -: 1265:	}
        -: 1266:
        -: 1267:	//set played card to -1
       60: 1268:	state->hand[currentPlayer][handPos] = -1;
        -: 1269:
        -: 1270:	//remove card from player's hand
       60: 1271:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1272:	{
        -: 1273:		//reduce number of cards in hand
        8: 1274:		state->handCount[currentPlayer]--;
        -: 1275:	}
       52: 1276:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1277:	{
        -: 1278:		//reduce number of cards in hand
    #####: 1279:		state->handCount[currentPlayer]--;
        -: 1280:	}
        -: 1281:	else 	
        -: 1282:	{
        -: 1283:		//replace discarded card with last card in hand
       52: 1284:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:		//set last card to -1
       52: 1286:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:		//reduce number of cards in hand
       52: 1288:		state->handCount[currentPlayer]--;
        -: 1289:	}
        -: 1290:
       60: 1291:	return 0;
        -: 1292:}
        -: 1293:
      194: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:	//Note: supplyPos is enum of choosen card
        -: 1297:
        -: 1298:	//check if supply pile is empty (0) or card is not used in game (-1)
      194: 1299:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1300:	{
    #####: 1301:		return -1;
        -: 1302:	}
        -: 1303:
        -: 1304:	//added card for [whoseTurn] current player:
        -: 1305:	// toFlag = 0 : add to discard
        -: 1306:	// toFlag = 1 : add to deck
        -: 1307:	// toFlag = 2 : add to hand
        -: 1308:
      194: 1309:	if (toFlag == 1)
        -: 1310:	{
    #####: 1311:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1312:		state->deckCount[player]++;
        -: 1313:	}
      194: 1314:	else if (toFlag == 2)
        -: 1315:	{
        2: 1316:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1317:		state->handCount[player]++;
        -: 1318:	}
        -: 1319:	else
        -: 1320:	{
      192: 1321:		state->discard[player][ state->discardCount[player] ] = supplyPos;
      192: 1322:		state->discardCount[player]++;
        -: 1323:	}
        -: 1324:
        -: 1325:	//decrease number in supply pile
      194: 1326:	state->supplyCount[supplyPos]--;
        -: 1327:
      194: 1328:	return 0;
        -: 1329:}
        -: 1330:
     1010: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:	int i;
        -: 1334:
        -: 1335:	//reset coin count
     1010: 1336:	state->coins = 0;
        -: 1337:
        -: 1338:	//add coins for each Treasure card in player's hand
     6030: 1339:	for (i = 0; i < state->handCount[player]; i++)
        -: 1340:	{
     5020: 1341:		if (state->hand[player][i] == copper)
        -: 1342:		{
     2646: 1343:			state->coins += 1;
        -: 1344:		}
     2374: 1345:		else if (state->hand[player][i] == silver)
        -: 1346:		{
      242: 1347:			state->coins += 2;
        -: 1348:		}
     2132: 1349:		else if (state->hand[player][i] == gold)
        -: 1350:		{
        4: 1351:			state->coins += 3;
        -: 1352:		}	
        -: 1353:	}	
        -: 1354:
        -: 1355:	//add bonus
     1010: 1356:	state->coins += bonus;
        -: 1357:
     1010: 1358:	return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
