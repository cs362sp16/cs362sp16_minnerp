9: /* MUTANT (rep_op) */	if (*(int*)a <= *(int*)b)
9: /* MUTANT (rep_op) */	if (*(int*)a < *(int*)b)
9: /* MUTANT (rep_op) */	if (*(int*)a >= *(int*)b)
9: /* MUTANT (rep_op) */	if (*(int*)a == *(int*)b)
9: /* MUTANT (rep_op) */	if (*(int*)a != *(int*)b)
9: /* MUTANT (negate) */	if(! (*(int*)a > *(int*)b))
10: /* MUTANT (rep_const) */		return 0;
10: /* MUTANT (rep_const) */		return -1;
10: /* MUTANT (rep_const) */		return ((1)+1);
12: /* MUTANT (rep_const) */		return 0;
12: /* MUTANT (rep_const) */		return 1;
12: /* MUTANT (rep_const) */		return ((-1)+1);
12: /* MUTANT (rep_const) */		return ((-1)-1);
13: /* MUTANT (del_stmt) */ /* 	return 0; */ 
13: /* MUTANT (rep_const) */	return 1;
13: /* MUTANT (rep_const) */	return -1;
17: /* MUTANT (del_stmt) */ /* 	struct gameState* g = malloc(sizeof(struct gameState)); */ 
18: /* MUTANT (del_stmt) */ /* 	return g; */ 
23: /* MUTANT (del_stmt) */ /* 	int* k = malloc(10 * sizeof(int)); */ 
23: /* MUTANT (rep_const) */	int* k = malloc(0 * sizeof(int));
23: /* MUTANT (rep_const) */	int* k = malloc(1 * sizeof(int));
23: /* MUTANT (rep_const) */	int* k = malloc(-1 * sizeof(int));
23: /* MUTANT (rep_const) */	int* k = malloc(((10)+1) * sizeof(int));
23: /* MUTANT (rep_const) */	int* k = malloc(((10)-1) * sizeof(int));
24: /* MUTANT (del_stmt) */ /* 	k[0] = k1; */ 
24: /* MUTANT (rep_const) */	k[1] = k1;
24: /* MUTANT (rep_const) */	k[-1] = k1;
25: /* MUTANT (del_stmt) */ /* 	k[1] = k2; */ 
25: /* MUTANT (rep_const) */	k[0] = k2;
25: /* MUTANT (rep_const) */	k[-1] = k2;
25: /* MUTANT (rep_const) */	k[((1)+1)] = k2;
26: /* MUTANT (del_stmt) */ /* 	k[2] = k3; */ 
26: /* MUTANT (rep_const) */	k[0] = k3;
26: /* MUTANT (rep_const) */	k[1] = k3;
26: /* MUTANT (rep_const) */	k[-1] = k3;
26: /* MUTANT (rep_const) */	k[((2)+1)] = k3;
26: /* MUTANT (rep_const) */	k[((2)-1)] = k3;
27: /* MUTANT (del_stmt) */ /* 	k[3] = k4; */ 
27: /* MUTANT (rep_const) */	k[0] = k4;
27: /* MUTANT (rep_const) */	k[1] = k4;
27: /* MUTANT (rep_const) */	k[-1] = k4;
27: /* MUTANT (rep_const) */	k[((3)+1)] = k4;
27: /* MUTANT (rep_const) */	k[((3)-1)] = k4;
28: /* MUTANT (del_stmt) */ /* 	k[4] = k5; */ 
28: /* MUTANT (rep_const) */	k[0] = k5;
28: /* MUTANT (rep_const) */	k[1] = k5;
28: /* MUTANT (rep_const) */	k[-1] = k5;
28: /* MUTANT (rep_const) */	k[((4)+1)] = k5;
28: /* MUTANT (rep_const) */	k[((4)-1)] = k5;
29: /* MUTANT (del_stmt) */ /* 	k[5] = k6; */ 
29: /* MUTANT (rep_const) */	k[0] = k6;
29: /* MUTANT (rep_const) */	k[1] = k6;
29: /* MUTANT (rep_const) */	k[-1] = k6;
29: /* MUTANT (rep_const) */	k[((5)+1)] = k6;
29: /* MUTANT (rep_const) */	k[((5)-1)] = k6;
30: /* MUTANT (del_stmt) */ /* 	k[6] = k7; */ 
30: /* MUTANT (rep_const) */	k[0] = k7;
30: /* MUTANT (rep_const) */	k[1] = k7;
30: /* MUTANT (rep_const) */	k[-1] = k7;
30: /* MUTANT (rep_const) */	k[((6)+1)] = k7;
30: /* MUTANT (rep_const) */	k[((6)-1)] = k7;
31: /* MUTANT (del_stmt) */ /* 	k[7] = k8; */ 
31: /* MUTANT (rep_const) */	k[0] = k8;
31: /* MUTANT (rep_const) */	k[1] = k8;
31: /* MUTANT (rep_const) */	k[-1] = k8;
31: /* MUTANT (rep_const) */	k[((7)+1)] = k8;
31: /* MUTANT (rep_const) */	k[((7)-1)] = k8;
32: /* MUTANT (del_stmt) */ /* 	k[8] = k9; */ 
32: /* MUTANT (rep_const) */	k[0] = k9;
32: /* MUTANT (rep_const) */	k[1] = k9;
32: /* MUTANT (rep_const) */	k[-1] = k9;
32: /* MUTANT (rep_const) */	k[((8)+1)] = k9;
32: /* MUTANT (rep_const) */	k[((8)-1)] = k9;
33: /* MUTANT (del_stmt) */ /* 	k[9] = k10; */ 
33: /* MUTANT (rep_const) */	k[0] = k10;
33: /* MUTANT (rep_const) */	k[1] = k10;
33: /* MUTANT (rep_const) */	k[-1] = k10;
33: /* MUTANT (rep_const) */	k[((9)+1)] = k10;
33: /* MUTANT (rep_const) */	k[((9)-1)] = k10;
34: /* MUTANT (del_stmt) */ /* 	return k; */ 
37: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[0], int randomSeed,
37: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[1], int randomSeed,
37: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[-1], int randomSeed,
37: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[((10)+1)], int randomSeed,
37: /* MUTANT (rep_const) */int initializeGame(int numPlayers, int kingdomCards[((10)-1)], int randomSeed,
40: /* MUTANT (del_stmt) */ /* 	int i; */ 
41: /* MUTANT (del_stmt) */ /* 	int j; */ 
42: /* MUTANT (del_stmt) */ /* 	int it; */ 			
44: /* MUTANT (del_stmt) */ /* 	SelectStream(1); */ 
44: /* MUTANT (rep_const) */	SelectStream(0);
44: /* MUTANT (rep_const) */	SelectStream(-1);
44: /* MUTANT (rep_const) */	SelectStream(((1)+1));
45: /* MUTANT (del_stmt) */ /* 	PutSeed((long)randomSeed); */ 
48: /* MUTANT (rep_op) */	if (numPlayers <= MAX_PLAYERS || numPlayers < 2)
48: /* MUTANT (rep_op) */	if (numPlayers < MAX_PLAYERS || numPlayers < 2)
48: /* MUTANT (rep_op) */	if (numPlayers >= MAX_PLAYERS || numPlayers < 2)
48: /* MUTANT (rep_op) */	if (numPlayers == MAX_PLAYERS || numPlayers < 2)
48: /* MUTANT (rep_op) */	if (numPlayers != MAX_PLAYERS || numPlayers < 2)
48: /* MUTANT (rep_op) */	if (numPlayers > MAX_PLAYERS && numPlayers < 2)
48: /* MUTANT (rep_op) */	if (numPlayers > MAX_PLAYERS || numPlayers <= 2)
48: /* MUTANT (rep_op) */	if (numPlayers > MAX_PLAYERS || numPlayers > 2)
48: /* MUTANT (rep_op) */	if (numPlayers > MAX_PLAYERS || numPlayers >= 2)
48: /* MUTANT (rep_op) */	if (numPlayers > MAX_PLAYERS || numPlayers == 2)
48: /* MUTANT (rep_op) */	if (numPlayers > MAX_PLAYERS || numPlayers != 2)
48: /* MUTANT (rep_const) */	if (numPlayers > MAX_PLAYERS || numPlayers < 0)
48: /* MUTANT (rep_const) */	if (numPlayers > MAX_PLAYERS || numPlayers < 1)
48: /* MUTANT (rep_const) */	if (numPlayers > MAX_PLAYERS || numPlayers < -1)
48: /* MUTANT (rep_const) */	if (numPlayers > MAX_PLAYERS || numPlayers < ((2)+1))
48: /* MUTANT (rep_const) */	if (numPlayers > MAX_PLAYERS || numPlayers < ((2)-1))
48: /* MUTANT (negate) */	if(! (numPlayers > MAX_PLAYERS || numPlayers < 2))
50: /* MUTANT (del_stmt) */ /* 			return -1; */ 
50: /* MUTANT (rep_const) */			return 0;
50: /* MUTANT (rep_const) */			return 1;
50: /* MUTANT (rep_const) */			return ((-1)+1);
50: /* MUTANT (rep_const) */			return ((-1)-1);
57: /* MUTANT (rep_op) */	for (i = 0; i <= 10; i++)
57: /* MUTANT (rep_op) */	for (i = 0; i > 10; i++)
57: /* MUTANT (rep_op) */	for (i = 0; i >= 10; i++)
57: /* MUTANT (rep_op) */	for (i = 0; i == 10; i++)
57: /* MUTANT (rep_op) */	for (i = 0; i != 10; i++)
57: /* MUTANT (rep_op) */	for (i = 0; i < 10; i--)
57: /* MUTANT (rep_const) */	for (i = 1; i < 10; i++)
57: /* MUTANT (rep_const) */	for (i = -1; i < 10; i++)
57: /* MUTANT (rep_const) */	for (i = 0; i < 0; i++)
57: /* MUTANT (rep_const) */	for (i = 0; i < 1; i++)
57: /* MUTANT (rep_const) */	for (i = 0; i < -1; i++)
57: /* MUTANT (rep_const) */	for (i = 0; i < ((10)+1); i++)
57: /* MUTANT (rep_const) */	for (i = 0; i < ((10)-1); i++)
59: /* MUTANT (rep_op) */			for (j = 0; j <= 10; j++)
59: /* MUTANT (rep_op) */			for (j = 0; j > 10; j++)
59: /* MUTANT (rep_op) */			for (j = 0; j >= 10; j++)
59: /* MUTANT (rep_op) */			for (j = 0; j == 10; j++)
59: /* MUTANT (rep_op) */			for (j = 0; j != 10; j++)
59: /* MUTANT (rep_op) */			for (j = 0; j < 10; j--)
59: /* MUTANT (rep_const) */			for (j = 1; j < 10; j++)
59: /* MUTANT (rep_const) */			for (j = -1; j < 10; j++)
59: /* MUTANT (rep_const) */			for (j = 0; j < 0; j++)
59: /* MUTANT (rep_const) */			for (j = 0; j < 1; j++)
59: /* MUTANT (rep_const) */			for (j = 0; j < -1; j++)
59: /* MUTANT (rep_const) */			for (j = 0; j < ((10)+1); j++)
59: /* MUTANT (rep_const) */			for (j = 0; j < ((10)-1); j++)
61: /* MUTANT (rep_op) */					if (j == i && kingdomCards[j] == kingdomCards[i])
61: /* MUTANT (rep_op) */					if (j != i || kingdomCards[j] == kingdomCards[i])
61: /* MUTANT (rep_op) */					if (j != i && kingdomCards[j] != kingdomCards[i])
61: /* MUTANT (negate) */					if(! (j != i && kingdomCards[j] == kingdomCards[i]))
63: /* MUTANT (del_stmt) */ /* 							return -1; */ 
63: /* MUTANT (rep_const) */							return 0;
63: /* MUTANT (rep_const) */							return 1;
63: /* MUTANT (rep_const) */							return ((-1)+1);
63: /* MUTANT (rep_const) */							return ((-1)-1);
73: /* MUTANT (rep_op) */	if (numPlayers != 2)
73: /* MUTANT (rep_const) */	if (numPlayers == 0)
73: /* MUTANT (rep_const) */	if (numPlayers == 1)
73: /* MUTANT (rep_const) */	if (numPlayers == -1)
73: /* MUTANT (rep_const) */	if (numPlayers == ((2)+1))
73: /* MUTANT (rep_const) */	if (numPlayers == ((2)-1))
73: /* MUTANT (negate) */	if(! (numPlayers == 2))
75: /* MUTANT (del_stmt) */ /* 			state->supplyCount[curse] = 10; */ 
75: /* MUTANT (rep_const) */			state->supplyCount[curse] = 0;
75: /* MUTANT (rep_const) */			state->supplyCount[curse] = 1;
75: /* MUTANT (rep_const) */			state->supplyCount[curse] = -1;
75: /* MUTANT (rep_const) */			state->supplyCount[curse] = ((10)+1);
75: /* MUTANT (rep_const) */			state->supplyCount[curse] = ((10)-1);
77: /* MUTANT (rep_op) */	else if (numPlayers != 3)
77: /* MUTANT (rep_const) */	else if (numPlayers == 0)
77: /* MUTANT (rep_const) */	else if (numPlayers == 1)
77: /* MUTANT (rep_const) */	else if (numPlayers == -1)
77: /* MUTANT (rep_const) */	else if (numPlayers == ((3)+1))
77: /* MUTANT (rep_const) */	else if (numPlayers == ((3)-1))
77: /* MUTANT (negate) */	else if(! (numPlayers == 3))
79: /* MUTANT (del_stmt) */ /* 			state->supplyCount[curse] = 20; */ 
79: /* MUTANT (rep_const) */			state->supplyCount[curse] = 0;
79: /* MUTANT (rep_const) */			state->supplyCount[curse] = 1;
79: /* MUTANT (rep_const) */			state->supplyCount[curse] = -1;
79: /* MUTANT (rep_const) */			state->supplyCount[curse] = ((20)+1);
79: /* MUTANT (rep_const) */			state->supplyCount[curse] = ((20)-1);
83: /* MUTANT (del_stmt) */ /* 			state->supplyCount[curse] = 30; */ 
83: /* MUTANT (rep_const) */			state->supplyCount[curse] = 0;
83: /* MUTANT (rep_const) */			state->supplyCount[curse] = 1;
83: /* MUTANT (rep_const) */			state->supplyCount[curse] = -1;
83: /* MUTANT (rep_const) */			state->supplyCount[curse] = ((30)+1);
83: /* MUTANT (rep_const) */			state->supplyCount[curse] = ((30)-1);
87: /* MUTANT (rep_op) */	if (numPlayers != 2)
87: /* MUTANT (rep_const) */	if (numPlayers == 0)
87: /* MUTANT (rep_const) */	if (numPlayers == 1)
87: /* MUTANT (rep_const) */	if (numPlayers == -1)
87: /* MUTANT (rep_const) */	if (numPlayers == ((2)+1))
87: /* MUTANT (rep_const) */	if (numPlayers == ((2)-1))
87: /* MUTANT (negate) */	if(! (numPlayers == 2))
89: /* MUTANT (del_stmt) */ /* 			state->supplyCount[estate] = 8; */ 
89: /* MUTANT (rep_const) */			state->supplyCount[estate] = 0;
89: /* MUTANT (rep_const) */			state->supplyCount[estate] = 1;
89: /* MUTANT (rep_const) */			state->supplyCount[estate] = -1;
89: /* MUTANT (rep_const) */			state->supplyCount[estate] = ((8)+1);
89: /* MUTANT (rep_const) */			state->supplyCount[estate] = ((8)-1);
90: /* MUTANT (del_stmt) */ /* 			state->supplyCount[duchy] = 8; */ 
90: /* MUTANT (rep_const) */			state->supplyCount[duchy] = 0;
90: /* MUTANT (rep_const) */			state->supplyCount[duchy] = 1;
90: /* MUTANT (rep_const) */			state->supplyCount[duchy] = -1;
90: /* MUTANT (rep_const) */			state->supplyCount[duchy] = ((8)+1);
90: /* MUTANT (rep_const) */			state->supplyCount[duchy] = ((8)-1);
91: /* MUTANT (del_stmt) */ /* 			state->supplyCount[province] = 8; */ 
91: /* MUTANT (rep_const) */			state->supplyCount[province] = 0;
91: /* MUTANT (rep_const) */			state->supplyCount[province] = 1;
91: /* MUTANT (rep_const) */			state->supplyCount[province] = -1;
91: /* MUTANT (rep_const) */			state->supplyCount[province] = ((8)+1);
91: /* MUTANT (rep_const) */			state->supplyCount[province] = ((8)-1);
95: /* MUTANT (del_stmt) */ /* 			state->supplyCount[estate] = 12; */ 
95: /* MUTANT (rep_const) */			state->supplyCount[estate] = 0;
95: /* MUTANT (rep_const) */			state->supplyCount[estate] = 1;
95: /* MUTANT (rep_const) */			state->supplyCount[estate] = -1;
95: /* MUTANT (rep_const) */			state->supplyCount[estate] = ((12)+1);
95: /* MUTANT (rep_const) */			state->supplyCount[estate] = ((12)-1);
96: /* MUTANT (del_stmt) */ /* 			state->supplyCount[duchy] = 12; */ 
96: /* MUTANT (rep_const) */			state->supplyCount[duchy] = 0;
96: /* MUTANT (rep_const) */			state->supplyCount[duchy] = 1;
96: /* MUTANT (rep_const) */			state->supplyCount[duchy] = -1;
96: /* MUTANT (rep_const) */			state->supplyCount[duchy] = ((12)+1);
96: /* MUTANT (rep_const) */			state->supplyCount[duchy] = ((12)-1);
97: /* MUTANT (del_stmt) */ /* 			state->supplyCount[province] = 12; */ 
97: /* MUTANT (rep_const) */			state->supplyCount[province] = 0;
97: /* MUTANT (rep_const) */			state->supplyCount[province] = 1;
97: /* MUTANT (rep_const) */			state->supplyCount[province] = -1;
97: /* MUTANT (rep_const) */			state->supplyCount[province] = ((12)+1);
97: /* MUTANT (rep_const) */			state->supplyCount[province] = ((12)-1);
101: /* MUTANT (rep_const) */	state->supplyCount[copper] = 0 - (7 * numPlayers);
101: /* MUTANT (rep_const) */	state->supplyCount[copper] = 1 - (7 * numPlayers);
101: /* MUTANT (rep_const) */	state->supplyCount[copper] = -1 - (7 * numPlayers);
101: /* MUTANT (rep_const) */	state->supplyCount[copper] = ((60)+1) - (7 * numPlayers);
101: /* MUTANT (rep_const) */	state->supplyCount[copper] = ((60)-1) - (7 * numPlayers);
101: /* MUTANT (rep_const) */	state->supplyCount[copper] = 60 - (0 * numPlayers);
101: /* MUTANT (rep_const) */	state->supplyCount[copper] = 60 - (1 * numPlayers);
101: /* MUTANT (rep_const) */	state->supplyCount[copper] = 60 - (-1 * numPlayers);
101: /* MUTANT (rep_const) */	state->supplyCount[copper] = 60 - (((7)+1) * numPlayers);
101: /* MUTANT (rep_const) */	state->supplyCount[copper] = 60 - (((7)-1) * numPlayers);
102: /* MUTANT (del_stmt) */ /* 	state->supplyCount[silver] = 40; */ 
102: /* MUTANT (rep_const) */	state->supplyCount[silver] = 0;
102: /* MUTANT (rep_const) */	state->supplyCount[silver] = 1;
102: /* MUTANT (rep_const) */	state->supplyCount[silver] = -1;
102: /* MUTANT (rep_const) */	state->supplyCount[silver] = ((40)+1);
102: /* MUTANT (rep_const) */	state->supplyCount[silver] = ((40)-1);
103: /* MUTANT (del_stmt) */ /* 	state->supplyCount[gold] = 30; */ 
103: /* MUTANT (rep_const) */	state->supplyCount[gold] = 0;
103: /* MUTANT (rep_const) */	state->supplyCount[gold] = 1;
103: /* MUTANT (rep_const) */	state->supplyCount[gold] = -1;
103: /* MUTANT (rep_const) */	state->supplyCount[gold] = ((30)+1);
103: /* MUTANT (rep_const) */	state->supplyCount[gold] = ((30)-1);
106: /* MUTANT (rep_op) */	for (i = adventurer; i < treasure_map; i++)       	//loop all cards
106: /* MUTANT (rep_op) */	for (i = adventurer; i > treasure_map; i++)       	//loop all cards
106: /* MUTANT (rep_op) */	for (i = adventurer; i >= treasure_map; i++)       	//loop all cards
106: /* MUTANT (rep_op) */	for (i = adventurer; i == treasure_map; i++)       	//loop all cards
106: /* MUTANT (rep_op) */	for (i = adventurer; i != treasure_map; i++)       	//loop all cards
106: /* MUTANT (rep_op) */	for (i = adventurer; i <= treasure_map; i--)       	//loop all cards
108: /* MUTANT (rep_op) */			for (j = 0; j <= 10; j++)           		//loop chosen cards
108: /* MUTANT (rep_op) */			for (j = 0; j > 10; j++)           		//loop chosen cards
108: /* MUTANT (rep_op) */			for (j = 0; j >= 10; j++)           		//loop chosen cards
108: /* MUTANT (rep_op) */			for (j = 0; j == 10; j++)           		//loop chosen cards
108: /* MUTANT (rep_op) */			for (j = 0; j != 10; j++)           		//loop chosen cards
108: /* MUTANT (rep_op) */			for (j = 0; j < 10; j--)           		//loop chosen cards
108: /* MUTANT (rep_const) */			for (j = 1; j < 10; j++)           		//loop chosen cards
108: /* MUTANT (rep_const) */			for (j = -1; j < 10; j++)           		//loop chosen cards
108: /* MUTANT (rep_const) */			for (j = 0; j < 0; j++)           		//loop chosen cards
108: /* MUTANT (rep_const) */			for (j = 0; j < 1; j++)           		//loop chosen cards
108: /* MUTANT (rep_const) */			for (j = 0; j < -1; j++)           		//loop chosen cards
108: /* MUTANT (rep_const) */			for (j = 0; j < ((10)+1); j++)           		//loop chosen cards
108: /* MUTANT (rep_const) */			for (j = 0; j < ((10)-1); j++)           		//loop chosen cards
110: /* MUTANT (rep_op) */					if (kingdomCards[j] != i)
110: /* MUTANT (negate) */					if(! (kingdomCards[j] == i))
113: /* MUTANT (rep_op) */							if (kingdomCards[j] != great_hall || kingdomCards[j] == gardens)
113: /* MUTANT (rep_op) */							if (kingdomCards[j] == great_hall && kingdomCards[j] == gardens)
113: /* MUTANT (rep_op) */							if (kingdomCards[j] == great_hall || kingdomCards[j] != gardens)
113: /* MUTANT (negate) */							if(! (kingdomCards[j] == great_hall || kingdomCards[j] == gardens))
115: /* MUTANT (rep_op) */									if (numPlayers != 2){ 
115: /* MUTANT (rep_const) */									if (numPlayers == 0){ 
115: /* MUTANT (rep_const) */									if (numPlayers == 1){ 
115: /* MUTANT (rep_const) */									if (numPlayers == -1){ 
115: /* MUTANT (rep_const) */									if (numPlayers == ((2)+1)){ 
115: /* MUTANT (rep_const) */									if (numPlayers == ((2)-1)){ 
115: /* MUTANT (negate) */									if(! (numPlayers == 2)){ 
116: /* MUTANT (del_stmt) */ /* 										state->supplyCount[i] = 8; */  
116: /* MUTANT (rep_const) */										state->supplyCount[i] = 0; 
116: /* MUTANT (rep_const) */										state->supplyCount[i] = 1; 
116: /* MUTANT (rep_const) */										state->supplyCount[i] = -1; 
116: /* MUTANT (rep_const) */										state->supplyCount[i] = ((8)+1); 
116: /* MUTANT (rep_const) */										state->supplyCount[i] = ((8)-1); 
118: /* MUTANT (rep_const) */									else{ state->supplyCount[i] = 0; }
118: /* MUTANT (rep_const) */									else{ state->supplyCount[i] = 1; }
118: /* MUTANT (rep_const) */									else{ state->supplyCount[i] = -1; }
118: /* MUTANT (rep_const) */									else{ state->supplyCount[i] = ((12)+1); }
118: /* MUTANT (rep_const) */									else{ state->supplyCount[i] = ((12)-1); }
122: /* MUTANT (del_stmt) */ /* 									state->supplyCount[i] = 10; */ 
122: /* MUTANT (rep_const) */									state->supplyCount[i] = 0;
122: /* MUTANT (rep_const) */									state->supplyCount[i] = 1;
122: /* MUTANT (rep_const) */									state->supplyCount[i] = -1;
122: /* MUTANT (rep_const) */									state->supplyCount[i] = ((10)+1);
122: /* MUTANT (rep_const) */									state->supplyCount[i] = ((10)-1);
128: /* MUTANT (del_stmt) */ /* 							state->supplyCount[i] = -1; */ 
128: /* MUTANT (rep_const) */							state->supplyCount[i] = 0;
128: /* MUTANT (rep_const) */							state->supplyCount[i] = 1;
128: /* MUTANT (rep_const) */							state->supplyCount[i] = ((-1)+1);
128: /* MUTANT (rep_const) */							state->supplyCount[i] = ((-1)-1);
138: /* MUTANT (rep_op) */	for (i = 0; i <= numPlayers; i++)
138: /* MUTANT (rep_op) */	for (i = 0; i > numPlayers; i++)
138: /* MUTANT (rep_op) */	for (i = 0; i >= numPlayers; i++)
138: /* MUTANT (rep_op) */	for (i = 0; i == numPlayers; i++)
138: /* MUTANT (rep_op) */	for (i = 0; i != numPlayers; i++)
138: /* MUTANT (rep_op) */	for (i = 0; i < numPlayers; i--)
138: /* MUTANT (rep_const) */	for (i = 1; i < numPlayers; i++)
138: /* MUTANT (rep_const) */	for (i = -1; i < numPlayers; i++)
140: /* MUTANT (del_stmt) */ /* 			state->deckCount[i] = 0; */ 
140: /* MUTANT (rep_const) */			state->deckCount[i] = 1;
140: /* MUTANT (rep_const) */			state->deckCount[i] = -1;
141: /* MUTANT (rep_op) */			for (j = 0; j <= 3; j++)
141: /* MUTANT (rep_op) */			for (j = 0; j > 3; j++)
141: /* MUTANT (rep_op) */			for (j = 0; j >= 3; j++)
141: /* MUTANT (rep_op) */			for (j = 0; j == 3; j++)
141: /* MUTANT (rep_op) */			for (j = 0; j != 3; j++)
141: /* MUTANT (rep_op) */			for (j = 0; j < 3; j--)
141: /* MUTANT (rep_const) */			for (j = 1; j < 3; j++)
141: /* MUTANT (rep_const) */			for (j = -1; j < 3; j++)
141: /* MUTANT (rep_const) */			for (j = 0; j < 0; j++)
141: /* MUTANT (rep_const) */			for (j = 0; j < 1; j++)
141: /* MUTANT (rep_const) */			for (j = 0; j < -1; j++)
141: /* MUTANT (rep_const) */			for (j = 0; j < ((3)+1); j++)
141: /* MUTANT (rep_const) */			for (j = 0; j < ((3)-1); j++)
143: /* MUTANT (del_stmt) */ /* 					state->deck[i][j] = estate; */ 
144: /* MUTANT (del_stmt) */ /* 					state->deckCount[i]++; */ 
144: /* MUTANT (rep_op) */					state->deckCount[i]--;
146: /* MUTANT (rep_op) */			for (j = 3; j <= 10; j++)
146: /* MUTANT (rep_op) */			for (j = 3; j > 10; j++)
146: /* MUTANT (rep_op) */			for (j = 3; j >= 10; j++)
146: /* MUTANT (rep_op) */			for (j = 3; j == 10; j++)
146: /* MUTANT (rep_op) */			for (j = 3; j != 10; j++)
146: /* MUTANT (rep_op) */			for (j = 3; j < 10; j--)
146: /* MUTANT (rep_const) */			for (j = 0; j < 10; j++)
146: /* MUTANT (rep_const) */			for (j = 1; j < 10; j++)
146: /* MUTANT (rep_const) */			for (j = -1; j < 10; j++)
146: /* MUTANT (rep_const) */			for (j = ((3)+1); j < 10; j++)
146: /* MUTANT (rep_const) */			for (j = ((3)-1); j < 10; j++)
146: /* MUTANT (rep_const) */			for (j = 3; j < 0; j++)
146: /* MUTANT (rep_const) */			for (j = 3; j < 1; j++)
146: /* MUTANT (rep_const) */			for (j = 3; j < -1; j++)
146: /* MUTANT (rep_const) */			for (j = 3; j < ((10)+1); j++)
146: /* MUTANT (rep_const) */			for (j = 3; j < ((10)-1); j++)
148: /* MUTANT (del_stmt) */ /* 					state->deck[i][j] = copper; */ 
149: /* MUTANT (del_stmt) */ /* 					state->deckCount[i]++; */ 		
149: /* MUTANT (rep_op) */					state->deckCount[i]--;		
154: /* MUTANT (rep_op) */	for (i = 0; i <= numPlayers; i++)
154: /* MUTANT (rep_op) */	for (i = 0; i > numPlayers; i++)
154: /* MUTANT (rep_op) */	for (i = 0; i >= numPlayers; i++)
154: /* MUTANT (rep_op) */	for (i = 0; i == numPlayers; i++)
154: /* MUTANT (rep_op) */	for (i = 0; i != numPlayers; i++)
154: /* MUTANT (rep_op) */	for (i = 0; i < numPlayers; i--)
154: /* MUTANT (rep_const) */	for (i = 1; i < numPlayers; i++)
154: /* MUTANT (rep_const) */	for (i = -1; i < numPlayers; i++)
156: /* MUTANT (rep_op) */			if ( shuffle(i, state) <= 0 )
156: /* MUTANT (rep_op) */			if ( shuffle(i, state) > 0 )
156: /* MUTANT (rep_op) */			if ( shuffle(i, state) >= 0 )
156: /* MUTANT (rep_op) */			if ( shuffle(i, state) == 0 )
156: /* MUTANT (rep_op) */			if ( shuffle(i, state) != 0 )
156: /* MUTANT (rep_const) */			if ( shuffle(i, state) < 1 )
156: /* MUTANT (rep_const) */			if ( shuffle(i, state) < -1 )
156: /* MUTANT (negate) */			if(! ( shuffle(i, state) < 0 ))
158: /* MUTANT (del_stmt) */ /* 					return -1; */ 
158: /* MUTANT (rep_const) */					return 0;
158: /* MUTANT (rep_const) */					return 1;
158: /* MUTANT (rep_const) */					return ((-1)+1);
158: /* MUTANT (rep_const) */					return ((-1)-1);
163: /* MUTANT (rep_op) */	for (i = 0; i <= numPlayers; i++)
163: /* MUTANT (rep_op) */	for (i = 0; i > numPlayers; i++)
163: /* MUTANT (rep_op) */	for (i = 0; i >= numPlayers; i++)
163: /* MUTANT (rep_op) */	for (i = 0; i == numPlayers; i++)
163: /* MUTANT (rep_op) */	for (i = 0; i != numPlayers; i++)
163: /* MUTANT (rep_op) */	for (i = 0; i < numPlayers; i--)
163: /* MUTANT (rep_const) */	for (i = 1; i < numPlayers; i++)
163: /* MUTANT (rep_const) */	for (i = -1; i < numPlayers; i++)
166: /* MUTANT (del_stmt) */ /* 			state->handCount[i] = 0; */ 
166: /* MUTANT (rep_const) */			state->handCount[i] = 1;
166: /* MUTANT (rep_const) */			state->handCount[i] = -1;
167: /* MUTANT (del_stmt) */ /* 			state->discardCount[i] = 0; */ 
167: /* MUTANT (rep_const) */			state->discardCount[i] = 1;
167: /* MUTANT (rep_const) */			state->discardCount[i] = -1;
176: /* MUTANT (rep_op) */	for (i = 0; i < treasure_map; i++)
176: /* MUTANT (rep_op) */	for (i = 0; i > treasure_map; i++)
176: /* MUTANT (rep_op) */	for (i = 0; i >= treasure_map; i++)
176: /* MUTANT (rep_op) */	for (i = 0; i == treasure_map; i++)
176: /* MUTANT (rep_op) */	for (i = 0; i != treasure_map; i++)
176: /* MUTANT (rep_op) */	for (i = 0; i <= treasure_map; i--)
176: /* MUTANT (rep_const) */	for (i = 1; i <= treasure_map; i++)
176: /* MUTANT (rep_const) */	for (i = -1; i <= treasure_map; i++)
178: /* MUTANT (del_stmt) */ /* 			state->embargoTokens[i] = 0; */ 
178: /* MUTANT (rep_const) */			state->embargoTokens[i] = 1;
178: /* MUTANT (rep_const) */			state->embargoTokens[i] = -1;
182: /* MUTANT (rep_const) */	state->outpostPlayed = 1;
182: /* MUTANT (rep_const) */	state->outpostPlayed = -1;
183: /* MUTANT (del_stmt) */ /* 	state->phase = 0; */ 
183: /* MUTANT (rep_const) */	state->phase = 1;
183: /* MUTANT (rep_const) */	state->phase = -1;
184: /* MUTANT (del_stmt) */ /* 	state->numActions = 1; */ 
184: /* MUTANT (rep_const) */	state->numActions = 0;
184: /* MUTANT (rep_const) */	state->numActions = -1;
184: /* MUTANT (rep_const) */	state->numActions = ((1)+1);
185: /* MUTANT (del_stmt) */ /* 	state->numBuys = 1; */ 
185: /* MUTANT (rep_const) */	state->numBuys = 0;
185: /* MUTANT (rep_const) */	state->numBuys = -1;
185: /* MUTANT (rep_const) */	state->numBuys = ((1)+1);
186: /* MUTANT (del_stmt) */ /* 	state->playedCardCount = 0; */ 
186: /* MUTANT (rep_const) */	state->playedCardCount = 1;
186: /* MUTANT (rep_const) */	state->playedCardCount = -1;
187: /* MUTANT (del_stmt) */ /* 	state->whoseTurn = 0; */ 
187: /* MUTANT (rep_const) */	state->whoseTurn = 1;
187: /* MUTANT (rep_const) */	state->whoseTurn = -1;
188: /* MUTANT (del_stmt) */ /* 	state->handCount[state->whoseTurn] = 0; */ 
188: /* MUTANT (rep_const) */	state->handCount[state->whoseTurn] = 1;
188: /* MUTANT (rep_const) */	state->handCount[state->whoseTurn] = -1;
192: /* MUTANT (rep_op) */	for (it = 0; it <= 5; it++){
192: /* MUTANT (rep_op) */	for (it = 0; it > 5; it++){
192: /* MUTANT (rep_op) */	for (it = 0; it >= 5; it++){
192: /* MUTANT (rep_op) */	for (it = 0; it == 5; it++){
192: /* MUTANT (rep_op) */	for (it = 0; it != 5; it++){
192: /* MUTANT (rep_op) */	for (it = 0; it < 5; it--){
192: /* MUTANT (rep_const) */	for (it = 1; it < 5; it++){
192: /* MUTANT (rep_const) */	for (it = -1; it < 5; it++){
192: /* MUTANT (rep_const) */	for (it = 0; it < 0; it++){
192: /* MUTANT (rep_const) */	for (it = 0; it < 1; it++){
192: /* MUTANT (rep_const) */	for (it = 0; it < -1; it++){
192: /* MUTANT (rep_const) */	for (it = 0; it < ((5)+1); it++){
192: /* MUTANT (rep_const) */	for (it = 0; it < ((5)-1); it++){
193: /* MUTANT (del_stmt) */ /* 		drawCard(state->whoseTurn, state); */ 
196: /* MUTANT (rep_const) */	updateCoins(state->whoseTurn, state, 1);
196: /* MUTANT (rep_const) */	updateCoins(state->whoseTurn, state, -1);
198: /* MUTANT (del_stmt) */ /* 	return 0; */ 
198: /* MUTANT (rep_const) */	return 1;
198: /* MUTANT (rep_const) */	return -1;
204: /* MUTANT (del_stmt) */ /* 	int newDeck[MAX_DECK]; */ 
205: /* MUTANT (del_stmt) */ /* 	int newDeckPos = 0; */ 
205: /* MUTANT (rep_const) */	int newDeckPos = 1;
205: /* MUTANT (rep_const) */	int newDeckPos = -1;
206: /* MUTANT (del_stmt) */ /* 	int card; */ 
207: /* MUTANT (del_stmt) */ /* 	int i; */ 
210: /* MUTANT (rep_op) */	if (state->deckCount[player] <= 1) {
210: /* MUTANT (rep_op) */	if (state->deckCount[player] > 1) {
210: /* MUTANT (rep_op) */	if (state->deckCount[player] >= 1) {
210: /* MUTANT (rep_op) */	if (state->deckCount[player] == 1) {
210: /* MUTANT (rep_op) */	if (state->deckCount[player] != 1) {
210: /* MUTANT (rep_const) */	if (state->deckCount[player] < 0) {
210: /* MUTANT (rep_const) */	if (state->deckCount[player] < -1) {
210: /* MUTANT (rep_const) */	if (state->deckCount[player] < ((1)+1)) {
210: /* MUTANT (negate) */	if(! (state->deckCount[player] < 1)) {
211: /* MUTANT (del_stmt) */ /* 		return -1; */ 
211: /* MUTANT (rep_const) */		return 0;
211: /* MUTANT (rep_const) */		return 1;
211: /* MUTANT (rep_const) */		return ((-1)+1);
211: /* MUTANT (rep_const) */		return ((-1)-1);
216: /* MUTANT (rep_op) */	while (state->deckCount[player] <= 0) {
216: /* MUTANT (rep_op) */	while (state->deckCount[player] < 0) {
216: /* MUTANT (rep_op) */	while (state->deckCount[player] >= 0) {
216: /* MUTANT (rep_op) */	while (state->deckCount[player] == 0) {
216: /* MUTANT (rep_op) */	while (state->deckCount[player] != 0) {
216: /* MUTANT (rep_const) */	while (state->deckCount[player] > 1) {
216: /* MUTANT (rep_const) */	while (state->deckCount[player] > -1) {
216: /* MUTANT (negate) */	while(! (state->deckCount[player] > 0)) {
217: /* MUTANT (del_stmt) */ /* 		card = floor(Random() * state->deckCount[player]); */ 
218: /* MUTANT (del_stmt) */ /* 		newDeck[newDeckPos] = state->deck[player][card]; */ 
219: /* MUTANT (del_stmt) */ /* 		newDeckPos++; */ 
219: /* MUTANT (rep_op) */		newDeckPos--;
220: /* MUTANT (rep_op) */		for (i = card; i <= state->deckCount[player]-1; i++) {
220: /* MUTANT (rep_op) */		for (i = card; i > state->deckCount[player]-1; i++) {
220: /* MUTANT (rep_op) */		for (i = card; i >= state->deckCount[player]-1; i++) {
220: /* MUTANT (rep_op) */		for (i = card; i == state->deckCount[player]-1; i++) {
220: /* MUTANT (rep_op) */		for (i = card; i != state->deckCount[player]-1; i++) {
220: /* MUTANT (rep_op) */		for (i = card; i < state->deckCount[player]-1; i--) {
220: /* MUTANT (rep_const) */		for (i = card; i < state->deckCount[player]0; i++) {
220: /* MUTANT (rep_const) */		for (i = card; i < state->deckCount[player]1; i++) {
220: /* MUTANT (rep_const) */		for (i = card; i < state->deckCount[player]((-1)+1); i++) {
220: /* MUTANT (rep_const) */		for (i = card; i < state->deckCount[player]((-1)-1); i++) {
221: /* MUTANT (del_stmt) */ /* 			state->deck[player][i] = state->deck[player][i+1]; */ 
221: /* MUTANT (rep_op) */			state->deck[player][i] = state->deck[player][i-1];
221: /* MUTANT (rep_op) */			state->deck[player][i] = state->deck[player][i*1];
221: /* MUTANT (rep_op) */			state->deck[player][i] = state->deck[player][i%1];
221: /* MUTANT (rep_const) */			state->deck[player][i] = state->deck[player][i+0];
221: /* MUTANT (rep_const) */			state->deck[player][i] = state->deck[player][i+-1];
221: /* MUTANT (rep_const) */			state->deck[player][i] = state->deck[player][i+((1)+1)];
223: /* MUTANT (rep_op) */		state->deckCount[player]++;
225: /* MUTANT (rep_op) */	for (i = 0; i <= newDeckPos; i++) {
225: /* MUTANT (rep_op) */	for (i = 0; i > newDeckPos; i++) {
225: /* MUTANT (rep_op) */	for (i = 0; i >= newDeckPos; i++) {
225: /* MUTANT (rep_op) */	for (i = 0; i == newDeckPos; i++) {
225: /* MUTANT (rep_op) */	for (i = 0; i != newDeckPos; i++) {
225: /* MUTANT (rep_op) */	for (i = 0; i < newDeckPos; i--) {
225: /* MUTANT (rep_const) */	for (i = 1; i < newDeckPos; i++) {
225: /* MUTANT (rep_const) */	for (i = -1; i < newDeckPos; i++) {
226: /* MUTANT (del_stmt) */ /* 		state->deck[player][i] = newDeck[i]; */ 
227: /* MUTANT (del_stmt) */ /* 		state->deckCount[player]++; */ 
227: /* MUTANT (rep_op) */		state->deckCount[player]--;
230: /* MUTANT (rep_const) */	return 1;
230: /* MUTANT (rep_const) */	return -1;
235: /* MUTANT (del_stmt) */ /* 	int card; */ 
236: /* MUTANT (del_stmt) */ /* 	int coin_bonus = 0; */  		//tracks coins gain from actions
236: /* MUTANT (rep_const) */	int coin_bonus = 1; 		//tracks coins gain from actions
236: /* MUTANT (rep_const) */	int coin_bonus = -1; 		//tracks coins gain from actions
239: /* MUTANT (rep_op) */	if (state->phase == 0)
239: /* MUTANT (rep_const) */	if (state->phase != 1)
239: /* MUTANT (rep_const) */	if (state->phase != -1)
239: /* MUTANT (negate) */	if(! (state->phase != 0))
241: /* MUTANT (del_stmt) */ /* 			return -1; */ 
241: /* MUTANT (rep_const) */			return 0;
241: /* MUTANT (rep_const) */			return 1;
241: /* MUTANT (rep_const) */			return ((-1)+1);
241: /* MUTANT (rep_const) */			return ((-1)-1);
245: /* MUTANT (rep_op) */	if ( state->numActions <= 1 )
245: /* MUTANT (rep_op) */	if ( state->numActions > 1 )
245: /* MUTANT (rep_op) */	if ( state->numActions >= 1 )
245: /* MUTANT (rep_op) */	if ( state->numActions == 1 )
245: /* MUTANT (rep_op) */	if ( state->numActions != 1 )
245: /* MUTANT (rep_const) */	if ( state->numActions < 0 )
245: /* MUTANT (rep_const) */	if ( state->numActions < -1 )
245: /* MUTANT (rep_const) */	if ( state->numActions < ((1)+1) )
245: /* MUTANT (negate) */	if(! ( state->numActions < 1 ))
247: /* MUTANT (del_stmt) */ /* 			return -1; */ 
247: /* MUTANT (rep_const) */			return 0;
247: /* MUTANT (rep_const) */			return 1;
247: /* MUTANT (rep_const) */			return ((-1)+1);
247: /* MUTANT (rep_const) */			return ((-1)-1);
254: /* MUTANT (rep_op) */	if ( card <= adventurer || card > treasure_map )
254: /* MUTANT (rep_op) */	if ( card > adventurer || card > treasure_map )
254: /* MUTANT (rep_op) */	if ( card >= adventurer || card > treasure_map )
254: /* MUTANT (rep_op) */	if ( card == adventurer || card > treasure_map )
254: /* MUTANT (rep_op) */	if ( card != adventurer || card > treasure_map )
254: /* MUTANT (rep_op) */	if ( card < adventurer && card > treasure_map )
254: /* MUTANT (rep_op) */	if ( card < adventurer || card <= treasure_map )
254: /* MUTANT (rep_op) */	if ( card < adventurer || card < treasure_map )
254: /* MUTANT (rep_op) */	if ( card < adventurer || card >= treasure_map )
254: /* MUTANT (rep_op) */	if ( card < adventurer || card == treasure_map )
254: /* MUTANT (rep_op) */	if ( card < adventurer || card != treasure_map )
254: /* MUTANT (negate) */	if(! ( card < adventurer || card > treasure_map ))
256: /* MUTANT (del_stmt) */ /* 			return -1; */ 
256: /* MUTANT (rep_const) */			return 0;
256: /* MUTANT (rep_const) */			return 1;
256: /* MUTANT (rep_const) */			return ((-1)+1);
256: /* MUTANT (rep_const) */			return ((-1)-1);
260: /* MUTANT (rep_op) */	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) <= 0 )
260: /* MUTANT (rep_op) */	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) > 0 )
260: /* MUTANT (rep_op) */	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) >= 0 )
260: /* MUTANT (rep_op) */	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) == 0 )
260: /* MUTANT (rep_op) */	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) != 0 )
260: /* MUTANT (rep_const) */	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 1 )
260: /* MUTANT (rep_const) */	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < -1 )
260: /* MUTANT (negate) */	if(! ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 ))
262: /* MUTANT (del_stmt) */ /* 			return -1; */ 
262: /* MUTANT (rep_const) */			return 0;
262: /* MUTANT (rep_const) */			return 1;
262: /* MUTANT (rep_const) */			return ((-1)+1);
262: /* MUTANT (rep_const) */			return ((-1)-1);
266: /* MUTANT (rep_op) */	state->numActions++;
269: /* MUTANT (del_stmt) */ /* 	updateCoins(state->whoseTurn, state, coin_bonus); */ 
271: /* MUTANT (del_stmt) */ /* 	return 0; */ 
271: /* MUTANT (rep_const) */	return 1;
271: /* MUTANT (rep_const) */	return -1;
275: /* MUTANT (del_stmt) */ /* 	int who; */ 
276: /* MUTANT (negate) */	if(! (DEBUG)){
277: /* MUTANT (del_stmt) */ /* 		printf("Entering buyCard...\n"); */ 
284: /* MUTANT (rep_op) */	if (state->numBuys <= 1){
284: /* MUTANT (rep_op) */	if (state->numBuys > 1){
284: /* MUTANT (rep_op) */	if (state->numBuys >= 1){
284: /* MUTANT (rep_op) */	if (state->numBuys == 1){
284: /* MUTANT (rep_op) */	if (state->numBuys != 1){
284: /* MUTANT (rep_const) */	if (state->numBuys < 0){
284: /* MUTANT (rep_const) */	if (state->numBuys < -1){
284: /* MUTANT (rep_const) */	if (state->numBuys < ((1)+1)){
284: /* MUTANT (negate) */	if(! (state->numBuys < 1)){
285: /* MUTANT (negate) */		if(! (DEBUG))
287: /* MUTANT (del_stmt) */ /* 		return -1; */ 
287: /* MUTANT (rep_const) */		return 0;
287: /* MUTANT (rep_const) */		return 1;
287: /* MUTANT (rep_const) */		return ((-1)+1);
287: /* MUTANT (rep_const) */		return ((-1)-1);
288: /* MUTANT (rep_op) */	} else if (supplyCount(supplyPos, state) <=1){
288: /* MUTANT (rep_op) */	} else if (supplyCount(supplyPos, state) >1){
288: /* MUTANT (rep_op) */	} else if (supplyCount(supplyPos, state) >=1){
288: /* MUTANT (rep_op) */	} else if (supplyCount(supplyPos, state) ==1){
288: /* MUTANT (rep_op) */	} else if (supplyCount(supplyPos, state) !=1){
288: /* MUTANT (rep_const) */	} else if (supplyCount(supplyPos, state) <0){
288: /* MUTANT (rep_const) */	} else if (supplyCount(supplyPos, state) <-1){
288: /* MUTANT (rep_const) */	} else if (supplyCount(supplyPos, state) <((1)+1)){
288: /* MUTANT (negate) */	} else if(! (supplyCount(supplyPos, state) <1)){
289: /* MUTANT (negate) */		if(! (DEBUG))
291: /* MUTANT (del_stmt) */ /* 		return -1; */ 
291: /* MUTANT (rep_const) */		return 0;
291: /* MUTANT (rep_const) */		return 1;
291: /* MUTANT (rep_const) */		return ((-1)+1);
291: /* MUTANT (rep_const) */		return ((-1)-1);
292: /* MUTANT (rep_op) */	} else if (state->coins <= getCost(supplyPos)){
292: /* MUTANT (rep_op) */	} else if (state->coins > getCost(supplyPos)){
292: /* MUTANT (rep_op) */	} else if (state->coins >= getCost(supplyPos)){
292: /* MUTANT (rep_op) */	} else if (state->coins == getCost(supplyPos)){
292: /* MUTANT (rep_op) */	} else if (state->coins != getCost(supplyPos)){
292: /* MUTANT (negate) */	} else if(! (state->coins < getCost(supplyPos))){
293: /* MUTANT (negate) */		if(! (DEBUG)) 
295: /* MUTANT (del_stmt) */ /* 		return -1; */ 
295: /* MUTANT (rep_const) */		return 0;
295: /* MUTANT (rep_const) */		return 1;
295: /* MUTANT (rep_const) */		return ((-1)+1);
295: /* MUTANT (rep_const) */		return ((-1)-1);
297: /* MUTANT (del_stmt) */ /* 		state->phase=1; */ 
297: /* MUTANT (rep_const) */		state->phase=0;
297: /* MUTANT (rep_const) */		state->phase=-1;
297: /* MUTANT (rep_const) */		state->phase=((1)+1);
299: /* MUTANT (del_stmt) */ /* 		gainCard(supplyPos, state, 0, who); */  //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
299: /* MUTANT (rep_const) */		gainCard(supplyPos, state, 1, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
299: /* MUTANT (rep_const) */		gainCard(supplyPos, state, -1, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
301: /* MUTANT (del_stmt) */ /* 		state->coins = (state->coins) - (getCost(supplyPos)); */ 
302: /* MUTANT (del_stmt) */ /* 		state->numBuys--; */ 
302: /* MUTANT (rep_op) */		state->numBuys++;
303: /* MUTANT (negate) */		if(! (DEBUG))
310: /* MUTANT (rep_const) */	return 1;
310: /* MUTANT (rep_const) */	return -1;
314: /* MUTANT (del_stmt) */ /* 	return state->handCount[ whoseTurn(state) ]; */ 
318: /* MUTANT (del_stmt) */ /* 	int currentPlayer = whoseTurn(state); */ 
319: /* MUTANT (del_stmt) */ /* 	return state->hand[currentPlayer][handPos]; */ 
323: /* MUTANT (del_stmt) */ /* 	return state->supplyCount[card]; */ 
327: /* MUTANT (del_stmt) */ /* 	int i; */ 
328: /* MUTANT (del_stmt) */ /* 	int count = 0; */ 
328: /* MUTANT (rep_const) */	int count = 1;
328: /* MUTANT (rep_const) */	int count = -1;
330: /* MUTANT (rep_op) */	for (i = 0; i <= state->deckCount[player]; i++)
330: /* MUTANT (rep_op) */	for (i = 0; i > state->deckCount[player]; i++)
330: /* MUTANT (rep_op) */	for (i = 0; i >= state->deckCount[player]; i++)
330: /* MUTANT (rep_op) */	for (i = 0; i == state->deckCount[player]; i++)
330: /* MUTANT (rep_op) */	for (i = 0; i != state->deckCount[player]; i++)
330: /* MUTANT (rep_op) */	for (i = 0; i < state->deckCount[player]; i--)
330: /* MUTANT (rep_const) */	for (i = 1; i < state->deckCount[player]; i++)
330: /* MUTANT (rep_const) */	for (i = -1; i < state->deckCount[player]; i++)
332: /* MUTANT (del_stmt) */ /* 			if (state->deck[player][i] == card) count++; */ 
332: /* MUTANT (rep_op) */			if (state->deck[player][i] != card) count++;
332: /* MUTANT (rep_op) */			if (state->deck[player][i] == card) count--;
332: /* MUTANT (negate) */			if(! (state->deck[player][i] == card)) count++;
335: /* MUTANT (rep_op) */	for (i = 0; i <= state->handCount[player]; i++)
335: /* MUTANT (rep_op) */	for (i = 0; i > state->handCount[player]; i++)
335: /* MUTANT (rep_op) */	for (i = 0; i >= state->handCount[player]; i++)
335: /* MUTANT (rep_op) */	for (i = 0; i == state->handCount[player]; i++)
335: /* MUTANT (rep_op) */	for (i = 0; i != state->handCount[player]; i++)
335: /* MUTANT (rep_op) */	for (i = 0; i < state->handCount[player]; i--)
335: /* MUTANT (rep_const) */	for (i = 1; i < state->handCount[player]; i++)
335: /* MUTANT (rep_const) */	for (i = -1; i < state->handCount[player]; i++)
337: /* MUTANT (del_stmt) */ /* 			if (state->hand[player][i] == card) count++; */ 
337: /* MUTANT (rep_op) */			if (state->hand[player][i] != card) count++;
337: /* MUTANT (rep_op) */			if (state->hand[player][i] == card) count--;
337: /* MUTANT (negate) */			if(! (state->hand[player][i] == card)) count++;
340: /* MUTANT (rep_op) */	for (i = 0; i <= state->discardCount[player]; i++)
340: /* MUTANT (rep_op) */	for (i = 0; i > state->discardCount[player]; i++)
340: /* MUTANT (rep_op) */	for (i = 0; i >= state->discardCount[player]; i++)
340: /* MUTANT (rep_op) */	for (i = 0; i == state->discardCount[player]; i++)
340: /* MUTANT (rep_op) */	for (i = 0; i != state->discardCount[player]; i++)
340: /* MUTANT (rep_op) */	for (i = 0; i < state->discardCount[player]; i--)
340: /* MUTANT (rep_const) */	for (i = 1; i < state->discardCount[player]; i++)
340: /* MUTANT (rep_const) */	for (i = -1; i < state->discardCount[player]; i++)
342: /* MUTANT (del_stmt) */ /* 			if (state->discard[player][i] == card) count++; */ 
342: /* MUTANT (rep_op) */			if (state->discard[player][i] != card) count++;
342: /* MUTANT (rep_op) */			if (state->discard[player][i] == card) count--;
342: /* MUTANT (negate) */			if(! (state->discard[player][i] == card)) count++;
349: /* MUTANT (del_stmt) */ /* 	return state->whoseTurn; */ 
353: /* MUTANT (del_stmt) */ /* 	int k; */ 
354: /* MUTANT (del_stmt) */ /* 	int i; */ 
355: /* MUTANT (del_stmt) */ /* 	int currentPlayer = whoseTurn(state); */ 
358: /* MUTANT (rep_op) */	for (i = 0; i <= state->handCount[currentPlayer]; i++){
358: /* MUTANT (rep_op) */	for (i = 0; i > state->handCount[currentPlayer]; i++){
358: /* MUTANT (rep_op) */	for (i = 0; i >= state->handCount[currentPlayer]; i++){
358: /* MUTANT (rep_op) */	for (i = 0; i == state->handCount[currentPlayer]; i++){
358: /* MUTANT (rep_op) */	for (i = 0; i != state->handCount[currentPlayer]; i++){
358: /* MUTANT (rep_op) */	for (i = 0; i < state->handCount[currentPlayer]; i--){
358: /* MUTANT (rep_const) */	for (i = 1; i < state->handCount[currentPlayer]; i++){
358: /* MUTANT (rep_const) */	for (i = -1; i < state->handCount[currentPlayer]; i++){
359: /* MUTANT (del_stmt) */ /* 		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; */ //Discard
359: /* MUTANT (rep_op) */		state->discard[currentPlayer][state->discardCount[currentPlayer]--] = state->hand[currentPlayer][i];//Discard
360: /* MUTANT (del_stmt) */ /* 		state->hand[currentPlayer][i] = -1; */ //Set card to -1
360: /* MUTANT (rep_const) */		state->hand[currentPlayer][i] = 0;//Set card to -1
360: /* MUTANT (rep_const) */		state->hand[currentPlayer][i] = 1;//Set card to -1
360: /* MUTANT (rep_const) */		state->hand[currentPlayer][i] = ((-1)+1);//Set card to -1
360: /* MUTANT (rep_const) */		state->hand[currentPlayer][i] = ((-1)-1);//Set card to -1
362: /* MUTANT (rep_const) */	state->handCount[currentPlayer] = 1;//Reset hand count
362: /* MUTANT (rep_const) */	state->handCount[currentPlayer] = -1;//Reset hand count
365: /* MUTANT (rep_op) */	if (currentPlayer <= (state->numPlayers - 1)){ 
365: /* MUTANT (rep_op) */	if (currentPlayer > (state->numPlayers - 1)){ 
365: /* MUTANT (rep_op) */	if (currentPlayer >= (state->numPlayers - 1)){ 
365: /* MUTANT (rep_op) */	if (currentPlayer == (state->numPlayers - 1)){ 
365: /* MUTANT (rep_op) */	if (currentPlayer != (state->numPlayers - 1)){ 
365: /* MUTANT (rep_const) */	if (currentPlayer < (state->numPlayers - 0)){ 
365: /* MUTANT (rep_const) */	if (currentPlayer < (state->numPlayers - -1)){ 
365: /* MUTANT (rep_const) */	if (currentPlayer < (state->numPlayers - ((1)+1))){ 
365: /* MUTANT (negate) */	if(! (currentPlayer < (state->numPlayers - 1))){ 
366: /* MUTANT (del_stmt) */ /* 		state->whoseTurn = currentPlayer + 1; */ //Still safe to increment
366: /* MUTANT (rep_op) */		state->whoseTurn = currentPlayer - 1;//Still safe to increment
366: /* MUTANT (rep_op) */		state->whoseTurn = currentPlayer * 1;//Still safe to increment
366: /* MUTANT (rep_op) */		state->whoseTurn = currentPlayer % 1;//Still safe to increment
366: /* MUTANT (rep_const) */		state->whoseTurn = currentPlayer + 0;//Still safe to increment
366: /* MUTANT (rep_const) */		state->whoseTurn = currentPlayer + -1;//Still safe to increment
366: /* MUTANT (rep_const) */		state->whoseTurn = currentPlayer + ((1)+1);//Still safe to increment
369: /* MUTANT (del_stmt) */ /* 		state->whoseTurn = 0; */ //Max player has been reached, loop back around to player 1
369: /* MUTANT (rep_const) */		state->whoseTurn = 1;//Max player has been reached, loop back around to player 1
369: /* MUTANT (rep_const) */		state->whoseTurn = -1;//Max player has been reached, loop back around to player 1
372: /* MUTANT (rep_const) */	state->outpostPlayed = 1;
372: /* MUTANT (rep_const) */	state->outpostPlayed = -1;
373: /* MUTANT (del_stmt) */ /* 	state->phase = 0; */ 
373: /* MUTANT (rep_const) */	state->phase = 1;
373: /* MUTANT (rep_const) */	state->phase = -1;
374: /* MUTANT (del_stmt) */ /* 	state->numActions = 1; */ 
374: /* MUTANT (rep_const) */	state->numActions = 0;
374: /* MUTANT (rep_const) */	state->numActions = -1;
374: /* MUTANT (rep_const) */	state->numActions = ((1)+1);
375: /* MUTANT (del_stmt) */ /* 	state->coins = 0; */ 
375: /* MUTANT (rep_const) */	state->coins = 1;
375: /* MUTANT (rep_const) */	state->coins = -1;
376: /* MUTANT (del_stmt) */ /* 	state->numBuys = 1; */ 
376: /* MUTANT (rep_const) */	state->numBuys = 0;
376: /* MUTANT (rep_const) */	state->numBuys = -1;
376: /* MUTANT (rep_const) */	state->numBuys = ((1)+1);
377: /* MUTANT (del_stmt) */ /* 	state->playedCardCount = 0; */ 
377: /* MUTANT (rep_const) */	state->playedCardCount = 1;
377: /* MUTANT (rep_const) */	state->playedCardCount = -1;
378: /* MUTANT (del_stmt) */ /* 	state->handCount[state->whoseTurn] = 0; */ 
378: /* MUTANT (rep_const) */	state->handCount[state->whoseTurn] = 1;
378: /* MUTANT (rep_const) */	state->handCount[state->whoseTurn] = -1;
382: /* MUTANT (rep_op) */	for (k = 0; k <= 5; k++){
382: /* MUTANT (rep_op) */	for (k = 0; k > 5; k++){
382: /* MUTANT (rep_op) */	for (k = 0; k >= 5; k++){
382: /* MUTANT (rep_op) */	for (k = 0; k == 5; k++){
382: /* MUTANT (rep_op) */	for (k = 0; k != 5; k++){
382: /* MUTANT (rep_op) */	for (k = 0; k < 5; k--){
382: /* MUTANT (rep_const) */	for (k = 1; k < 5; k++){
382: /* MUTANT (rep_const) */	for (k = -1; k < 5; k++){
382: /* MUTANT (rep_const) */	for (k = 0; k < 0; k++){
382: /* MUTANT (rep_const) */	for (k = 0; k < 1; k++){
382: /* MUTANT (rep_const) */	for (k = 0; k < -1; k++){
382: /* MUTANT (rep_const) */	for (k = 0; k < ((5)+1); k++){
382: /* MUTANT (rep_const) */	for (k = 0; k < ((5)-1); k++){
383: /* MUTANT (del_stmt) */ /* 		drawCard(state->whoseTurn, state); */ //Draw a card
387: /* MUTANT (rep_const) */	updateCoins(state->whoseTurn, state , 1);
387: /* MUTANT (rep_const) */	updateCoins(state->whoseTurn, state , -1);
389: /* MUTANT (del_stmt) */ /* 	return 0; */ 
389: /* MUTANT (rep_const) */	return 1;
389: /* MUTANT (rep_const) */	return -1;
393: /* MUTANT (del_stmt) */ /* 	int i; */ 
394: /* MUTANT (del_stmt) */ /* 	int j; */ 
397: /* MUTANT (rep_op) */	if (state->supplyCount[province] != 0)
397: /* MUTANT (rep_const) */	if (state->supplyCount[province] == 1)
397: /* MUTANT (rep_const) */	if (state->supplyCount[province] == -1)
397: /* MUTANT (negate) */	if(! (state->supplyCount[province] == 0))
399: /* MUTANT (del_stmt) */ /* 			return 1; */ 
399: /* MUTANT (rep_const) */			return 0;
399: /* MUTANT (rep_const) */			return -1;
399: /* MUTANT (rep_const) */			return ((1)+1);
403: /* MUTANT (rep_const) */	j = 1;
403: /* MUTANT (rep_const) */	j = -1;
404: /* MUTANT (rep_op) */	for (i = 0; i <= 25; i++)
404: /* MUTANT (rep_op) */	for (i = 0; i > 25; i++)
404: /* MUTANT (rep_op) */	for (i = 0; i >= 25; i++)
404: /* MUTANT (rep_op) */	for (i = 0; i == 25; i++)
404: /* MUTANT (rep_op) */	for (i = 0; i != 25; i++)
404: /* MUTANT (rep_op) */	for (i = 0; i < 25; i--)
404: /* MUTANT (rep_const) */	for (i = 1; i < 25; i++)
404: /* MUTANT (rep_const) */	for (i = -1; i < 25; i++)
404: /* MUTANT (rep_const) */	for (i = 0; i < 0; i++)
404: /* MUTANT (rep_const) */	for (i = 0; i < 1; i++)
404: /* MUTANT (rep_const) */	for (i = 0; i < -1; i++)
404: /* MUTANT (rep_const) */	for (i = 0; i < ((25)+1); i++)
404: /* MUTANT (rep_const) */	for (i = 0; i < ((25)-1); i++)
406: /* MUTANT (rep_op) */			if (state->supplyCount[i] != 0)
406: /* MUTANT (rep_const) */			if (state->supplyCount[i] == 1)
406: /* MUTANT (rep_const) */			if (state->supplyCount[i] == -1)
406: /* MUTANT (negate) */			if(! (state->supplyCount[i] == 0))
408: /* MUTANT (del_stmt) */ /* 					j++; */ 
408: /* MUTANT (rep_op) */					j--;
411: /* MUTANT (rep_op) */	if ( j <= 3)
411: /* MUTANT (rep_op) */	if ( j < 3)
411: /* MUTANT (rep_op) */	if ( j > 3)
411: /* MUTANT (rep_op) */	if ( j == 3)
411: /* MUTANT (rep_op) */	if ( j != 3)
411: /* MUTANT (rep_const) */	if ( j >= 0)
411: /* MUTANT (rep_const) */	if ( j >= 1)
411: /* MUTANT (rep_const) */	if ( j >= -1)
411: /* MUTANT (rep_const) */	if ( j >= ((3)+1))
411: /* MUTANT (rep_const) */	if ( j >= ((3)-1))
411: /* MUTANT (negate) */	if(! ( j >= 3))
413: /* MUTANT (del_stmt) */ /* 			return 1; */ 
413: /* MUTANT (rep_const) */			return 0;
413: /* MUTANT (rep_const) */			return -1;
413: /* MUTANT (rep_const) */			return ((1)+1);
416: /* MUTANT (rep_const) */	return 1;
416: /* MUTANT (rep_const) */	return -1;
421: /* MUTANT (del_stmt) */ /* 	int i; */ 
422: /* MUTANT (del_stmt) */ /* 	int score = 0; */ 
422: /* MUTANT (rep_const) */	int score = 1;
422: /* MUTANT (rep_const) */	int score = -1;
424: /* MUTANT (rep_op) */	for (i = 0; i <= state->handCount[player]; i++)
424: /* MUTANT (rep_op) */	for (i = 0; i > state->handCount[player]; i++)
424: /* MUTANT (rep_op) */	for (i = 0; i >= state->handCount[player]; i++)
424: /* MUTANT (rep_op) */	for (i = 0; i == state->handCount[player]; i++)
424: /* MUTANT (rep_op) */	for (i = 0; i != state->handCount[player]; i++)
424: /* MUTANT (rep_op) */	for (i = 0; i < state->handCount[player]; i--)
424: /* MUTANT (rep_const) */	for (i = 1; i < state->handCount[player]; i++)
424: /* MUTANT (rep_const) */	for (i = -1; i < state->handCount[player]; i++)
426: /* MUTANT (del_stmt) */ /* 			if (state->hand[player][i] == curse) { score = score - 1; */  };
426: /* MUTANT (del_stmt) */ /* 			if (state->hand[player][i] == curse) { score = score - 1; */  /*  }; */ 
426: /* MUTANT (del_stmt) */			if (state->hand[player][i] == curse) { score = score - 1; /*  }; */ 
426: /* MUTANT (rep_op) */			if (state->hand[player][i] != curse) { score = score - 1; };
426: /* MUTANT (rep_const) */			if (state->hand[player][i] == curse) { score = score - 0; };
426: /* MUTANT (rep_const) */			if (state->hand[player][i] == curse) { score = score - -1; };
426: /* MUTANT (rep_const) */			if (state->hand[player][i] == curse) { score = score - ((1)+1); };
426: /* MUTANT (negate) */			if(! (state->hand[player][i] == curse)) { score = score - 1; };
427: /* MUTANT (del_stmt) */ /* 			if (state->hand[player][i] == estate) { score = score + 1; */  };
427: /* MUTANT (del_stmt) */ /* 			if (state->hand[player][i] == estate) { score = score + 1; */  /*  }; */ 
427: /* MUTANT (del_stmt) */			if (state->hand[player][i] == estate) { score = score + 1; /*  }; */ 
427: /* MUTANT (rep_op) */			if (state->hand[player][i] != estate) { score = score + 1; };
427: /* MUTANT (rep_op) */			if (state->hand[player][i] == estate) { score = score - 1; };
427: /* MUTANT (rep_op) */			if (state->hand[player][i] == estate) { score = score * 1; };
427: /* MUTANT (rep_op) */			if (state->hand[player][i] == estate) { score = score % 1; };
427: /* MUTANT (rep_const) */			if (state->hand[player][i] == estate) { score = score + 0; };
427: /* MUTANT (rep_const) */			if (state->hand[player][i] == estate) { score = score + -1; };
427: /* MUTANT (rep_const) */			if (state->hand[player][i] == estate) { score = score + ((1)+1); };
427: /* MUTANT (negate) */			if(! (state->hand[player][i] == estate)) { score = score + 1; };
428: /* MUTANT (del_stmt) */ /* 			if (state->hand[player][i] == duchy) { score = score + 3; */  };
428: /* MUTANT (del_stmt) */ /* 			if (state->hand[player][i] == duchy) { score = score + 3; */  /*  }; */ 
428: /* MUTANT (del_stmt) */			if (state->hand[player][i] == duchy) { score = score + 3; /*  }; */ 
428: /* MUTANT (rep_op) */			if (state->hand[player][i] != duchy) { score = score + 3; };
428: /* MUTANT (rep_op) */			if (state->hand[player][i] == duchy) { score = score - 3; };
428: /* MUTANT (rep_op) */			if (state->hand[player][i] == duchy) { score = score * 3; };
428: /* MUTANT (rep_op) */			if (state->hand[player][i] == duchy) { score = score % 3; };
428: /* MUTANT (rep_const) */			if (state->hand[player][i] == duchy) { score = score + 0; };
428: /* MUTANT (rep_const) */			if (state->hand[player][i] == duchy) { score = score + 1; };
428: /* MUTANT (rep_const) */			if (state->hand[player][i] == duchy) { score = score + -1; };
428: /* MUTANT (rep_const) */			if (state->hand[player][i] == duchy) { score = score + ((3)+1); };
428: /* MUTANT (rep_const) */			if (state->hand[player][i] == duchy) { score = score + ((3)-1); };
428: /* MUTANT (negate) */			if(! (state->hand[player][i] == duchy)) { score = score + 3; };
429: /* MUTANT (del_stmt) */ /* 			if (state->hand[player][i] == province) { score = score + 6; */  };
429: /* MUTANT (del_stmt) */ /* 			if (state->hand[player][i] == province) { score = score + 6; */  /*  }; */ 
429: /* MUTANT (del_stmt) */			if (state->hand[player][i] == province) { score = score + 6; /*  }; */ 
429: /* MUTANT (rep_op) */			if (state->hand[player][i] != province) { score = score + 6; };
429: /* MUTANT (rep_op) */			if (state->hand[player][i] == province) { score = score - 6; };
429: /* MUTANT (rep_op) */			if (state->hand[player][i] == province) { score = score * 6; };
429: /* MUTANT (rep_op) */			if (state->hand[player][i] == province) { score = score % 6; };
429: /* MUTANT (rep_const) */			if (state->hand[player][i] == province) { score = score + 0; };
429: /* MUTANT (rep_const) */			if (state->hand[player][i] == province) { score = score + 1; };
429: /* MUTANT (rep_const) */			if (state->hand[player][i] == province) { score = score + -1; };
429: /* MUTANT (rep_const) */			if (state->hand[player][i] == province) { score = score + ((6)+1); };
429: /* MUTANT (rep_const) */			if (state->hand[player][i] == province) { score = score + ((6)-1); };
429: /* MUTANT (negate) */			if(! (state->hand[player][i] == province)) { score = score + 6; };
430: /* MUTANT (del_stmt) */ /* 			if (state->hand[player][i] == great_hall) { score = score + 1; */  };
430: /* MUTANT (del_stmt) */ /* 			if (state->hand[player][i] == great_hall) { score = score + 1; */  /*  }; */ 
430: /* MUTANT (del_stmt) */			if (state->hand[player][i] == great_hall) { score = score + 1; /*  }; */ 
430: /* MUTANT (rep_op) */			if (state->hand[player][i] != great_hall) { score = score + 1; };
430: /* MUTANT (rep_op) */			if (state->hand[player][i] == great_hall) { score = score - 1; };
430: /* MUTANT (rep_op) */			if (state->hand[player][i] == great_hall) { score = score * 1; };
430: /* MUTANT (rep_op) */			if (state->hand[player][i] == great_hall) { score = score % 1; };
430: /* MUTANT (rep_const) */			if (state->hand[player][i] == great_hall) { score = score + 0; };
430: /* MUTANT (rep_const) */			if (state->hand[player][i] == great_hall) { score = score + -1; };
430: /* MUTANT (rep_const) */			if (state->hand[player][i] == great_hall) { score = score + ((1)+1); };
430: /* MUTANT (negate) */			if(! (state->hand[player][i] == great_hall)) { score = score + 1; };
431: /* MUTANT (del_stmt) */ /* 			if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  };
431: /* MUTANT (del_stmt) */ /* 			if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  /*  }; */ 
431: /* MUTANT (del_stmt) */			if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); /*  }; */ 
431: /* MUTANT (rep_op) */			if (state->hand[player][i] != gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
431: /* MUTANT (rep_op) */			if (state->hand[player][i] == gardens) { score = score - ( fullDeckCount(player, 0, state) / 10 ); };
431: /* MUTANT (rep_op) */			if (state->hand[player][i] == gardens) { score = score * ( fullDeckCount(player, 0, state) / 10 ); };
431: /* MUTANT (rep_op) */			if (state->hand[player][i] == gardens) { score = score % ( fullDeckCount(player, 0, state) / 10 ); };
431: /* MUTANT (rep_const) */			if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 1, state) / 10 ); };
431: /* MUTANT (rep_const) */			if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, -1, state) / 10 ); };
431: /* MUTANT (rep_const) */			if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 0 ); };
431: /* MUTANT (rep_const) */			if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 1 ); };
431: /* MUTANT (rep_const) */			if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / -1 ); };
431: /* MUTANT (rep_const) */			if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)+1) ); };
431: /* MUTANT (rep_const) */			if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)-1) ); };
431: /* MUTANT (negate) */			if(! (state->hand[player][i] == gardens)) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
435: /* MUTANT (rep_op) */	for (i = 0; i <= state->discardCount[player]; i++)
435: /* MUTANT (rep_op) */	for (i = 0; i > state->discardCount[player]; i++)
435: /* MUTANT (rep_op) */	for (i = 0; i >= state->discardCount[player]; i++)
435: /* MUTANT (rep_op) */	for (i = 0; i == state->discardCount[player]; i++)
435: /* MUTANT (rep_op) */	for (i = 0; i != state->discardCount[player]; i++)
435: /* MUTANT (rep_op) */	for (i = 0; i < state->discardCount[player]; i--)
435: /* MUTANT (rep_const) */	for (i = 1; i < state->discardCount[player]; i++)
435: /* MUTANT (rep_const) */	for (i = -1; i < state->discardCount[player]; i++)
437: /* MUTANT (del_stmt) */ /* 			if (state->discard[player][i] == curse) { score = score - 1; */  };
437: /* MUTANT (del_stmt) */ /* 			if (state->discard[player][i] == curse) { score = score - 1; */  /*  }; */ 
437: /* MUTANT (del_stmt) */			if (state->discard[player][i] == curse) { score = score - 1; /*  }; */ 
437: /* MUTANT (rep_op) */			if (state->discard[player][i] != curse) { score = score - 1; };
437: /* MUTANT (rep_const) */			if (state->discard[player][i] == curse) { score = score - 0; };
437: /* MUTANT (rep_const) */			if (state->discard[player][i] == curse) { score = score - -1; };
437: /* MUTANT (rep_const) */			if (state->discard[player][i] == curse) { score = score - ((1)+1); };
437: /* MUTANT (negate) */			if(! (state->discard[player][i] == curse)) { score = score - 1; };
438: /* MUTANT (del_stmt) */ /* 			if (state->discard[player][i] == estate) { score = score + 1; */  };
438: /* MUTANT (del_stmt) */ /* 			if (state->discard[player][i] == estate) { score = score + 1; */  /*  }; */ 
438: /* MUTANT (del_stmt) */			if (state->discard[player][i] == estate) { score = score + 1; /*  }; */ 
438: /* MUTANT (rep_op) */			if (state->discard[player][i] != estate) { score = score + 1; };
438: /* MUTANT (rep_op) */			if (state->discard[player][i] == estate) { score = score - 1; };
438: /* MUTANT (rep_op) */			if (state->discard[player][i] == estate) { score = score * 1; };
438: /* MUTANT (rep_op) */			if (state->discard[player][i] == estate) { score = score % 1; };
438: /* MUTANT (rep_const) */			if (state->discard[player][i] == estate) { score = score + 0; };
438: /* MUTANT (rep_const) */			if (state->discard[player][i] == estate) { score = score + -1; };
438: /* MUTANT (rep_const) */			if (state->discard[player][i] == estate) { score = score + ((1)+1); };
438: /* MUTANT (negate) */			if(! (state->discard[player][i] == estate)) { score = score + 1; };
439: /* MUTANT (del_stmt) */ /* 			if (state->discard[player][i] == duchy) { score = score + 3; */  };
439: /* MUTANT (del_stmt) */ /* 			if (state->discard[player][i] == duchy) { score = score + 3; */  /*  }; */ 
439: /* MUTANT (del_stmt) */			if (state->discard[player][i] == duchy) { score = score + 3; /*  }; */ 
439: /* MUTANT (rep_op) */			if (state->discard[player][i] != duchy) { score = score + 3; };
439: /* MUTANT (rep_op) */			if (state->discard[player][i] == duchy) { score = score - 3; };
439: /* MUTANT (rep_op) */			if (state->discard[player][i] == duchy) { score = score * 3; };
439: /* MUTANT (rep_op) */			if (state->discard[player][i] == duchy) { score = score % 3; };
439: /* MUTANT (rep_const) */			if (state->discard[player][i] == duchy) { score = score + 0; };
439: /* MUTANT (rep_const) */			if (state->discard[player][i] == duchy) { score = score + 1; };
439: /* MUTANT (rep_const) */			if (state->discard[player][i] == duchy) { score = score + -1; };
439: /* MUTANT (rep_const) */			if (state->discard[player][i] == duchy) { score = score + ((3)+1); };
439: /* MUTANT (rep_const) */			if (state->discard[player][i] == duchy) { score = score + ((3)-1); };
439: /* MUTANT (negate) */			if(! (state->discard[player][i] == duchy)) { score = score + 3; };
440: /* MUTANT (del_stmt) */ /* 			if (state->discard[player][i] == province) { score = score + 6; */  };
440: /* MUTANT (del_stmt) */ /* 			if (state->discard[player][i] == province) { score = score + 6; */  /*  }; */ 
440: /* MUTANT (del_stmt) */			if (state->discard[player][i] == province) { score = score + 6; /*  }; */ 
440: /* MUTANT (rep_op) */			if (state->discard[player][i] != province) { score = score + 6; };
440: /* MUTANT (rep_op) */			if (state->discard[player][i] == province) { score = score - 6; };
440: /* MUTANT (rep_op) */			if (state->discard[player][i] == province) { score = score * 6; };
440: /* MUTANT (rep_op) */			if (state->discard[player][i] == province) { score = score % 6; };
440: /* MUTANT (rep_const) */			if (state->discard[player][i] == province) { score = score + 0; };
440: /* MUTANT (rep_const) */			if (state->discard[player][i] == province) { score = score + 1; };
440: /* MUTANT (rep_const) */			if (state->discard[player][i] == province) { score = score + -1; };
440: /* MUTANT (rep_const) */			if (state->discard[player][i] == province) { score = score + ((6)+1); };
440: /* MUTANT (rep_const) */			if (state->discard[player][i] == province) { score = score + ((6)-1); };
440: /* MUTANT (negate) */			if(! (state->discard[player][i] == province)) { score = score + 6; };
441: /* MUTANT (del_stmt) */ /* 			if (state->discard[player][i] == great_hall) { score = score + 1; */  };
441: /* MUTANT (del_stmt) */ /* 			if (state->discard[player][i] == great_hall) { score = score + 1; */  /*  }; */ 
441: /* MUTANT (del_stmt) */			if (state->discard[player][i] == great_hall) { score = score + 1; /*  }; */ 
441: /* MUTANT (rep_op) */			if (state->discard[player][i] != great_hall) { score = score + 1; };
441: /* MUTANT (rep_op) */			if (state->discard[player][i] == great_hall) { score = score - 1; };
441: /* MUTANT (rep_op) */			if (state->discard[player][i] == great_hall) { score = score * 1; };
441: /* MUTANT (rep_op) */			if (state->discard[player][i] == great_hall) { score = score % 1; };
441: /* MUTANT (rep_const) */			if (state->discard[player][i] == great_hall) { score = score + 0; };
441: /* MUTANT (rep_const) */			if (state->discard[player][i] == great_hall) { score = score + -1; };
441: /* MUTANT (rep_const) */			if (state->discard[player][i] == great_hall) { score = score + ((1)+1); };
441: /* MUTANT (negate) */			if(! (state->discard[player][i] == great_hall)) { score = score + 1; };
442: /* MUTANT (del_stmt) */ /* 			if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  };
442: /* MUTANT (del_stmt) */ /* 			if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  /*  }; */ 
442: /* MUTANT (del_stmt) */			if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); /*  }; */ 
442: /* MUTANT (rep_op) */			if (state->discard[player][i] != gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
442: /* MUTANT (rep_op) */			if (state->discard[player][i] == gardens) { score = score - ( fullDeckCount(player, 0, state) / 10 ); };
442: /* MUTANT (rep_op) */			if (state->discard[player][i] == gardens) { score = score * ( fullDeckCount(player, 0, state) / 10 ); };
442: /* MUTANT (rep_op) */			if (state->discard[player][i] == gardens) { score = score % ( fullDeckCount(player, 0, state) / 10 ); };
442: /* MUTANT (rep_const) */			if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 1, state) / 10 ); };
442: /* MUTANT (rep_const) */			if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, -1, state) / 10 ); };
442: /* MUTANT (rep_const) */			if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 0 ); };
442: /* MUTANT (rep_const) */			if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 1 ); };
442: /* MUTANT (rep_const) */			if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / -1 ); };
442: /* MUTANT (rep_const) */			if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)+1) ); };
442: /* MUTANT (rep_const) */			if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)-1) ); };
442: /* MUTANT (negate) */			if(! (state->discard[player][i] == gardens)) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
446: /* MUTANT (rep_op) */	for (i = 0; i <= state->discardCount[player]; i++)
446: /* MUTANT (rep_op) */	for (i = 0; i > state->discardCount[player]; i++)
446: /* MUTANT (rep_op) */	for (i = 0; i >= state->discardCount[player]; i++)
446: /* MUTANT (rep_op) */	for (i = 0; i == state->discardCount[player]; i++)
446: /* MUTANT (rep_op) */	for (i = 0; i != state->discardCount[player]; i++)
446: /* MUTANT (rep_op) */	for (i = 0; i < state->discardCount[player]; i--)
446: /* MUTANT (rep_const) */	for (i = 1; i < state->discardCount[player]; i++)
446: /* MUTANT (rep_const) */	for (i = -1; i < state->discardCount[player]; i++)
448: /* MUTANT (del_stmt) */ /* 			if (state->deck[player][i] == curse) { score = score - 1; */  };
448: /* MUTANT (del_stmt) */ /* 			if (state->deck[player][i] == curse) { score = score - 1; */  /*  }; */ 
448: /* MUTANT (del_stmt) */			if (state->deck[player][i] == curse) { score = score - 1; /*  }; */ 
448: /* MUTANT (rep_op) */			if (state->deck[player][i] != curse) { score = score - 1; };
448: /* MUTANT (rep_const) */			if (state->deck[player][i] == curse) { score = score - 0; };
448: /* MUTANT (rep_const) */			if (state->deck[player][i] == curse) { score = score - -1; };
448: /* MUTANT (rep_const) */			if (state->deck[player][i] == curse) { score = score - ((1)+1); };
448: /* MUTANT (negate) */			if(! (state->deck[player][i] == curse)) { score = score - 1; };
449: /* MUTANT (del_stmt) */ /* 			if (state->deck[player][i] == estate) { score = score + 1; */  };
449: /* MUTANT (del_stmt) */ /* 			if (state->deck[player][i] == estate) { score = score + 1; */  /*  }; */ 
449: /* MUTANT (del_stmt) */			if (state->deck[player][i] == estate) { score = score + 1; /*  }; */ 
449: /* MUTANT (rep_op) */			if (state->deck[player][i] != estate) { score = score + 1; };
449: /* MUTANT (rep_op) */			if (state->deck[player][i] == estate) { score = score - 1; };
449: /* MUTANT (rep_op) */			if (state->deck[player][i] == estate) { score = score * 1; };
449: /* MUTANT (rep_op) */			if (state->deck[player][i] == estate) { score = score % 1; };
449: /* MUTANT (rep_const) */			if (state->deck[player][i] == estate) { score = score + 0; };
449: /* MUTANT (rep_const) */			if (state->deck[player][i] == estate) { score = score + -1; };
449: /* MUTANT (rep_const) */			if (state->deck[player][i] == estate) { score = score + ((1)+1); };
449: /* MUTANT (negate) */			if(! (state->deck[player][i] == estate)) { score = score + 1; };
450: /* MUTANT (del_stmt) */ /* 			if (state->deck[player][i] == duchy) { score = score + 3; */  };
450: /* MUTANT (del_stmt) */ /* 			if (state->deck[player][i] == duchy) { score = score + 3; */  /*  }; */ 
450: /* MUTANT (del_stmt) */			if (state->deck[player][i] == duchy) { score = score + 3; /*  }; */ 
450: /* MUTANT (rep_op) */			if (state->deck[player][i] != duchy) { score = score + 3; };
450: /* MUTANT (rep_op) */			if (state->deck[player][i] == duchy) { score = score - 3; };
450: /* MUTANT (rep_op) */			if (state->deck[player][i] == duchy) { score = score * 3; };
450: /* MUTANT (rep_op) */			if (state->deck[player][i] == duchy) { score = score % 3; };
450: /* MUTANT (rep_const) */			if (state->deck[player][i] == duchy) { score = score + 0; };
450: /* MUTANT (rep_const) */			if (state->deck[player][i] == duchy) { score = score + 1; };
450: /* MUTANT (rep_const) */			if (state->deck[player][i] == duchy) { score = score + -1; };
450: /* MUTANT (rep_const) */			if (state->deck[player][i] == duchy) { score = score + ((3)+1); };
450: /* MUTANT (rep_const) */			if (state->deck[player][i] == duchy) { score = score + ((3)-1); };
450: /* MUTANT (negate) */			if(! (state->deck[player][i] == duchy)) { score = score + 3; };
451: /* MUTANT (del_stmt) */ /* 			if (state->deck[player][i] == province) { score = score + 6; */  };
451: /* MUTANT (del_stmt) */ /* 			if (state->deck[player][i] == province) { score = score + 6; */  /*  }; */ 
451: /* MUTANT (del_stmt) */			if (state->deck[player][i] == province) { score = score + 6; /*  }; */ 
451: /* MUTANT (rep_op) */			if (state->deck[player][i] != province) { score = score + 6; };
451: /* MUTANT (rep_op) */			if (state->deck[player][i] == province) { score = score - 6; };
451: /* MUTANT (rep_op) */			if (state->deck[player][i] == province) { score = score * 6; };
451: /* MUTANT (rep_op) */			if (state->deck[player][i] == province) { score = score % 6; };
451: /* MUTANT (rep_const) */			if (state->deck[player][i] == province) { score = score + 0; };
451: /* MUTANT (rep_const) */			if (state->deck[player][i] == province) { score = score + 1; };
451: /* MUTANT (rep_const) */			if (state->deck[player][i] == province) { score = score + -1; };
451: /* MUTANT (rep_const) */			if (state->deck[player][i] == province) { score = score + ((6)+1); };
451: /* MUTANT (rep_const) */			if (state->deck[player][i] == province) { score = score + ((6)-1); };
451: /* MUTANT (negate) */			if(! (state->deck[player][i] == province)) { score = score + 6; };
452: /* MUTANT (del_stmt) */ /* 			if (state->deck[player][i] == great_hall) { score = score + 1; */  };
452: /* MUTANT (del_stmt) */ /* 			if (state->deck[player][i] == great_hall) { score = score + 1; */  /*  }; */ 
452: /* MUTANT (del_stmt) */			if (state->deck[player][i] == great_hall) { score = score + 1; /*  }; */ 
452: /* MUTANT (rep_op) */			if (state->deck[player][i] != great_hall) { score = score + 1; };
452: /* MUTANT (rep_op) */			if (state->deck[player][i] == great_hall) { score = score - 1; };
452: /* MUTANT (rep_op) */			if (state->deck[player][i] == great_hall) { score = score * 1; };
452: /* MUTANT (rep_op) */			if (state->deck[player][i] == great_hall) { score = score % 1; };
452: /* MUTANT (rep_const) */			if (state->deck[player][i] == great_hall) { score = score + 0; };
452: /* MUTANT (rep_const) */			if (state->deck[player][i] == great_hall) { score = score + -1; };
452: /* MUTANT (rep_const) */			if (state->deck[player][i] == great_hall) { score = score + ((1)+1); };
452: /* MUTANT (negate) */			if(! (state->deck[player][i] == great_hall)) { score = score + 1; };
453: /* MUTANT (del_stmt) */ /* 			if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  };
453: /* MUTANT (del_stmt) */ /* 			if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); */  /*  }; */ 
453: /* MUTANT (del_stmt) */			if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); /*  }; */ 
453: /* MUTANT (rep_op) */			if (state->deck[player][i] != gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
453: /* MUTANT (rep_op) */			if (state->deck[player][i] == gardens) { score = score - ( fullDeckCount(player, 0, state) / 10 ); };
453: /* MUTANT (rep_op) */			if (state->deck[player][i] == gardens) { score = score * ( fullDeckCount(player, 0, state) / 10 ); };
453: /* MUTANT (rep_op) */			if (state->deck[player][i] == gardens) { score = score % ( fullDeckCount(player, 0, state) / 10 ); };
453: /* MUTANT (rep_const) */			if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 1, state) / 10 ); };
453: /* MUTANT (rep_const) */			if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, -1, state) / 10 ); };
453: /* MUTANT (rep_const) */			if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 0 ); };
453: /* MUTANT (rep_const) */			if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 1 ); };
453: /* MUTANT (rep_const) */			if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / -1 ); };
453: /* MUTANT (rep_const) */			if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)+1) ); };
453: /* MUTANT (rep_const) */			if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / ((10)-1) ); };
453: /* MUTANT (negate) */			if(! (state->deck[player][i] == gardens)) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
460: /* MUTANT (del_stmt) */ /* 	int i; */ 	
461: /* MUTANT (del_stmt) */ /* 	int j; */ 
462: /* MUTANT (del_stmt) */ /* 	int highScore; */ 
463: /* MUTANT (del_stmt) */ /* 	int currentPlayer; */ 
466: /* MUTANT (rep_op) */	for (i = 0; i <= MAX_PLAYERS; i++)
466: /* MUTANT (rep_op) */	for (i = 0; i > MAX_PLAYERS; i++)
466: /* MUTANT (rep_op) */	for (i = 0; i >= MAX_PLAYERS; i++)
466: /* MUTANT (rep_op) */	for (i = 0; i == MAX_PLAYERS; i++)
466: /* MUTANT (rep_op) */	for (i = 0; i != MAX_PLAYERS; i++)
466: /* MUTANT (rep_op) */	for (i = 0; i < MAX_PLAYERS; i--)
466: /* MUTANT (rep_const) */	for (i = 1; i < MAX_PLAYERS; i++)
466: /* MUTANT (rep_const) */	for (i = -1; i < MAX_PLAYERS; i++)
469: /* MUTANT (rep_op) */			if (i <= state->numPlayers)
469: /* MUTANT (rep_op) */			if (i < state->numPlayers)
469: /* MUTANT (rep_op) */			if (i > state->numPlayers)
469: /* MUTANT (rep_op) */			if (i == state->numPlayers)
469: /* MUTANT (rep_op) */			if (i != state->numPlayers)
469: /* MUTANT (negate) */			if(! (i >= state->numPlayers))
471: /* MUTANT (del_stmt) */ /* 					players[i] = -9999; */ 
471: /* MUTANT (rep_const) */					players[i] = 0;
471: /* MUTANT (rep_const) */					players[i] = 1;
471: /* MUTANT (rep_const) */					players[i] = -1;
471: /* MUTANT (rep_const) */					players[i] = ((-9999)+1);
471: /* MUTANT (rep_const) */					players[i] = ((-9999)-1);
475: /* MUTANT (del_stmt) */ /* 					players[i] = scoreFor (i, state); */ 
480: /* MUTANT (rep_const) */	j = 1;
480: /* MUTANT (rep_const) */	j = -1;
481: /* MUTANT (rep_op) */	for (i = 0; i <= MAX_PLAYERS; i++)
481: /* MUTANT (rep_op) */	for (i = 0; i > MAX_PLAYERS; i++)
481: /* MUTANT (rep_op) */	for (i = 0; i >= MAX_PLAYERS; i++)
481: /* MUTANT (rep_op) */	for (i = 0; i == MAX_PLAYERS; i++)
481: /* MUTANT (rep_op) */	for (i = 0; i != MAX_PLAYERS; i++)
481: /* MUTANT (rep_op) */	for (i = 0; i < MAX_PLAYERS; i--)
481: /* MUTANT (rep_const) */	for (i = 1; i < MAX_PLAYERS; i++)
481: /* MUTANT (rep_const) */	for (i = -1; i < MAX_PLAYERS; i++)
483: /* MUTANT (rep_op) */			if (players[i] <= players[j])
483: /* MUTANT (rep_op) */			if (players[i] < players[j])
483: /* MUTANT (rep_op) */			if (players[i] >= players[j])
483: /* MUTANT (rep_op) */			if (players[i] == players[j])
483: /* MUTANT (rep_op) */			if (players[i] != players[j])
483: /* MUTANT (negate) */			if(! (players[i] > players[j]))
485: /* MUTANT (del_stmt) */ /* 					j = i; */ 
491: /* MUTANT (del_stmt) */ /* 	currentPlayer = whoseTurn(state); */ 
492: /* MUTANT (rep_op) */	for (i = 0; i <= MAX_PLAYERS; i++)
492: /* MUTANT (rep_op) */	for (i = 0; i > MAX_PLAYERS; i++)
492: /* MUTANT (rep_op) */	for (i = 0; i >= MAX_PLAYERS; i++)
492: /* MUTANT (rep_op) */	for (i = 0; i == MAX_PLAYERS; i++)
492: /* MUTANT (rep_op) */	for (i = 0; i != MAX_PLAYERS; i++)
492: /* MUTANT (rep_op) */	for (i = 0; i < MAX_PLAYERS; i--)
492: /* MUTANT (rep_const) */	for (i = 1; i < MAX_PLAYERS; i++)
492: /* MUTANT (rep_const) */	for (i = -1; i < MAX_PLAYERS; i++)
494: /* MUTANT (rep_op) */			if ( players[i] != highScore && i > currentPlayer )
494: /* MUTANT (rep_op) */			if ( players[i] == highScore || i > currentPlayer )
494: /* MUTANT (rep_op) */			if ( players[i] == highScore && i <= currentPlayer )
494: /* MUTANT (rep_op) */			if ( players[i] == highScore && i < currentPlayer )
494: /* MUTANT (rep_op) */			if ( players[i] == highScore && i >= currentPlayer )
494: /* MUTANT (rep_op) */			if ( players[i] == highScore && i == currentPlayer )
494: /* MUTANT (rep_op) */			if ( players[i] == highScore && i != currentPlayer )
494: /* MUTANT (negate) */			if(! ( players[i] == highScore && i > currentPlayer ))
496: /* MUTANT (del_stmt) */ /* 					players[i]++; */ 
496: /* MUTANT (rep_op) */					players[i]--;
501: /* MUTANT (rep_const) */	j = 1;
501: /* MUTANT (rep_const) */	j = -1;
502: /* MUTANT (rep_op) */	for (i = 0; i <= MAX_PLAYERS; i++)
502: /* MUTANT (rep_op) */	for (i = 0; i > MAX_PLAYERS; i++)
502: /* MUTANT (rep_op) */	for (i = 0; i >= MAX_PLAYERS; i++)
502: /* MUTANT (rep_op) */	for (i = 0; i == MAX_PLAYERS; i++)
502: /* MUTANT (rep_op) */	for (i = 0; i != MAX_PLAYERS; i++)
502: /* MUTANT (rep_op) */	for (i = 0; i < MAX_PLAYERS; i--)
502: /* MUTANT (rep_const) */	for (i = 1; i < MAX_PLAYERS; i++)
502: /* MUTANT (rep_const) */	for (i = -1; i < MAX_PLAYERS; i++)
504: /* MUTANT (rep_op) */			if ( players[i] <= players[j] )
504: /* MUTANT (rep_op) */			if ( players[i] < players[j] )
504: /* MUTANT (rep_op) */			if ( players[i] >= players[j] )
504: /* MUTANT (rep_op) */			if ( players[i] == players[j] )
504: /* MUTANT (rep_op) */			if ( players[i] != players[j] )
504: /* MUTANT (negate) */			if(! ( players[i] > players[j] ))
506: /* MUTANT (del_stmt) */ /* 					j = i; */ 
512: /* MUTANT (rep_op) */	for (i = 0; i <= MAX_PLAYERS; i++)
512: /* MUTANT (rep_op) */	for (i = 0; i > MAX_PLAYERS; i++)
512: /* MUTANT (rep_op) */	for (i = 0; i >= MAX_PLAYERS; i++)
512: /* MUTANT (rep_op) */	for (i = 0; i == MAX_PLAYERS; i++)
512: /* MUTANT (rep_op) */	for (i = 0; i != MAX_PLAYERS; i++)
512: /* MUTANT (rep_op) */	for (i = 0; i < MAX_PLAYERS; i--)
512: /* MUTANT (rep_const) */	for (i = 1; i < MAX_PLAYERS; i++)
512: /* MUTANT (rep_const) */	for (i = -1; i < MAX_PLAYERS; i++)
514: /* MUTANT (rep_op) */			if ( players[i] != highScore )
514: /* MUTANT (negate) */			if(! ( players[i] == highScore ))
516: /* MUTANT (del_stmt) */ /* 					players[i] = 1; */ 
516: /* MUTANT (rep_const) */					players[i] = 0;
516: /* MUTANT (rep_const) */					players[i] = -1;
516: /* MUTANT (rep_const) */					players[i] = ((1)+1);
520: /* MUTANT (del_stmt) */ /* 					players[i] = 0; */ 
520: /* MUTANT (rep_const) */					players[i] = 1;
520: /* MUTANT (rep_const) */					players[i] = -1;
524: /* MUTANT (rep_const) */	return 1;
524: /* MUTANT (rep_const) */	return -1;
529: /* MUTANT (del_stmt) */ /* 	int deckCounter; */ 
530: /* MUTANT (rep_op) */	if (state->deckCount[player] < 0){//Deck is empty
530: /* MUTANT (rep_op) */	if (state->deckCount[player] > 0){//Deck is empty
530: /* MUTANT (rep_op) */	if (state->deckCount[player] >= 0){//Deck is empty
530: /* MUTANT (rep_op) */	if (state->deckCount[player] == 0){//Deck is empty
530: /* MUTANT (rep_op) */	if (state->deckCount[player] != 0){//Deck is empty
530: /* MUTANT (rep_const) */	if (state->deckCount[player] <= 1){//Deck is empty
530: /* MUTANT (rep_const) */	if (state->deckCount[player] <= -1){//Deck is empty
530: /* MUTANT (negate) */	if(! (state->deckCount[player] <= 0)){//Deck is empty
533: /* MUTANT (del_stmt) */ /* 		int i; */ 
535: /* MUTANT (rep_op) */		for (i = 0; i <= state->discardCount[player];i++){
535: /* MUTANT (rep_op) */		for (i = 0; i > state->discardCount[player];i++){
535: /* MUTANT (rep_op) */		for (i = 0; i >= state->discardCount[player];i++){
535: /* MUTANT (rep_op) */		for (i = 0; i == state->discardCount[player];i++){
535: /* MUTANT (rep_op) */		for (i = 0; i != state->discardCount[player];i++){
535: /* MUTANT (rep_op) */		for (i = 0; i < state->discardCount[player];i--){
535: /* MUTANT (rep_const) */		for (i = 1; i < state->discardCount[player];i++){
535: /* MUTANT (rep_const) */		for (i = -1; i < state->discardCount[player];i++){
536: /* MUTANT (del_stmt) */ /* 			state->deck[player][i] = state->discard[player][i]; */ 
537: /* MUTANT (del_stmt) */ /* 			state->discard[player][i] = -1; */ 
537: /* MUTANT (rep_const) */			state->discard[player][i] = 0;
537: /* MUTANT (rep_const) */			state->discard[player][i] = 1;
537: /* MUTANT (rep_const) */			state->discard[player][i] = ((-1)+1);
537: /* MUTANT (rep_const) */			state->discard[player][i] = ((-1)-1);
541: /* MUTANT (del_stmt) */ /* 		state->discardCount[player] = 0; */ //Reset discard
541: /* MUTANT (rep_const) */		state->discardCount[player] = 1;//Reset discard
541: /* MUTANT (rep_const) */		state->discardCount[player] = -1;//Reset discard
544: /* MUTANT (del_stmt) */ /* 		shuffle(player, state); */ //Shuffle the deck up and make it so that we can draw
546: /* MUTANT (negate) */		if(! (DEBUG)){//Debug statements
547: /* MUTANT (del_stmt) */ /* 			printf("Deck count now: %d\n", state->deckCount[player]); */ 
550: /* MUTANT (rep_const) */		state->discardCount[player] = 1;
550: /* MUTANT (rep_const) */		state->discardCount[player] = -1;
553: /* MUTANT (del_stmt) */ /* 		count = state->handCount[player]; */ //Get current player's hand count
555: /* MUTANT (negate) */		if(! (DEBUG)){//Debug statements
556: /* MUTANT (del_stmt) */ /* 			printf("Current hand count: %d\n", count); */ 
561: /* MUTANT (rep_op) */		if (deckCounter != 0)
561: /* MUTANT (rep_const) */		if (deckCounter == 1)
561: /* MUTANT (rep_const) */		if (deckCounter == -1)
561: /* MUTANT (negate) */		if(! (deckCounter == 0))
562: /* MUTANT (rep_const) */			return 0;
562: /* MUTANT (rep_const) */			return 1;
562: /* MUTANT (rep_const) */			return ((-1)+1);
562: /* MUTANT (rep_const) */			return ((-1)-1);
564: /* MUTANT (del_stmt) */ /* 		state->hand[player][count] = state->deck[player][deckCounter - 1]; */ //Add card to hand
564: /* MUTANT (rep_const) */		state->hand[player][count] = state->deck[player][deckCounter - 0];//Add card to hand
564: /* MUTANT (rep_const) */		state->hand[player][count] = state->deck[player][deckCounter - -1];//Add card to hand
564: /* MUTANT (rep_const) */		state->hand[player][count] = state->deck[player][deckCounter - ((1)+1)];//Add card to hand
565: /* MUTANT (del_stmt) */ /* 		state->deckCount[player]--; */ 
565: /* MUTANT (rep_op) */		state->deckCount[player]++;
566: /* MUTANT (del_stmt) */ /* 		state->handCount[player]++; */ //Increment hand count
566: /* MUTANT (rep_op) */		state->handCount[player]--;//Increment hand count
570: /* MUTANT (del_stmt) */ /* 		int count = state->handCount[player]; */ //Get current hand count for player
571: /* MUTANT (del_stmt) */ /* 		int deckCounter; */ 
572: /* MUTANT (negate) */		if(! (DEBUG)){//Debug statements
573: /* MUTANT (del_stmt) */ /* 			printf("Current hand count: %d\n", count); */ 
577: /* MUTANT (del_stmt) */ /* 		state->hand[player][count] = state->deck[player][deckCounter - 1]; */ //Add card to the hand
577: /* MUTANT (rep_const) */		state->hand[player][count] = state->deck[player][deckCounter - 0];//Add card to the hand
577: /* MUTANT (rep_const) */		state->hand[player][count] = state->deck[player][deckCounter - -1];//Add card to the hand
577: /* MUTANT (rep_const) */		state->hand[player][count] = state->deck[player][deckCounter - ((1)+1)];//Add card to the hand
578: /* MUTANT (del_stmt) */ /* 		state->deckCount[player]--; */ 
578: /* MUTANT (rep_op) */		state->deckCount[player]++;
579: /* MUTANT (del_stmt) */ /* 		state->handCount[player]++; */ //Increment hand count
579: /* MUTANT (rep_op) */		state->handCount[player]--;//Increment hand count
582: /* MUTANT (rep_const) */	return 1;
582: /* MUTANT (rep_const) */	return -1;
590: /* MUTANT (rep_const) */			return 1;
590: /* MUTANT (rep_const) */			return -1;
592: /* MUTANT (rep_const) */			return 0;
592: /* MUTANT (rep_const) */			return 1;
592: /* MUTANT (rep_const) */			return -1;
592: /* MUTANT (rep_const) */			return ((2)+1);
592: /* MUTANT (rep_const) */			return ((2)-1);
594: /* MUTANT (rep_const) */			return 0;
594: /* MUTANT (rep_const) */			return 1;
594: /* MUTANT (rep_const) */			return -1;
594: /* MUTANT (rep_const) */			return ((5)+1);
594: /* MUTANT (rep_const) */			return ((5)-1);
596: /* MUTANT (rep_const) */			return 0;
596: /* MUTANT (rep_const) */			return 1;
596: /* MUTANT (rep_const) */			return -1;
596: /* MUTANT (rep_const) */			return ((8)+1);
596: /* MUTANT (rep_const) */			return ((8)-1);
598: /* MUTANT (rep_const) */			return 1;
598: /* MUTANT (rep_const) */			return -1;
600: /* MUTANT (rep_const) */			return 0;
600: /* MUTANT (rep_const) */			return 1;
600: /* MUTANT (rep_const) */			return -1;
600: /* MUTANT (rep_const) */			return ((3)+1);
600: /* MUTANT (rep_const) */			return ((3)-1);
602: /* MUTANT (rep_const) */			return 0;
602: /* MUTANT (rep_const) */			return 1;
602: /* MUTANT (rep_const) */			return -1;
602: /* MUTANT (rep_const) */			return ((6)+1);
602: /* MUTANT (rep_const) */			return ((6)-1);
604: /* MUTANT (rep_const) */			return 0;
604: /* MUTANT (rep_const) */			return 1;
604: /* MUTANT (rep_const) */			return -1;
604: /* MUTANT (rep_const) */			return ((6)+1);
604: /* MUTANT (rep_const) */			return ((6)-1);
606: /* MUTANT (rep_const) */			return 0;
606: /* MUTANT (rep_const) */			return 1;
606: /* MUTANT (rep_const) */			return -1;
606: /* MUTANT (rep_const) */			return ((5)+1);
606: /* MUTANT (rep_const) */			return ((5)-1);
608: /* MUTANT (rep_const) */			return 0;
608: /* MUTANT (rep_const) */			return 1;
608: /* MUTANT (rep_const) */			return -1;
608: /* MUTANT (rep_const) */			return ((4)+1);
608: /* MUTANT (rep_const) */			return ((4)-1);
610: /* MUTANT (rep_const) */			return 0;
610: /* MUTANT (rep_const) */			return 1;
610: /* MUTANT (rep_const) */			return -1;
610: /* MUTANT (rep_const) */			return ((4)+1);
610: /* MUTANT (rep_const) */			return ((4)-1);
612: /* MUTANT (rep_const) */			return 0;
612: /* MUTANT (rep_const) */			return 1;
612: /* MUTANT (rep_const) */			return -1;
612: /* MUTANT (rep_const) */			return ((5)+1);
612: /* MUTANT (rep_const) */			return ((5)-1);
614: /* MUTANT (rep_const) */			return 0;
614: /* MUTANT (rep_const) */			return 1;
614: /* MUTANT (rep_const) */			return -1;
614: /* MUTANT (rep_const) */			return ((4)+1);
614: /* MUTANT (rep_const) */			return ((4)-1);
616: /* MUTANT (rep_const) */			return 0;
616: /* MUTANT (rep_const) */			return 1;
616: /* MUTANT (rep_const) */			return -1;
616: /* MUTANT (rep_const) */			return ((4)+1);
616: /* MUTANT (rep_const) */			return ((4)-1);
618: /* MUTANT (rep_const) */			return 0;
618: /* MUTANT (rep_const) */			return 1;
618: /* MUTANT (rep_const) */			return -1;
618: /* MUTANT (rep_const) */			return ((3)+1);
618: /* MUTANT (rep_const) */			return ((3)-1);
620: /* MUTANT (rep_const) */			return 0;
620: /* MUTANT (rep_const) */			return 1;
620: /* MUTANT (rep_const) */			return -1;
620: /* MUTANT (rep_const) */			return ((4)+1);
620: /* MUTANT (rep_const) */			return ((4)-1);
622: /* MUTANT (rep_const) */			return 0;
622: /* MUTANT (rep_const) */			return 1;
622: /* MUTANT (rep_const) */			return -1;
622: /* MUTANT (rep_const) */			return ((3)+1);
622: /* MUTANT (rep_const) */			return ((3)-1);
624: /* MUTANT (rep_const) */			return 0;
624: /* MUTANT (rep_const) */			return 1;
624: /* MUTANT (rep_const) */			return -1;
624: /* MUTANT (rep_const) */			return ((5)+1);
624: /* MUTANT (rep_const) */			return ((5)-1);
626: /* MUTANT (rep_const) */			return 0;
626: /* MUTANT (rep_const) */			return 1;
626: /* MUTANT (rep_const) */			return -1;
626: /* MUTANT (rep_const) */			return ((3)+1);
626: /* MUTANT (rep_const) */			return ((3)-1);
628: /* MUTANT (rep_const) */			return 0;
628: /* MUTANT (rep_const) */			return 1;
628: /* MUTANT (rep_const) */			return -1;
628: /* MUTANT (rep_const) */			return ((5)+1);
628: /* MUTANT (rep_const) */			return ((5)-1);
630: /* MUTANT (rep_const) */			return 0;
630: /* MUTANT (rep_const) */			return 1;
630: /* MUTANT (rep_const) */			return -1;
630: /* MUTANT (rep_const) */			return ((3)+1);
630: /* MUTANT (rep_const) */			return ((3)-1);
632: /* MUTANT (rep_const) */			return 0;
632: /* MUTANT (rep_const) */			return 1;
632: /* MUTANT (rep_const) */			return -1;
632: /* MUTANT (rep_const) */			return ((4)+1);
632: /* MUTANT (rep_const) */			return ((4)-1);
634: /* MUTANT (rep_const) */			return 0;
634: /* MUTANT (rep_const) */			return 1;
634: /* MUTANT (rep_const) */			return -1;
634: /* MUTANT (rep_const) */			return ((2)+1);
634: /* MUTANT (rep_const) */			return ((2)-1);
636: /* MUTANT (rep_const) */			return 0;
636: /* MUTANT (rep_const) */			return 1;
636: /* MUTANT (rep_const) */			return -1;
636: /* MUTANT (rep_const) */			return ((5)+1);
636: /* MUTANT (rep_const) */			return ((5)-1);
638: /* MUTANT (rep_const) */			return 0;
638: /* MUTANT (rep_const) */			return 1;
638: /* MUTANT (rep_const) */			return -1;
638: /* MUTANT (rep_const) */			return ((4)+1);
638: /* MUTANT (rep_const) */			return ((4)-1);
640: /* MUTANT (rep_const) */			return 0;
640: /* MUTANT (rep_const) */			return 1;
640: /* MUTANT (rep_const) */			return -1;
640: /* MUTANT (rep_const) */			return ((4)+1);
640: /* MUTANT (rep_const) */			return ((4)-1);
642: /* MUTANT (rep_const) */			return 0;
642: /* MUTANT (rep_const) */			return 1;
642: /* MUTANT (rep_const) */			return -1;
642: /* MUTANT (rep_const) */			return ((4)+1);
642: /* MUTANT (rep_const) */			return ((4)-1);
645: /* MUTANT (rep_const) */	return 0;
645: /* MUTANT (rep_const) */	return 1;
645: /* MUTANT (rep_const) */	return ((-1)+1);
645: /* MUTANT (rep_const) */	return ((-1)-1);
650: /* MUTANT (del_stmt) */ /* 	int i; */ 
651: /* MUTANT (del_stmt) */ /* 	int j; */ 
652: /* MUTANT (del_stmt) */ /* 	int k; */ 
653: /* MUTANT (del_stmt) */ /* 	int index; */ 
654: /* MUTANT (del_stmt) */ /* 	int currentPlayer = whoseTurn(state); */ 
655: /* MUTANT (del_stmt) */ /* 	int nextPlayer = currentPlayer + 1; */ 
655: /* MUTANT (rep_op) */	int nextPlayer = currentPlayer - 1;
655: /* MUTANT (rep_op) */	int nextPlayer = currentPlayer * 1;
655: /* MUTANT (rep_op) */	int nextPlayer = currentPlayer % 1;
655: /* MUTANT (rep_const) */	int nextPlayer = currentPlayer + 0;
655: /* MUTANT (rep_const) */	int nextPlayer = currentPlayer + -1;
655: /* MUTANT (rep_const) */	int nextPlayer = currentPlayer + ((1)+1);
657: /* MUTANT (del_stmt) */ /* 	int tributeRevealedCards[2] = {-1, -1}; */ 
657: /* MUTANT (rep_const) */	int tributeRevealedCards[0] = {-1, -1};
657: /* MUTANT (rep_const) */	int tributeRevealedCards[1] = {-1, -1};
657: /* MUTANT (rep_const) */	int tributeRevealedCards[-1] = {-1, -1};
657: /* MUTANT (rep_const) */	int tributeRevealedCards[((2)+1)] = {-1, -1};
657: /* MUTANT (rep_const) */	int tributeRevealedCards[((2)-1)] = {-1, -1};
657: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = {0, -1};
657: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = {1, -1};
657: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = {((-1)+1), -1};
657: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = {((-1)-1), -1};
657: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = {-1, 0};
657: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = {-1, 1};
657: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = {-1, ((-1)+1)};
657: /* MUTANT (rep_const) */	int tributeRevealedCards[2] = {-1, ((-1)-1)};
658: /* MUTANT (del_stmt) */ /* 	int drawntreasure=0; */ 
658: /* MUTANT (rep_const) */	int drawntreasure=1;
658: /* MUTANT (rep_const) */	int drawntreasure=-1;
659: /* MUTANT (rep_op) */	if (nextPlayer <= (state->numPlayers - 1)){
659: /* MUTANT (rep_op) */	if (nextPlayer < (state->numPlayers - 1)){
659: /* MUTANT (rep_op) */	if (nextPlayer >= (state->numPlayers - 1)){
659: /* MUTANT (rep_op) */	if (nextPlayer == (state->numPlayers - 1)){
659: /* MUTANT (rep_op) */	if (nextPlayer != (state->numPlayers - 1)){
659: /* MUTANT (rep_const) */	if (nextPlayer > (state->numPlayers - 0)){
659: /* MUTANT (rep_const) */	if (nextPlayer > (state->numPlayers - -1)){
659: /* MUTANT (rep_const) */	if (nextPlayer > (state->numPlayers - ((1)+1))){
659: /* MUTANT (negate) */	if(! (nextPlayer > (state->numPlayers - 1))){
660: /* MUTANT (del_stmt) */ /* 		nextPlayer = 0; */ 
660: /* MUTANT (rep_const) */		nextPlayer = 1;
660: /* MUTANT (rep_const) */		nextPlayer = -1;
674: /* MUTANT (rep_const) */			return 0;			
674: /* MUTANT (rep_const) */			return 1;			
674: /* MUTANT (rep_const) */			return ((-1)+1);			
674: /* MUTANT (rep_const) */			return ((-1)-1);			
681: /* MUTANT (rep_op) */			for (i = 0; i <= 3; i++)
681: /* MUTANT (rep_op) */			for (i = 0; i > 3; i++)
681: /* MUTANT (rep_op) */			for (i = 0; i >= 3; i++)
681: /* MUTANT (rep_op) */			for (i = 0; i == 3; i++)
681: /* MUTANT (rep_op) */			for (i = 0; i != 3; i++)
681: /* MUTANT (rep_op) */			for (i = 0; i < 3; i--)
681: /* MUTANT (rep_const) */			for (i = 1; i < 3; i++)
681: /* MUTANT (rep_const) */			for (i = -1; i < 3; i++)
681: /* MUTANT (rep_const) */			for (i = 0; i < 0; i++)
681: /* MUTANT (rep_const) */			for (i = 0; i < 1; i++)
681: /* MUTANT (rep_const) */			for (i = 0; i < -1; i++)
681: /* MUTANT (rep_const) */			for (i = 0; i < ((3)+1); i++)
681: /* MUTANT (rep_const) */			for (i = 0; i < ((3)-1); i++)
683: /* MUTANT (del_stmt) */ /* 					drawCard(currentPlayer, state); */ 
687: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, 1);
687: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, -1);
688: /* MUTANT (del_stmt) */ /* 			return 0; */ 
688: /* MUTANT (rep_const) */			return 1;
688: /* MUTANT (rep_const) */			return -1;
695: /* MUTANT (del_stmt) */ /* 			state->numActions = state->numActions + 2; */ 
695: /* MUTANT (rep_op) */			state->numActions = state->numActions - 2;
695: /* MUTANT (rep_op) */			state->numActions = state->numActions * 2;
695: /* MUTANT (rep_op) */			state->numActions = state->numActions % 2;
695: /* MUTANT (rep_const) */			state->numActions = state->numActions + 0;
695: /* MUTANT (rep_const) */			state->numActions = state->numActions + 1;
695: /* MUTANT (rep_const) */			state->numActions = state->numActions + -1;
695: /* MUTANT (rep_const) */			state->numActions = state->numActions + ((2)+1);
695: /* MUTANT (rep_const) */			state->numActions = state->numActions + ((2)-1);
698: /* MUTANT (del_stmt) */ /* 			discardCard(handPos, currentPlayer, state, 0); */ 
698: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, 1);
698: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, -1);
699: /* MUTANT (del_stmt) */ /* 			return 0; */ 
699: /* MUTANT (rep_const) */			return 1;
699: /* MUTANT (rep_const) */			return -1;
702: /* MUTANT (rep_op) */			state->numBuys--;//Increase buys by 1!
703: /* MUTANT (rep_op) */			if (choice1 <= 0){//Boolean true or going to discard an estate
703: /* MUTANT (rep_op) */			if (choice1 < 0){//Boolean true or going to discard an estate
703: /* MUTANT (rep_op) */			if (choice1 >= 0){//Boolean true or going to discard an estate
703: /* MUTANT (rep_op) */			if (choice1 == 0){//Boolean true or going to discard an estate
703: /* MUTANT (rep_op) */			if (choice1 != 0){//Boolean true or going to discard an estate
703: /* MUTANT (rep_const) */			if (choice1 > 1){//Boolean true or going to discard an estate
703: /* MUTANT (rep_const) */			if (choice1 > -1){//Boolean true or going to discard an estate
703: /* MUTANT (negate) */			if(! (choice1 > 0)){//Boolean true or going to discard an estate
704: /* MUTANT (del_stmt) */ /* 				int p = 0; */ //Iterator for hand!
704: /* MUTANT (rep_const) */				int p = 1;//Iterator for hand!
704: /* MUTANT (rep_const) */				int p = -1;//Iterator for hand!
705: /* MUTANT (del_stmt) */ /* 				int card_not_discarded = 1; */ //Flag for discard set!
705: /* MUTANT (rep_const) */				int card_not_discarded = 0;//Flag for discard set!
705: /* MUTANT (rep_const) */				int card_not_discarded = -1;//Flag for discard set!
705: /* MUTANT (rep_const) */				int card_not_discarded = ((1)+1);//Flag for discard set!
706: /* MUTANT (negate) */				while(!(card_not_discarded)){
707: /* MUTANT (rep_op) */					if (state->hand[currentPlayer][p] != estate){//Found an estate card!
707: /* MUTANT (negate) */					if(! (state->hand[currentPlayer][p] == estate)){//Found an estate card!
708: /* MUTANT (del_stmt) */ /* 						state->coins += 4; */ //Add 4 coins to the amount of coins
708: /* MUTANT (rep_op) */						state->coins -= 4;//Add 4 coins to the amount of coins
708: /* MUTANT (rep_op) */						state->coins *= 4;//Add 4 coins to the amount of coins
708: /* MUTANT (rep_op) */						state->coins %= 4;//Add 4 coins to the amount of coins
708: /* MUTANT (rep_const) */						state->coins += 0;//Add 4 coins to the amount of coins
708: /* MUTANT (rep_const) */						state->coins += 1;//Add 4 coins to the amount of coins
708: /* MUTANT (rep_const) */						state->coins += -1;//Add 4 coins to the amount of coins
708: /* MUTANT (rep_const) */						state->coins += ((4)+1);//Add 4 coins to the amount of coins
708: /* MUTANT (rep_const) */						state->coins += ((4)-1);//Add 4 coins to the amount of coins
709: /* MUTANT (del_stmt) */ /* 						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p]; */ 
710: /* MUTANT (del_stmt) */ /* 						state->discardCount[currentPlayer]++; */ 
710: /* MUTANT (rep_op) */						state->discardCount[currentPlayer]--;
711: /* MUTANT (rep_op) */						for (;p <= state->handCount[currentPlayer]; p++){
711: /* MUTANT (rep_op) */						for (;p > state->handCount[currentPlayer]; p++){
711: /* MUTANT (rep_op) */						for (;p >= state->handCount[currentPlayer]; p++){
711: /* MUTANT (rep_op) */						for (;p == state->handCount[currentPlayer]; p++){
711: /* MUTANT (rep_op) */						for (;p != state->handCount[currentPlayer]; p++){
711: /* MUTANT (rep_op) */						for (;p < state->handCount[currentPlayer]; p--){
712: /* MUTANT (del_stmt) */ /* 							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1]; */ 
712: /* MUTANT (rep_op) */							state->hand[currentPlayer][p] = state->hand[currentPlayer][p-1];
712: /* MUTANT (rep_op) */							state->hand[currentPlayer][p] = state->hand[currentPlayer][p*1];
712: /* MUTANT (rep_op) */							state->hand[currentPlayer][p] = state->hand[currentPlayer][p%1];
712: /* MUTANT (rep_const) */							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+0];
712: /* MUTANT (rep_const) */							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+-1];
712: /* MUTANT (rep_const) */							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+((1)+1)];
714: /* MUTANT (rep_const) */						state->hand[currentPlayer][state->handCount[currentPlayer]] = 0;
714: /* MUTANT (rep_const) */						state->hand[currentPlayer][state->handCount[currentPlayer]] = 1;
714: /* MUTANT (rep_const) */						state->hand[currentPlayer][state->handCount[currentPlayer]] = ((-1)+1);
714: /* MUTANT (rep_const) */						state->hand[currentPlayer][state->handCount[currentPlayer]] = ((-1)-1);
715: /* MUTANT (del_stmt) */ /* 						state->handCount[currentPlayer]--; */ 
715: /* MUTANT (rep_op) */						state->handCount[currentPlayer]++;
716: /* MUTANT (del_stmt) */ /* 						card_not_discarded = 0; */ //Exit the loop
716: /* MUTANT (rep_const) */						card_not_discarded = 1;//Exit the loop
716: /* MUTANT (rep_const) */						card_not_discarded = -1;//Exit the loop
718: /* MUTANT (rep_op) */					else if (p <= state->handCount[currentPlayer]){
718: /* MUTANT (rep_op) */					else if (p < state->handCount[currentPlayer]){
718: /* MUTANT (rep_op) */					else if (p >= state->handCount[currentPlayer]){
718: /* MUTANT (rep_op) */					else if (p == state->handCount[currentPlayer]){
718: /* MUTANT (rep_op) */					else if (p != state->handCount[currentPlayer]){
718: /* MUTANT (negate) */					else if(! (p > state->handCount[currentPlayer])){
719: /* MUTANT (negate) */						if(!(DEBUG)) {
720: /* MUTANT (del_stmt) */ /* 							printf("No estate cards in your hand, invalid choice\n"); */ 
721: /* MUTANT (del_stmt) */ /* 							printf("Must gain an estate if there are any\n"); */ 
723: /* MUTANT (rep_op) */						if (supplyCount(estate, state) <= 0){
723: /* MUTANT (rep_op) */						if (supplyCount(estate, state) < 0){
723: /* MUTANT (rep_op) */						if (supplyCount(estate, state) >= 0){
723: /* MUTANT (rep_op) */						if (supplyCount(estate, state) == 0){
723: /* MUTANT (rep_op) */						if (supplyCount(estate, state) != 0){
723: /* MUTANT (rep_const) */						if (supplyCount(estate, state) > 1){
723: /* MUTANT (rep_const) */						if (supplyCount(estate, state) > -1){
723: /* MUTANT (negate) */						if(! (supplyCount(estate, state) > 0)){
724: /* MUTANT (del_stmt) */ /* 							gainCard(estate, state, 0, currentPlayer); */ 
724: /* MUTANT (rep_const) */							gainCard(estate, state, 1, currentPlayer);
724: /* MUTANT (rep_const) */							gainCard(estate, state, -1, currentPlayer);
725: /* MUTANT (del_stmt) */ /* 							state->supplyCount[estate]--; */ //Decrement estates
725: /* MUTANT (rep_op) */							state->supplyCount[estate]++;//Decrement estates
726: /* MUTANT (rep_op) */							if (supplyCount(estate, state) != 0){
726: /* MUTANT (rep_const) */							if (supplyCount(estate, state) == 1){
726: /* MUTANT (rep_const) */							if (supplyCount(estate, state) == -1){
726: /* MUTANT (negate) */							if(! (supplyCount(estate, state) == 0)){
727: /* MUTANT (del_stmt) */ /* 								isGameOver(state); */ 
730: /* MUTANT (rep_const) */						card_not_discarded = 1;//Exit the loop
730: /* MUTANT (rep_const) */						card_not_discarded = -1;//Exit the loop
734: /* MUTANT (del_stmt) */ /* 						p++; */ //Next card
734: /* MUTANT (rep_op) */						p--;//Next card
740: /* MUTANT (rep_op) */				if (supplyCount(estate, state) <= 0){
740: /* MUTANT (rep_op) */				if (supplyCount(estate, state) < 0){
740: /* MUTANT (rep_op) */				if (supplyCount(estate, state) >= 0){
740: /* MUTANT (rep_op) */				if (supplyCount(estate, state) == 0){
740: /* MUTANT (rep_op) */				if (supplyCount(estate, state) != 0){
740: /* MUTANT (rep_const) */				if (supplyCount(estate, state) > 1){
740: /* MUTANT (rep_const) */				if (supplyCount(estate, state) > -1){
740: /* MUTANT (negate) */				if(! (supplyCount(estate, state) > 0)){
741: /* MUTANT (del_stmt) */ /* 					gainCard(estate, state, 0, currentPlayer); */ //Gain an estate
741: /* MUTANT (rep_const) */					gainCard(estate, state, 1, currentPlayer);//Gain an estate
741: /* MUTANT (rep_const) */					gainCard(estate, state, -1, currentPlayer);//Gain an estate
742: /* MUTANT (del_stmt) */ /* 					state->supplyCount[estate]--; */ //Decrement Estates
742: /* MUTANT (rep_op) */					state->supplyCount[estate]++;//Decrement Estates
743: /* MUTANT (rep_op) */					if (supplyCount(estate, state) != 0){
743: /* MUTANT (rep_const) */					if (supplyCount(estate, state) == 1){
743: /* MUTANT (rep_const) */					if (supplyCount(estate, state) == -1){
743: /* MUTANT (negate) */					if(! (supplyCount(estate, state) == 0)){
744: /* MUTANT (del_stmt) */ /* 						isGameOver(state); */ 
750: /* MUTANT (rep_const) */			return 1;
750: /* MUTANT (rep_const) */			return -1;
757: /* MUTANT (del_stmt) */ /* 			state->numActions++; */ 
757: /* MUTANT (rep_op) */			state->numActions--;
760: /* MUTANT (del_stmt) */ /* 			discardCard(handPos, currentPlayer, state, 0); */ 
760: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, 1);
760: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, -1);
761: /* MUTANT (del_stmt) */ /* 			return 0; */ 
761: /* MUTANT (rep_const) */			return 1;
761: /* MUTANT (rep_const) */			return -1;
765: /* MUTANT (rep_op) */			state->numActions--;
768: /* MUTANT (del_stmt) */ /* 			discardCard(handPos, currentPlayer, state, 0); */ 
768: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, 1);
768: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, -1);
770: /* MUTANT (negate) */			if(! (choice1))		//+2 coins
772: /* MUTANT (del_stmt) */ /* 					state->coins = state->coins + 2; */ 
772: /* MUTANT (rep_op) */					state->coins = state->coins - 2;
772: /* MUTANT (rep_op) */					state->coins = state->coins * 2;
772: /* MUTANT (rep_op) */					state->coins = state->coins % 2;
772: /* MUTANT (rep_const) */					state->coins = state->coins + 0;
772: /* MUTANT (rep_const) */					state->coins = state->coins + 1;
772: /* MUTANT (rep_const) */					state->coins = state->coins + -1;
772: /* MUTANT (rep_const) */					state->coins = state->coins + ((2)+1);
772: /* MUTANT (rep_const) */					state->coins = state->coins + ((2)-1);
775: /* MUTANT (negate) */			else if(! (choice2))		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
778: /* MUTANT (rep_op) */					while(numHandCards(state) <= 0)
778: /* MUTANT (rep_op) */					while(numHandCards(state) < 0)
778: /* MUTANT (rep_op) */					while(numHandCards(state) >= 0)
778: /* MUTANT (rep_op) */					while(numHandCards(state) == 0)
778: /* MUTANT (rep_op) */					while(numHandCards(state) != 0)
778: /* MUTANT (rep_const) */					while(numHandCards(state) > 1)
778: /* MUTANT (rep_const) */					while(numHandCards(state) > -1)
778: /* MUTANT (negate) */					while(!(numHandCards(state) > 0))
780: /* MUTANT (del_stmt) */ /* 							discardCard(handPos, currentPlayer, state, 0); */ 
780: /* MUTANT (rep_const) */							discardCard(handPos, currentPlayer, state, 1);
780: /* MUTANT (rep_const) */							discardCard(handPos, currentPlayer, state, -1);
784: /* MUTANT (rep_op) */					for (i = 0; i <= 4; i++)
784: /* MUTANT (rep_op) */					for (i = 0; i > 4; i++)
784: /* MUTANT (rep_op) */					for (i = 0; i >= 4; i++)
784: /* MUTANT (rep_op) */					for (i = 0; i == 4; i++)
784: /* MUTANT (rep_op) */					for (i = 0; i != 4; i++)
784: /* MUTANT (rep_op) */					for (i = 0; i < 4; i--)
784: /* MUTANT (rep_const) */					for (i = 1; i < 4; i++)
784: /* MUTANT (rep_const) */					for (i = -1; i < 4; i++)
784: /* MUTANT (rep_const) */					for (i = 0; i < 0; i++)
784: /* MUTANT (rep_const) */					for (i = 0; i < 1; i++)
784: /* MUTANT (rep_const) */					for (i = 0; i < -1; i++)
784: /* MUTANT (rep_const) */					for (i = 0; i < ((4)+1); i++)
784: /* MUTANT (rep_const) */					for (i = 0; i < ((4)-1); i++)
786: /* MUTANT (del_stmt) */ /* 							drawCard(currentPlayer, state); */ 
790: /* MUTANT (rep_op) */					for (i = 0; i <= state->numPlayers; i++)
790: /* MUTANT (rep_op) */					for (i = 0; i > state->numPlayers; i++)
790: /* MUTANT (rep_op) */					for (i = 0; i >= state->numPlayers; i++)
790: /* MUTANT (rep_op) */					for (i = 0; i == state->numPlayers; i++)
790: /* MUTANT (rep_op) */					for (i = 0; i != state->numPlayers; i++)
790: /* MUTANT (rep_op) */					for (i = 0; i < state->numPlayers; i--)
790: /* MUTANT (rep_const) */					for (i = 1; i < state->numPlayers; i++)
790: /* MUTANT (rep_const) */					for (i = -1; i < state->numPlayers; i++)
792: /* MUTANT (rep_op) */							if (i == currentPlayer)
792: /* MUTANT (negate) */							if(! (i != currentPlayer))
794: /* MUTANT (rep_op) */									if ( state->handCount[i] <= 4 )
794: /* MUTANT (rep_op) */									if ( state->handCount[i] < 4 )
794: /* MUTANT (rep_op) */									if ( state->handCount[i] >= 4 )
794: /* MUTANT (rep_op) */									if ( state->handCount[i] == 4 )
794: /* MUTANT (rep_op) */									if ( state->handCount[i] != 4 )
794: /* MUTANT (rep_const) */									if ( state->handCount[i] > 0 )
794: /* MUTANT (rep_const) */									if ( state->handCount[i] > 1 )
794: /* MUTANT (rep_const) */									if ( state->handCount[i] > -1 )
794: /* MUTANT (rep_const) */									if ( state->handCount[i] > ((4)+1) )
794: /* MUTANT (rep_const) */									if ( state->handCount[i] > ((4)-1) )
794: /* MUTANT (negate) */									if(! ( state->handCount[i] > 4 ))
797: /* MUTANT (rep_op) */											while( state->handCount[i] <= 0 )
797: /* MUTANT (rep_op) */											while( state->handCount[i] < 0 )
797: /* MUTANT (rep_op) */											while( state->handCount[i] >= 0 )
797: /* MUTANT (rep_op) */											while( state->handCount[i] == 0 )
797: /* MUTANT (rep_op) */											while( state->handCount[i] != 0 )
797: /* MUTANT (rep_const) */											while( state->handCount[i] > 1 )
797: /* MUTANT (rep_const) */											while( state->handCount[i] > -1 )
797: /* MUTANT (negate) */											while(!( state->handCount[i] > 0 ))
799: /* MUTANT (del_stmt) */ /* 													discardCard(handPos, i, state, 0); */ 
799: /* MUTANT (rep_const) */													discardCard(handPos, i, state, 1);
799: /* MUTANT (rep_const) */													discardCard(handPos, i, state, -1);
803: /* MUTANT (rep_op) */											for (j = 0; j <= 4; j++)
803: /* MUTANT (rep_op) */											for (j = 0; j > 4; j++)
803: /* MUTANT (rep_op) */											for (j = 0; j >= 4; j++)
803: /* MUTANT (rep_op) */											for (j = 0; j == 4; j++)
803: /* MUTANT (rep_op) */											for (j = 0; j != 4; j++)
803: /* MUTANT (rep_op) */											for (j = 0; j < 4; j--)
803: /* MUTANT (rep_const) */											for (j = 1; j < 4; j++)
803: /* MUTANT (rep_const) */											for (j = -1; j < 4; j++)
803: /* MUTANT (rep_const) */											for (j = 0; j < 0; j++)
803: /* MUTANT (rep_const) */											for (j = 0; j < 1; j++)
803: /* MUTANT (rep_const) */											for (j = 0; j < -1; j++)
803: /* MUTANT (rep_const) */											for (j = 0; j < ((4)+1); j++)
803: /* MUTANT (rep_const) */											for (j = 0; j < ((4)-1); j++)
805: /* MUTANT (del_stmt) */ /* 													drawCard(i, state); */ 
812: /* MUTANT (rep_const) */			return 1;
812: /* MUTANT (rep_const) */			return -1;
815: /* MUTANT (rep_op) */			if (choice1 != 1)
815: /* MUTANT (rep_const) */			if (choice1 == 0)
815: /* MUTANT (rep_const) */			if (choice1 == -1)
815: /* MUTANT (rep_const) */			if (choice1 == ((1)+1))
815: /* MUTANT (negate) */			if(! (choice1 == 1))
818: /* MUTANT (del_stmt) */ /* 					drawCard(currentPlayer, state); */ 
819: /* MUTANT (del_stmt) */ /* 					drawCard(currentPlayer, state); */ 
821: /* MUTANT (rep_op) */			else if (choice1 != 2)
821: /* MUTANT (rep_const) */			else if (choice1 == 0)
821: /* MUTANT (rep_const) */			else if (choice1 == 1)
821: /* MUTANT (rep_const) */			else if (choice1 == -1)
821: /* MUTANT (rep_const) */			else if (choice1 == ((2)+1))
821: /* MUTANT (rep_const) */			else if (choice1 == ((2)-1))
821: /* MUTANT (negate) */			else if(! (choice1 == 2))
824: /* MUTANT (del_stmt) */ /* 					state->coins = state->coins + 2; */ 
824: /* MUTANT (rep_op) */					state->coins = state->coins - 2;
824: /* MUTANT (rep_op) */					state->coins = state->coins * 2;
824: /* MUTANT (rep_op) */					state->coins = state->coins % 2;
824: /* MUTANT (rep_const) */					state->coins = state->coins + 0;
824: /* MUTANT (rep_const) */					state->coins = state->coins + 1;
824: /* MUTANT (rep_const) */					state->coins = state->coins + -1;
824: /* MUTANT (rep_const) */					state->coins = state->coins + ((2)+1);
824: /* MUTANT (rep_const) */					state->coins = state->coins + ((2)-1);
829: /* MUTANT (del_stmt) */ /* 					discardCard(choice2, currentPlayer, state, 1); */ 
829: /* MUTANT (rep_const) */					discardCard(choice2, currentPlayer, state, 0);
829: /* MUTANT (rep_const) */					discardCard(choice2, currentPlayer, state, -1);
829: /* MUTANT (rep_const) */					discardCard(choice2, currentPlayer, state, ((1)+1));
830: /* MUTANT (del_stmt) */ /* 					discardCard(choice3, currentPlayer, state, 1); */ 
830: /* MUTANT (rep_const) */					discardCard(choice3, currentPlayer, state, 0);
830: /* MUTANT (rep_const) */					discardCard(choice3, currentPlayer, state, -1);
830: /* MUTANT (rep_const) */					discardCard(choice3, currentPlayer, state, ((1)+1));
834: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, 1);
834: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, -1);
835: /* MUTANT (del_stmt) */ /* 			return 0; */ 
835: /* MUTANT (rep_const) */			return 1;
835: /* MUTANT (rep_const) */			return -1;
838: /* MUTANT (rep_op) */			if ((state->discardCount[nextPlayer] - state->deckCount[nextPlayer]) <= 1){
838: /* MUTANT (rep_op) */			if ((state->discardCount[nextPlayer] * state->deckCount[nextPlayer]) <= 1){
838: /* MUTANT (rep_op) */			if ((state->discardCount[nextPlayer] % state->deckCount[nextPlayer]) <= 1){
838: /* MUTANT (rep_op) */			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) < 1){
838: /* MUTANT (rep_op) */			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) > 1){
838: /* MUTANT (rep_op) */			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) >= 1){
838: /* MUTANT (rep_op) */			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) == 1){
838: /* MUTANT (rep_op) */			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) != 1){
838: /* MUTANT (rep_const) */			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 0){
838: /* MUTANT (rep_const) */			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= -1){
838: /* MUTANT (rep_const) */			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= ((1)+1)){
838: /* MUTANT (negate) */			if(! ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)){
839: /* MUTANT (rep_op) */				if (state->deckCount[nextPlayer] <= 0){
839: /* MUTANT (rep_op) */				if (state->deckCount[nextPlayer] < 0){
839: /* MUTANT (rep_op) */				if (state->deckCount[nextPlayer] >= 0){
839: /* MUTANT (rep_op) */				if (state->deckCount[nextPlayer] == 0){
839: /* MUTANT (rep_op) */				if (state->deckCount[nextPlayer] != 0){
839: /* MUTANT (rep_const) */				if (state->deckCount[nextPlayer] > 1){
839: /* MUTANT (rep_const) */				if (state->deckCount[nextPlayer] > -1){
839: /* MUTANT (negate) */				if(! (state->deckCount[nextPlayer] > 0)){
840: /* MUTANT (del_stmt) */ /* 					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1]; */ 
840: /* MUTANT (rep_const) */					tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
840: /* MUTANT (rep_const) */					tributeRevealedCards[-1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
840: /* MUTANT (rep_const) */					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]0];
840: /* MUTANT (rep_const) */					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]1];
840: /* MUTANT (rep_const) */					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]((-1)+1)];
840: /* MUTANT (rep_const) */					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]((-1)-1)];
841: /* MUTANT (del_stmt) */ /* 					state->deckCount[nextPlayer]--; */ 
841: /* MUTANT (rep_op) */					state->deckCount[nextPlayer]++;
843: /* MUTANT (rep_op) */				else if (state->discardCount[nextPlayer] <= 0){
843: /* MUTANT (rep_op) */				else if (state->discardCount[nextPlayer] < 0){
843: /* MUTANT (rep_op) */				else if (state->discardCount[nextPlayer] >= 0){
843: /* MUTANT (rep_op) */				else if (state->discardCount[nextPlayer] == 0){
843: /* MUTANT (rep_op) */				else if (state->discardCount[nextPlayer] != 0){
843: /* MUTANT (rep_const) */				else if (state->discardCount[nextPlayer] > 1){
843: /* MUTANT (rep_const) */				else if (state->discardCount[nextPlayer] > -1){
843: /* MUTANT (negate) */				else if(! (state->discardCount[nextPlayer] > 0)){
844: /* MUTANT (del_stmt) */ /* 					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1]; */ 
844: /* MUTANT (rep_const) */					tributeRevealedCards[1] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
844: /* MUTANT (rep_const) */					tributeRevealedCards[-1] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
844: /* MUTANT (rep_const) */					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]0];
844: /* MUTANT (rep_const) */					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]1];
844: /* MUTANT (rep_const) */					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]((-1)+1)];
844: /* MUTANT (rep_const) */					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]((-1)-1)];
845: /* MUTANT (del_stmt) */ /* 					state->discardCount[nextPlayer]--; */ 
845: /* MUTANT (rep_op) */					state->discardCount[nextPlayer]++;
849: /* MUTANT (negate) */					if(! (DEBUG)){
850: /* MUTANT (del_stmt) */ /* 						printf("No cards to reveal\n"); */ 
856: /* MUTANT (rep_op) */				if (state->deckCount[nextPlayer] != 0){
856: /* MUTANT (rep_const) */				if (state->deckCount[nextPlayer] == 1){
856: /* MUTANT (rep_const) */				if (state->deckCount[nextPlayer] == -1){
856: /* MUTANT (negate) */				if(! (state->deckCount[nextPlayer] == 0)){
857: /* MUTANT (rep_op) */					for (i = 0; i <= state->discardCount[nextPlayer]; i++){
857: /* MUTANT (rep_op) */					for (i = 0; i > state->discardCount[nextPlayer]; i++){
857: /* MUTANT (rep_op) */					for (i = 0; i >= state->discardCount[nextPlayer]; i++){
857: /* MUTANT (rep_op) */					for (i = 0; i == state->discardCount[nextPlayer]; i++){
857: /* MUTANT (rep_op) */					for (i = 0; i != state->discardCount[nextPlayer]; i++){
857: /* MUTANT (rep_op) */					for (i = 0; i < state->discardCount[nextPlayer]; i--){
857: /* MUTANT (rep_const) */					for (i = 1; i < state->discardCount[nextPlayer]; i++){
857: /* MUTANT (rep_const) */					for (i = -1; i < state->discardCount[nextPlayer]; i++){
858: /* MUTANT (del_stmt) */ /* 						state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; */ //Move to deck
859: /* MUTANT (del_stmt) */ /* 						state->deckCount[nextPlayer]++; */ 
859: /* MUTANT (rep_op) */						state->deckCount[nextPlayer]--;
860: /* MUTANT (del_stmt) */ /* 						state->discard[nextPlayer][i] = -1; */ 
860: /* MUTANT (rep_const) */						state->discard[nextPlayer][i] = 0;
860: /* MUTANT (rep_const) */						state->discard[nextPlayer][i] = 1;
860: /* MUTANT (rep_const) */						state->discard[nextPlayer][i] = ((-1)+1);
860: /* MUTANT (rep_const) */						state->discard[nextPlayer][i] = ((-1)-1);
861: /* MUTANT (del_stmt) */ /* 						state->discardCount[nextPlayer]--; */ 
861: /* MUTANT (rep_op) */						state->discardCount[nextPlayer]++;
866: /* MUTANT (rep_const) */				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
866: /* MUTANT (rep_const) */				tributeRevealedCards[-1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
866: /* MUTANT (rep_const) */				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]0];
866: /* MUTANT (rep_const) */				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]1];
866: /* MUTANT (rep_const) */				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]((-1)+1)];
866: /* MUTANT (rep_const) */				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]((-1)-1)];
867: /* MUTANT (del_stmt) */ /* 				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1; */ 
867: /* MUTANT (rep_op) */				state->deck[nextPlayer][state->deckCount[nextPlayer]++] = -1;
867: /* MUTANT (rep_const) */				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = 0;
867: /* MUTANT (rep_const) */				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = 1;
867: /* MUTANT (rep_const) */				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = ((-1)+1);
867: /* MUTANT (rep_const) */				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = ((-1)-1);
868: /* MUTANT (del_stmt) */ /* 				state->deckCount[nextPlayer]--; */ 
868: /* MUTANT (rep_op) */				state->deckCount[nextPlayer]++;
869: /* MUTANT (del_stmt) */ /* 				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1]; */ 
869: /* MUTANT (rep_const) */				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
869: /* MUTANT (rep_const) */				tributeRevealedCards[-1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
869: /* MUTANT (rep_const) */				tributeRevealedCards[((1)+1)] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
869: /* MUTANT (rep_const) */				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]0];
869: /* MUTANT (rep_const) */				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]1];
869: /* MUTANT (rep_const) */				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]((-1)+1)];
869: /* MUTANT (rep_const) */				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]((-1)-1)];
870: /* MUTANT (del_stmt) */ /* 				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1; */ 
870: /* MUTANT (rep_op) */				state->deck[nextPlayer][state->deckCount[nextPlayer]++] = -1;
870: /* MUTANT (rep_const) */				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = 0;
870: /* MUTANT (rep_const) */				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = 1;
870: /* MUTANT (rep_const) */				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = ((-1)+1);
870: /* MUTANT (rep_const) */				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = ((-1)-1);
871: /* MUTANT (del_stmt) */ /* 				state->deckCount[nextPlayer]--; */ 
871: /* MUTANT (rep_op) */				state->deckCount[nextPlayer]++;
874: /* MUTANT (rep_op) */			if (tributeRevealedCards[0] != tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
874: /* MUTANT (rep_const) */			if (tributeRevealedCards[1] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
874: /* MUTANT (rep_const) */			if (tributeRevealedCards[-1] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
874: /* MUTANT (rep_const) */			if (tributeRevealedCards[0] == tributeRevealedCards[0]){//If we have a duplicate card, just drop one 
874: /* MUTANT (rep_const) */			if (tributeRevealedCards[0] == tributeRevealedCards[-1]){//If we have a duplicate card, just drop one 
874: /* MUTANT (rep_const) */			if (tributeRevealedCards[0] == tributeRevealedCards[((1)+1)]){//If we have a duplicate card, just drop one 
874: /* MUTANT (negate) */			if(! (tributeRevealedCards[0] == tributeRevealedCards[1])){//If we have a duplicate card, just drop one 
875: /* MUTANT (del_stmt) */ /* 				state->playedCards[state->playedCardCount] = tributeRevealedCards[1]; */ 
875: /* MUTANT (rep_const) */				state->playedCards[state->playedCardCount] = tributeRevealedCards[0];
875: /* MUTANT (rep_const) */				state->playedCards[state->playedCardCount] = tributeRevealedCards[-1];
875: /* MUTANT (rep_const) */				state->playedCards[state->playedCardCount] = tributeRevealedCards[((1)+1)];
876: /* MUTANT (del_stmt) */ /* 				state->playedCardCount++; */ 
876: /* MUTANT (rep_op) */				state->playedCardCount--;
877: /* MUTANT (del_stmt) */ /* 				tributeRevealedCards[1] = -1; */ 
877: /* MUTANT (rep_const) */				tributeRevealedCards[0] = -1;
877: /* MUTANT (rep_const) */				tributeRevealedCards[-1] = -1;
877: /* MUTANT (rep_const) */				tributeRevealedCards[((1)+1)] = -1;
877: /* MUTANT (rep_const) */				tributeRevealedCards[1] = 0;
877: /* MUTANT (rep_const) */				tributeRevealedCards[1] = 1;
877: /* MUTANT (rep_const) */				tributeRevealedCards[1] = ((-1)+1);
877: /* MUTANT (rep_const) */				tributeRevealedCards[1] = ((-1)-1);
880: /* MUTANT (rep_op) */			for (i = 0; i < 2; i ++){
880: /* MUTANT (rep_op) */			for (i = 0; i > 2; i ++){
880: /* MUTANT (rep_op) */			for (i = 0; i >= 2; i ++){
880: /* MUTANT (rep_op) */			for (i = 0; i == 2; i ++){
880: /* MUTANT (rep_op) */			for (i = 0; i != 2; i ++){
880: /* MUTANT (rep_op) */			for (i = 0; i <= 2; i --){
880: /* MUTANT (rep_const) */			for (i = 1; i <= 2; i ++){
880: /* MUTANT (rep_const) */			for (i = -1; i <= 2; i ++){
880: /* MUTANT (rep_const) */			for (i = 0; i <= 0; i ++){
880: /* MUTANT (rep_const) */			for (i = 0; i <= 1; i ++){
880: /* MUTANT (rep_const) */			for (i = 0; i <= -1; i ++){
880: /* MUTANT (rep_const) */			for (i = 0; i <= ((2)+1); i ++){
880: /* MUTANT (rep_const) */			for (i = 0; i <= ((2)-1); i ++){
881: /* MUTANT (rep_op) */				if (tributeRevealedCards[i] != copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
881: /* MUTANT (rep_op) */				if (tributeRevealedCards[i] == copper && tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
881: /* MUTANT (rep_op) */				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] != silver || tributeRevealedCards[i] == gold){//Treasure cards
881: /* MUTANT (rep_op) */				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver && tributeRevealedCards[i] == gold){//Treasure cards
881: /* MUTANT (rep_op) */				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] != gold){//Treasure cards
881: /* MUTANT (negate) */				if(! (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)){//Treasure cards
882: /* MUTANT (del_stmt) */ /* 					state->coins += 2; */ 
882: /* MUTANT (rep_op) */					state->coins -= 2;
882: /* MUTANT (rep_op) */					state->coins *= 2;
882: /* MUTANT (rep_op) */					state->coins %= 2;
882: /* MUTANT (rep_const) */					state->coins += 0;
882: /* MUTANT (rep_const) */					state->coins += 1;
882: /* MUTANT (rep_const) */					state->coins += -1;
882: /* MUTANT (rep_const) */					state->coins += ((2)+1);
882: /* MUTANT (rep_const) */					state->coins += ((2)-1);
885: /* MUTANT (rep_op) */				else if (tributeRevealedCards[i] != estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
885: /* MUTANT (rep_op) */				else if (tributeRevealedCards[i] == estate && tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
885: /* MUTANT (rep_op) */				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] != duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
885: /* MUTANT (rep_op) */				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy && tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
885: /* MUTANT (rep_op) */				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] != province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
885: /* MUTANT (rep_op) */				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province && tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
885: /* MUTANT (rep_op) */				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] != gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
885: /* MUTANT (rep_op) */				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens && tributeRevealedCards[i] == great_hall){//Victory Card Found
885: /* MUTANT (rep_op) */				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] != great_hall){//Victory Card Found
885: /* MUTANT (negate) */				else if(! (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)){//Victory Card Found
886: /* MUTANT (del_stmt) */ /* 					drawCard(currentPlayer, state); */ 
887: /* MUTANT (del_stmt) */ /* 					drawCard(currentPlayer, state); */ 
890: /* MUTANT (del_stmt) */ /* 					state->numActions = state->numActions + 2; */ 
890: /* MUTANT (rep_op) */					state->numActions = state->numActions - 2;
890: /* MUTANT (rep_op) */					state->numActions = state->numActions * 2;
890: /* MUTANT (rep_op) */					state->numActions = state->numActions % 2;
890: /* MUTANT (rep_const) */					state->numActions = state->numActions + 0;
890: /* MUTANT (rep_const) */					state->numActions = state->numActions + 1;
890: /* MUTANT (rep_const) */					state->numActions = state->numActions + -1;
890: /* MUTANT (rep_const) */					state->numActions = state->numActions + ((2)+1);
890: /* MUTANT (rep_const) */					state->numActions = state->numActions + ((2)-1);
894: /* MUTANT (rep_const) */			return 1;
894: /* MUTANT (rep_const) */			return -1;
897: /* MUTANT (rep_const) */			j = 1;		//used to check if player has enough cards to discard
897: /* MUTANT (rep_const) */			j = -1;		//used to check if player has enough cards to discard
899: /* MUTANT (rep_op) */			if (choice2 <= 2 || choice2 < 0)
899: /* MUTANT (rep_op) */			if (choice2 < 2 || choice2 < 0)
899: /* MUTANT (rep_op) */			if (choice2 >= 2 || choice2 < 0)
899: /* MUTANT (rep_op) */			if (choice2 == 2 || choice2 < 0)
899: /* MUTANT (rep_op) */			if (choice2 != 2 || choice2 < 0)
899: /* MUTANT (rep_op) */			if (choice2 > 2 && choice2 < 0)
899: /* MUTANT (rep_op) */			if (choice2 > 2 || choice2 <= 0)
899: /* MUTANT (rep_op) */			if (choice2 > 2 || choice2 > 0)
899: /* MUTANT (rep_op) */			if (choice2 > 2 || choice2 >= 0)
899: /* MUTANT (rep_op) */			if (choice2 > 2 || choice2 == 0)
899: /* MUTANT (rep_op) */			if (choice2 > 2 || choice2 != 0)
899: /* MUTANT (rep_const) */			if (choice2 > 0 || choice2 < 0)
899: /* MUTANT (rep_const) */			if (choice2 > 1 || choice2 < 0)
899: /* MUTANT (rep_const) */			if (choice2 > -1 || choice2 < 0)
899: /* MUTANT (rep_const) */			if (choice2 > ((2)+1) || choice2 < 0)
899: /* MUTANT (rep_const) */			if (choice2 > ((2)-1) || choice2 < 0)
899: /* MUTANT (rep_const) */			if (choice2 > 2 || choice2 < 1)
899: /* MUTANT (rep_const) */			if (choice2 > 2 || choice2 < -1)
899: /* MUTANT (negate) */			if(! (choice2 > 2 || choice2 < 0))
901: /* MUTANT (del_stmt) */ /* 					return -1; */ 				
901: /* MUTANT (rep_const) */					return 0;				
901: /* MUTANT (rep_const) */					return 1;				
901: /* MUTANT (rep_const) */					return ((-1)+1);				
901: /* MUTANT (rep_const) */					return ((-1)-1);				
904: /* MUTANT (rep_op) */			if (choice1 != handPos)
904: /* MUTANT (negate) */			if(! (choice1 == handPos))
906: /* MUTANT (del_stmt) */ /* 					return -1; */ 
906: /* MUTANT (rep_const) */					return 0;
906: /* MUTANT (rep_const) */					return 1;
906: /* MUTANT (rep_const) */					return ((-1)+1);
906: /* MUTANT (rep_const) */					return ((-1)-1);
909: /* MUTANT (rep_op) */			for (i = 0; i <= state->handCount[currentPlayer]; i++)
909: /* MUTANT (rep_op) */			for (i = 0; i > state->handCount[currentPlayer]; i++)
909: /* MUTANT (rep_op) */			for (i = 0; i >= state->handCount[currentPlayer]; i++)
909: /* MUTANT (rep_op) */			for (i = 0; i == state->handCount[currentPlayer]; i++)
909: /* MUTANT (rep_op) */			for (i = 0; i != state->handCount[currentPlayer]; i++)
909: /* MUTANT (rep_op) */			for (i = 0; i < state->handCount[currentPlayer]; i--)
909: /* MUTANT (rep_const) */			for (i = 1; i < state->handCount[currentPlayer]; i++)
909: /* MUTANT (rep_const) */			for (i = -1; i < state->handCount[currentPlayer]; i++)
911: /* MUTANT (rep_op) */					if (i == handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
911: /* MUTANT (rep_op) */					if (i != handPos || i == state->hand[currentPlayer][choice1] && i != choice1)
911: /* MUTANT (rep_op) */					if (i != handPos && i != state->hand[currentPlayer][choice1] && i != choice1)
911: /* MUTANT (rep_op) */					if (i != handPos && i == state->hand[currentPlayer][choice1] || i != choice1)
911: /* MUTANT (rep_op) */					if (i != handPos && i == state->hand[currentPlayer][choice1] && i == choice1)
911: /* MUTANT (negate) */					if(! (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1))
913: /* MUTANT (del_stmt) */ /* 							j++; */ 
913: /* MUTANT (rep_op) */							j--;
916: /* MUTANT (rep_op) */			if (j <= choice2)
916: /* MUTANT (rep_op) */			if (j > choice2)
916: /* MUTANT (rep_op) */			if (j >= choice2)
916: /* MUTANT (rep_op) */			if (j == choice2)
916: /* MUTANT (rep_op) */			if (j != choice2)
916: /* MUTANT (negate) */			if(! (j < choice2))
918: /* MUTANT (del_stmt) */ /* 					return -1; */ 				
918: /* MUTANT (rep_const) */					return 0;				
918: /* MUTANT (rep_const) */					return 1;				
918: /* MUTANT (rep_const) */					return ((-1)+1);				
918: /* MUTANT (rep_const) */					return ((-1)-1);				
921: /* MUTANT (negate) */			if(! (DEBUG)) 
925: /* MUTANT (del_stmt) */ /* 			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2; */ 
925: /* MUTANT (rep_op) */			state->supplyCount[state->hand[currentPlayer][choice1]] -= choice2;
925: /* MUTANT (rep_op) */			state->supplyCount[state->hand[currentPlayer][choice1]] *= choice2;
925: /* MUTANT (rep_op) */			state->supplyCount[state->hand[currentPlayer][choice1]] %= choice2;
928: /* MUTANT (rep_op) */			for (i = 0; i <= state->numPlayers; i++)
928: /* MUTANT (rep_op) */			for (i = 0; i > state->numPlayers; i++)
928: /* MUTANT (rep_op) */			for (i = 0; i >= state->numPlayers; i++)
928: /* MUTANT (rep_op) */			for (i = 0; i == state->numPlayers; i++)
928: /* MUTANT (rep_op) */			for (i = 0; i != state->numPlayers; i++)
928: /* MUTANT (rep_op) */			for (i = 0; i < state->numPlayers; i--)
928: /* MUTANT (rep_const) */			for (i = 1; i < state->numPlayers; i++)
928: /* MUTANT (rep_const) */			for (i = -1; i < state->numPlayers; i++)
930: /* MUTANT (rep_op) */					if (i == currentPlayer)
930: /* MUTANT (negate) */					if(! (i != currentPlayer))
932: /* MUTANT (del_stmt) */ /* 							gainCard(state->hand[currentPlayer][choice1], state, 0, i); */ 
932: /* MUTANT (rep_const) */							gainCard(state->hand[currentPlayer][choice1], state, 1, i);
932: /* MUTANT (rep_const) */							gainCard(state->hand[currentPlayer][choice1], state, -1, i);
937: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, 1);			
937: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, -1);			
940: /* MUTANT (rep_op) */			for (j = 0; j <= choice2; j++)
940: /* MUTANT (rep_op) */			for (j = 0; j > choice2; j++)
940: /* MUTANT (rep_op) */			for (j = 0; j >= choice2; j++)
940: /* MUTANT (rep_op) */			for (j = 0; j == choice2; j++)
940: /* MUTANT (rep_op) */			for (j = 0; j != choice2; j++)
940: /* MUTANT (rep_op) */			for (j = 0; j < choice2; j--)
940: /* MUTANT (rep_const) */			for (j = 1; j < choice2; j++)
940: /* MUTANT (rep_const) */			for (j = -1; j < choice2; j++)
942: /* MUTANT (rep_op) */					for (i = 0; i <= state->handCount[currentPlayer]; i++)
942: /* MUTANT (rep_op) */					for (i = 0; i > state->handCount[currentPlayer]; i++)
942: /* MUTANT (rep_op) */					for (i = 0; i >= state->handCount[currentPlayer]; i++)
942: /* MUTANT (rep_op) */					for (i = 0; i == state->handCount[currentPlayer]; i++)
942: /* MUTANT (rep_op) */					for (i = 0; i != state->handCount[currentPlayer]; i++)
942: /* MUTANT (rep_op) */					for (i = 0; i < state->handCount[currentPlayer]; i--)
942: /* MUTANT (rep_const) */					for (i = 1; i < state->handCount[currentPlayer]; i++)
942: /* MUTANT (rep_const) */					for (i = -1; i < state->handCount[currentPlayer]; i++)
944: /* MUTANT (rep_op) */							if (state->hand[currentPlayer][i] != state->hand[currentPlayer][choice1])
944: /* MUTANT (negate) */							if(! (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]))
946: /* MUTANT (del_stmt) */ /* 									discardCard(i, currentPlayer, state, 1); */ 
946: /* MUTANT (rep_const) */									discardCard(i, currentPlayer, state, 0);
946: /* MUTANT (rep_const) */									discardCard(i, currentPlayer, state, -1);
946: /* MUTANT (rep_const) */									discardCard(i, currentPlayer, state, ((1)+1));
947: /* MUTANT (del_stmt) */ /* 									break; */ 
952: /* MUTANT (rep_const) */			return 1;
952: /* MUTANT (rep_const) */			return -1;
956: /* MUTANT (rep_const) */			updateCoins(currentPlayer, state, 0);
956: /* MUTANT (rep_const) */			updateCoins(currentPlayer, state, 1);
956: /* MUTANT (rep_const) */			updateCoins(currentPlayer, state, -1);
956: /* MUTANT (rep_const) */			updateCoins(currentPlayer, state, ((2)+1));
956: /* MUTANT (rep_const) */			updateCoins(currentPlayer, state, ((2)-1));
957: /* MUTANT (rep_op) */			for (i = 0; i <= state->numPlayers; i++)
957: /* MUTANT (rep_op) */			for (i = 0; i > state->numPlayers; i++)
957: /* MUTANT (rep_op) */			for (i = 0; i >= state->numPlayers; i++)
957: /* MUTANT (rep_op) */			for (i = 0; i == state->numPlayers; i++)
957: /* MUTANT (rep_op) */			for (i = 0; i != state->numPlayers; i++)
957: /* MUTANT (rep_op) */			for (i = 0; i < state->numPlayers; i--)
957: /* MUTANT (rep_const) */			for (i = 1; i < state->numPlayers; i++)
957: /* MUTANT (rep_const) */			for (i = -1; i < state->numPlayers; i++)
959: /* MUTANT (rep_op) */					if (i == currentPlayer)
959: /* MUTANT (negate) */					if(! (i != currentPlayer))
961: /* MUTANT (rep_op) */							for (j = 0; j <= state->handCount[i]; j++)
961: /* MUTANT (rep_op) */							for (j = 0; j > state->handCount[i]; j++)
961: /* MUTANT (rep_op) */							for (j = 0; j >= state->handCount[i]; j++)
961: /* MUTANT (rep_op) */							for (j = 0; j == state->handCount[i]; j++)
961: /* MUTANT (rep_op) */							for (j = 0; j != state->handCount[i]; j++)
961: /* MUTANT (rep_op) */							for (j = 0; j < state->handCount[i]; j--)
961: /* MUTANT (rep_const) */							for (j = 1; j < state->handCount[i]; j++)
961: /* MUTANT (rep_const) */							for (j = -1; j < state->handCount[i]; j++)
963: /* MUTANT (rep_op) */									if (state->hand[i][j] != copper)
963: /* MUTANT (negate) */									if(! (state->hand[i][j] == copper))
965: /* MUTANT (del_stmt) */ /* 											discardCard(j, i, state, 0); */ 
965: /* MUTANT (rep_const) */											discardCard(j, i, state, 1);
965: /* MUTANT (rep_const) */											discardCard(j, i, state, -1);
966: /* MUTANT (del_stmt) */ /* 											break; */ 
968: /* MUTANT (rep_op) */									if (j != state->handCount[i])
968: /* MUTANT (negate) */									if(! (j == state->handCount[i]))
970: /* MUTANT (rep_op) */											for (k = 0; k <= state->handCount[i]; k++)
970: /* MUTANT (rep_op) */											for (k = 0; k > state->handCount[i]; k++)
970: /* MUTANT (rep_op) */											for (k = 0; k >= state->handCount[i]; k++)
970: /* MUTANT (rep_op) */											for (k = 0; k == state->handCount[i]; k++)
970: /* MUTANT (rep_op) */											for (k = 0; k != state->handCount[i]; k++)
970: /* MUTANT (rep_op) */											for (k = 0; k < state->handCount[i]; k--)
970: /* MUTANT (rep_const) */											for (k = 1; k < state->handCount[i]; k++)
970: /* MUTANT (rep_const) */											for (k = -1; k < state->handCount[i]; k++)
972: /* MUTANT (negate) */													if(! (DEBUG))
984: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, 1);			
984: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, -1);			
986: /* MUTANT (del_stmt) */ /* 			return 0; */ 
986: /* MUTANT (rep_const) */			return 1;
986: /* MUTANT (rep_const) */			return -1;
991: /* MUTANT (rep_op) */			state->coins = state->coins - 2;
991: /* MUTANT (rep_op) */			state->coins = state->coins * 2;
991: /* MUTANT (rep_op) */			state->coins = state->coins % 2;
991: /* MUTANT (rep_const) */			state->coins = state->coins + 0;
991: /* MUTANT (rep_const) */			state->coins = state->coins + 1;
991: /* MUTANT (rep_const) */			state->coins = state->coins + -1;
991: /* MUTANT (rep_const) */			state->coins = state->coins + ((2)+1);
991: /* MUTANT (rep_const) */			state->coins = state->coins + ((2)-1);
994: /* MUTANT (rep_op) */			if ( state->supplyCount[choice1] != -1 )
994: /* MUTANT (rep_const) */			if ( state->supplyCount[choice1] == 0 )
994: /* MUTANT (rep_const) */			if ( state->supplyCount[choice1] == 1 )
994: /* MUTANT (rep_const) */			if ( state->supplyCount[choice1] == ((-1)+1) )
994: /* MUTANT (rep_const) */			if ( state->supplyCount[choice1] == ((-1)-1) )
994: /* MUTANT (negate) */			if(! ( state->supplyCount[choice1] == -1 ))
996: /* MUTANT (del_stmt) */ /* 					return -1; */ 
996: /* MUTANT (rep_const) */					return 0;
996: /* MUTANT (rep_const) */					return 1;
996: /* MUTANT (rep_const) */					return ((-1)+1);
996: /* MUTANT (rep_const) */					return ((-1)-1);
1000: /* MUTANT (rep_op) */			state->embargoTokens[choice1]--;
1003: /* MUTANT (del_stmt) */ /* 			discardCard(handPos, currentPlayer, state, 1); */ 		
1003: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, 0);		
1003: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, -1);		
1003: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, ((1)+1));		
1004: /* MUTANT (del_stmt) */ /* 			return 0; */ 
1004: /* MUTANT (rep_const) */			return 1;
1004: /* MUTANT (rep_const) */			return -1;
1008: /* MUTANT (rep_op) */			state->outpostPlayed--;
1011: /* MUTANT (del_stmt) */ /* 			discardCard(handPos, currentPlayer, state, 0); */ 
1011: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, 1);
1011: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, -1);
1012: /* MUTANT (del_stmt) */ /* 			return 0; */ 
1012: /* MUTANT (rep_const) */			return 1;
1012: /* MUTANT (rep_const) */			return -1;
1016: /* MUTANT (rep_op) */			state->numBuys--;
1018: /* MUTANT (negate) */			if(! (choice1))
1021: /* MUTANT (del_stmt) */ /* 					state->coins = state->coins + getCost( handCard(choice1, state) ); */ 
1021: /* MUTANT (rep_op) */					state->coins = state->coins - getCost( handCard(choice1, state) );
1021: /* MUTANT (rep_op) */					state->coins = state->coins * getCost( handCard(choice1, state) );
1021: /* MUTANT (rep_op) */					state->coins = state->coins % getCost( handCard(choice1, state) );
1023: /* MUTANT (del_stmt) */ /* 					discardCard(choice1, currentPlayer, state, 1); */ 	
1023: /* MUTANT (rep_const) */					discardCard(choice1, currentPlayer, state, 0);	
1023: /* MUTANT (rep_const) */					discardCard(choice1, currentPlayer, state, -1);	
1023: /* MUTANT (rep_const) */					discardCard(choice1, currentPlayer, state, ((1)+1));	
1027: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, 1);
1027: /* MUTANT (rep_const) */			discardCard(handPos, currentPlayer, state, -1);
1028: /* MUTANT (del_stmt) */ /* 			return 0; */ 
1028: /* MUTANT (rep_const) */			return 1;
1028: /* MUTANT (rep_const) */			return -1;
1031: /* MUTANT (rep_op) */			for (i = 0; i <= state->numPlayers; i++){
1031: /* MUTANT (rep_op) */			for (i = 0; i > state->numPlayers; i++){
1031: /* MUTANT (rep_op) */			for (i = 0; i >= state->numPlayers; i++){
1031: /* MUTANT (rep_op) */			for (i = 0; i == state->numPlayers; i++){
1031: /* MUTANT (rep_op) */			for (i = 0; i != state->numPlayers; i++){
1031: /* MUTANT (rep_op) */			for (i = 0; i < state->numPlayers; i--){
1031: /* MUTANT (rep_const) */			for (i = 1; i < state->numPlayers; i++){
1031: /* MUTANT (rep_const) */			for (i = -1; i < state->numPlayers; i++){
1032: /* MUTANT (rep_op) */				if (i == currentPlayer){
1032: /* MUTANT (negate) */				if(! (i != currentPlayer)){
1033: /* MUTANT (del_stmt) */ /* 					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]-1]; */ 
1033: /* MUTANT (rep_const) */					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]0];
1033: /* MUTANT (rep_const) */					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]1];
1033: /* MUTANT (rep_const) */					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]((-1)+1)];
1033: /* MUTANT (rep_const) */					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]((-1)-1)];
1034: /* MUTANT (del_stmt) */ /* 					state->discardCount[i]++; */ 
1034: /* MUTANT (rep_op) */					state->discardCount[i]--;
1035: /* MUTANT (del_stmt) */ /* 					state->deck[i][state->deckCount[i]-1] = curse; */ //Top card now a curse
1035: /* MUTANT (rep_const) */					state->deck[i][state->deckCount[i]0] = curse;//Top card now a curse
1035: /* MUTANT (rep_const) */					state->deck[i][state->deckCount[i]1] = curse;//Top card now a curse
1035: /* MUTANT (rep_const) */					state->deck[i][state->deckCount[i]((-1)+1)] = curse;//Top card now a curse
1035: /* MUTANT (rep_const) */					state->deck[i][state->deckCount[i]((-1)-1)] = curse;//Top card now a curse
1038: /* MUTANT (rep_const) */			return 1;
1038: /* MUTANT (rep_const) */			return -1;
1042: /* MUTANT (rep_const) */			index = 0;
1042: /* MUTANT (rep_const) */			index = 1;
1042: /* MUTANT (rep_const) */			index = ((-1)+1);
1042: /* MUTANT (rep_const) */			index = ((-1)-1);
1043: /* MUTANT (rep_op) */			for (i = 0; i <= state->handCount[currentPlayer]; i++)
1043: /* MUTANT (rep_op) */			for (i = 0; i > state->handCount[currentPlayer]; i++)
1043: /* MUTANT (rep_op) */			for (i = 0; i >= state->handCount[currentPlayer]; i++)
1043: /* MUTANT (rep_op) */			for (i = 0; i == state->handCount[currentPlayer]; i++)
1043: /* MUTANT (rep_op) */			for (i = 0; i != state->handCount[currentPlayer]; i++)
1043: /* MUTANT (rep_op) */			for (i = 0; i < state->handCount[currentPlayer]; i--)
1043: /* MUTANT (rep_const) */			for (i = 1; i < state->handCount[currentPlayer]; i++)
1043: /* MUTANT (rep_const) */			for (i = -1; i < state->handCount[currentPlayer]; i++)
1045: /* MUTANT (rep_op) */					if (state->hand[currentPlayer][i] != treasure_map && i != handPos)
1045: /* MUTANT (rep_op) */					if (state->hand[currentPlayer][i] == treasure_map || i != handPos)
1045: /* MUTANT (rep_op) */					if (state->hand[currentPlayer][i] == treasure_map && i == handPos)
1045: /* MUTANT (negate) */					if(! (state->hand[currentPlayer][i] == treasure_map && i != handPos))
1047: /* MUTANT (del_stmt) */ /* 							index = i; */ 
1048: /* MUTANT (del_stmt) */ /* 							break; */ 
1051: /* MUTANT (rep_op) */			if (index <= -1)
1051: /* MUTANT (rep_op) */			if (index < -1)
1051: /* MUTANT (rep_op) */			if (index >= -1)
1051: /* MUTANT (rep_op) */			if (index == -1)
1051: /* MUTANT (rep_op) */			if (index != -1)
1051: /* MUTANT (rep_const) */			if (index > 0)
1051: /* MUTANT (rep_const) */			if (index > 1)
1051: /* MUTANT (rep_const) */			if (index > ((-1)+1))
1051: /* MUTANT (rep_const) */			if (index > ((-1)-1))
1051: /* MUTANT (negate) */			if(! (index > -1))
1054: /* MUTANT (del_stmt) */ /* 					discardCard(handPos, currentPlayer, state, 1); */ 
1054: /* MUTANT (rep_const) */					discardCard(handPos, currentPlayer, state, 0);
1054: /* MUTANT (rep_const) */					discardCard(handPos, currentPlayer, state, -1);
1054: /* MUTANT (rep_const) */					discardCard(handPos, currentPlayer, state, ((1)+1));
1055: /* MUTANT (del_stmt) */ /* 					discardCard(index, currentPlayer, state, 1); */ 
1055: /* MUTANT (rep_const) */					discardCard(index, currentPlayer, state, 0);
1055: /* MUTANT (rep_const) */					discardCard(index, currentPlayer, state, -1);
1055: /* MUTANT (rep_const) */					discardCard(index, currentPlayer, state, ((1)+1));
1058: /* MUTANT (rep_op) */					for (i = 0; i <= 4; i++)
1058: /* MUTANT (rep_op) */					for (i = 0; i > 4; i++)
1058: /* MUTANT (rep_op) */					for (i = 0; i >= 4; i++)
1058: /* MUTANT (rep_op) */					for (i = 0; i == 4; i++)
1058: /* MUTANT (rep_op) */					for (i = 0; i != 4; i++)
1058: /* MUTANT (rep_op) */					for (i = 0; i < 4; i--)
1058: /* MUTANT (rep_const) */					for (i = 1; i < 4; i++)
1058: /* MUTANT (rep_const) */					for (i = -1; i < 4; i++)
1058: /* MUTANT (rep_const) */					for (i = 0; i < 0; i++)
1058: /* MUTANT (rep_const) */					for (i = 0; i < 1; i++)
1058: /* MUTANT (rep_const) */					for (i = 0; i < -1; i++)
1058: /* MUTANT (rep_const) */					for (i = 0; i < ((4)+1); i++)
1058: /* MUTANT (rep_const) */					for (i = 0; i < ((4)-1); i++)
1060: /* MUTANT (del_stmt) */ /* 							gainCard(gold, state, 1, currentPlayer); */ 
1060: /* MUTANT (rep_const) */							gainCard(gold, state, 0, currentPlayer);
1060: /* MUTANT (rep_const) */							gainCard(gold, state, -1, currentPlayer);
1060: /* MUTANT (rep_const) */							gainCard(gold, state, ((1)+1), currentPlayer);
1064: /* MUTANT (rep_const) */					return 0;
1064: /* MUTANT (rep_const) */					return -1;
1064: /* MUTANT (rep_const) */					return ((1)+1);
1068: /* MUTANT (rep_const) */			return 0;
1068: /* MUTANT (rep_const) */			return 1;
1068: /* MUTANT (rep_const) */			return ((-1)+1);
1068: /* MUTANT (rep_const) */			return ((-1)-1);
1071: /* MUTANT (rep_const) */	return 0;
1071: /* MUTANT (rep_const) */	return 1;
1071: /* MUTANT (rep_const) */	return ((-1)+1);
1071: /* MUTANT (rep_const) */	return ((-1)-1);
1078: /* MUTANT (rep_op) */	if (trashFlag <= 1)
1078: /* MUTANT (rep_op) */	if (trashFlag > 1)
1078: /* MUTANT (rep_op) */	if (trashFlag >= 1)
1078: /* MUTANT (rep_op) */	if (trashFlag == 1)
1078: /* MUTANT (rep_op) */	if (trashFlag != 1)
1078: /* MUTANT (rep_const) */	if (trashFlag < 0)
1078: /* MUTANT (rep_const) */	if (trashFlag < -1)
1078: /* MUTANT (rep_const) */	if (trashFlag < ((1)+1))
1078: /* MUTANT (negate) */	if(! (trashFlag < 1))
1081: /* MUTANT (del_stmt) */ /* 			state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; */  
1082: /* MUTANT (del_stmt) */ /* 			state->playedCardCount++; */ 
1082: /* MUTANT (rep_op) */			state->playedCardCount--;
1086: /* MUTANT (rep_const) */	state->hand[currentPlayer][handPos] = 0;
1086: /* MUTANT (rep_const) */	state->hand[currentPlayer][handPos] = 1;
1086: /* MUTANT (rep_const) */	state->hand[currentPlayer][handPos] = ((-1)+1);
1086: /* MUTANT (rep_const) */	state->hand[currentPlayer][handPos] = ((-1)-1);
1089: /* MUTANT (rep_op) */	if ( handPos != (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
1089: /* MUTANT (rep_const) */	if ( handPos == (state->handCount[currentPlayer] - 0) ) 	//last card in hand array is played
1089: /* MUTANT (rep_const) */	if ( handPos == (state->handCount[currentPlayer] - -1) ) 	//last card in hand array is played
1089: /* MUTANT (rep_const) */	if ( handPos == (state->handCount[currentPlayer] - ((1)+1)) ) 	//last card in hand array is played
1089: /* MUTANT (negate) */	if(! ( handPos == (state->handCount[currentPlayer] - 1) )) 	//last card in hand array is played
1092: /* MUTANT (del_stmt) */ /* 			state->handCount[currentPlayer]--; */ 
1092: /* MUTANT (rep_op) */			state->handCount[currentPlayer]++;
1094: /* MUTANT (rep_op) */	else if ( state->handCount[currentPlayer] != 1 ) //only one card in hand
1094: /* MUTANT (rep_const) */	else if ( state->handCount[currentPlayer] == 0 ) //only one card in hand
1094: /* MUTANT (rep_const) */	else if ( state->handCount[currentPlayer] == -1 ) //only one card in hand
1094: /* MUTANT (rep_const) */	else if ( state->handCount[currentPlayer] == ((1)+1) ) //only one card in hand
1094: /* MUTANT (negate) */	else if(! ( state->handCount[currentPlayer] == 1 )) //only one card in hand
1097: /* MUTANT (del_stmt) */ /* 			state->handCount[currentPlayer]--; */ 
1097: /* MUTANT (rep_op) */			state->handCount[currentPlayer]++;
1102: /* MUTANT (del_stmt) */ /* 			state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)]; */ 
1102: /* MUTANT (rep_const) */			state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 0)];
1102: /* MUTANT (rep_const) */			state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - -1)];
1102: /* MUTANT (rep_const) */			state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - ((1)+1))];
1104: /* MUTANT (del_stmt) */ /* 			state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1; */ 
1104: /* MUTANT (rep_const) */			state->hand[currentPlayer][state->handCount[currentPlayer] - 0] = -1;
1104: /* MUTANT (rep_const) */			state->hand[currentPlayer][state->handCount[currentPlayer] - -1] = -1;
1104: /* MUTANT (rep_const) */			state->hand[currentPlayer][state->handCount[currentPlayer] - ((1)+1)] = -1;
1104: /* MUTANT (rep_const) */			state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = 0;
1104: /* MUTANT (rep_const) */			state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = 1;
1104: /* MUTANT (rep_const) */			state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = ((-1)+1);
1104: /* MUTANT (rep_const) */			state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = ((-1)-1);
1106: /* MUTANT (del_stmt) */ /* 			state->handCount[currentPlayer]--; */ 
1106: /* MUTANT (rep_op) */			state->handCount[currentPlayer]++;
1109: /* MUTANT (rep_const) */	return 1;
1109: /* MUTANT (rep_const) */	return -1;
1117: /* MUTANT (rep_op) */	if ( supplyCount(supplyPos, state) <= 1 )
1117: /* MUTANT (rep_op) */	if ( supplyCount(supplyPos, state) > 1 )
1117: /* MUTANT (rep_op) */	if ( supplyCount(supplyPos, state) >= 1 )
1117: /* MUTANT (rep_op) */	if ( supplyCount(supplyPos, state) == 1 )
1117: /* MUTANT (rep_op) */	if ( supplyCount(supplyPos, state) != 1 )
1117: /* MUTANT (rep_const) */	if ( supplyCount(supplyPos, state) < 0 )
1117: /* MUTANT (rep_const) */	if ( supplyCount(supplyPos, state) < -1 )
1117: /* MUTANT (rep_const) */	if ( supplyCount(supplyPos, state) < ((1)+1) )
1117: /* MUTANT (negate) */	if(! ( supplyCount(supplyPos, state) < 1 ))
1119: /* MUTANT (del_stmt) */ /* 			return -1; */ 
1119: /* MUTANT (rep_const) */			return 0;
1119: /* MUTANT (rep_const) */			return 1;
1119: /* MUTANT (rep_const) */			return ((-1)+1);
1119: /* MUTANT (rep_const) */			return ((-1)-1);
1127: /* MUTANT (rep_op) */	if (toFlag != 1)
1127: /* MUTANT (rep_const) */	if (toFlag == 0)
1127: /* MUTANT (rep_const) */	if (toFlag == -1)
1127: /* MUTANT (rep_const) */	if (toFlag == ((1)+1))
1127: /* MUTANT (negate) */	if(! (toFlag == 1))
1129: /* MUTANT (del_stmt) */ /* 			state->deck[ player ][ state->deckCount[player] ] = supplyPos; */ 
1130: /* MUTANT (del_stmt) */ /* 			state->deckCount[player]++; */ 
1130: /* MUTANT (rep_op) */			state->deckCount[player]--;
1132: /* MUTANT (rep_op) */	else if (toFlag != 2)
1132: /* MUTANT (rep_const) */	else if (toFlag == 0)
1132: /* MUTANT (rep_const) */	else if (toFlag == 1)
1132: /* MUTANT (rep_const) */	else if (toFlag == -1)
1132: /* MUTANT (rep_const) */	else if (toFlag == ((2)+1))
1132: /* MUTANT (rep_const) */	else if (toFlag == ((2)-1))
1132: /* MUTANT (negate) */	else if(! (toFlag == 2))
1134: /* MUTANT (del_stmt) */ /* 			state->hand[ player ][ state->handCount[player] ] = supplyPos; */ 
1135: /* MUTANT (del_stmt) */ /* 			state->handCount[player]++; */ 
1135: /* MUTANT (rep_op) */			state->handCount[player]--;
1139: /* MUTANT (del_stmt) */ /* 			state->discard[player][ state->discardCount[player] ] = supplyPos; */ 
1140: /* MUTANT (del_stmt) */ /* 			state->discardCount[player]++; */ 
1140: /* MUTANT (rep_op) */			state->discardCount[player]--;
1144: /* MUTANT (rep_op) */	state->supplyCount[supplyPos]++;
1146: /* MUTANT (del_stmt) */ /* 	return 0; */ 
1146: /* MUTANT (rep_const) */	return 1;
1146: /* MUTANT (rep_const) */	return -1;
1151: /* MUTANT (del_stmt) */ /* 	int i; */ 
1154: /* MUTANT (del_stmt) */ /* 	state->coins = 0; */ 
1154: /* MUTANT (rep_const) */	state->coins = 1;
1154: /* MUTANT (rep_const) */	state->coins = -1;
1157: /* MUTANT (rep_op) */	for (i = 0; i <= state->handCount[player]; i++)
1157: /* MUTANT (rep_op) */	for (i = 0; i > state->handCount[player]; i++)
1157: /* MUTANT (rep_op) */	for (i = 0; i >= state->handCount[player]; i++)
1157: /* MUTANT (rep_op) */	for (i = 0; i == state->handCount[player]; i++)
1157: /* MUTANT (rep_op) */	for (i = 0; i != state->handCount[player]; i++)
1157: /* MUTANT (rep_op) */	for (i = 0; i < state->handCount[player]; i--)
1157: /* MUTANT (rep_const) */	for (i = 1; i < state->handCount[player]; i++)
1157: /* MUTANT (rep_const) */	for (i = -1; i < state->handCount[player]; i++)
1159: /* MUTANT (rep_op) */			if (state->hand[player][i] != copper)
1159: /* MUTANT (negate) */			if(! (state->hand[player][i] == copper))
1161: /* MUTANT (del_stmt) */ /* 					state->coins += 1; */ 
1161: /* MUTANT (rep_op) */					state->coins -= 1;
1161: /* MUTANT (rep_op) */					state->coins *= 1;
1161: /* MUTANT (rep_op) */					state->coins %= 1;
1161: /* MUTANT (rep_const) */					state->coins += 0;
1161: /* MUTANT (rep_const) */					state->coins += -1;
1161: /* MUTANT (rep_const) */					state->coins += ((1)+1);
1163: /* MUTANT (rep_op) */			else if (state->hand[player][i] != silver)
1163: /* MUTANT (negate) */			else if(! (state->hand[player][i] == silver))
1165: /* MUTANT (del_stmt) */ /* 					state->coins += 2; */ 
1165: /* MUTANT (rep_op) */					state->coins -= 2;
1165: /* MUTANT (rep_op) */					state->coins *= 2;
1165: /* MUTANT (rep_op) */					state->coins %= 2;
1165: /* MUTANT (rep_const) */					state->coins += 0;
1165: /* MUTANT (rep_const) */					state->coins += 1;
1165: /* MUTANT (rep_const) */					state->coins += -1;
1165: /* MUTANT (rep_const) */					state->coins += ((2)+1);
1165: /* MUTANT (rep_const) */					state->coins += ((2)-1);
1167: /* MUTANT (rep_op) */			else if (state->hand[player][i] != gold)
1167: /* MUTANT (negate) */			else if(! (state->hand[player][i] == gold))
1169: /* MUTANT (del_stmt) */ /* 					state->coins += 3; */ 
1169: /* MUTANT (rep_op) */					state->coins -= 3;
1169: /* MUTANT (rep_op) */					state->coins *= 3;
1169: /* MUTANT (rep_op) */					state->coins %= 3;
1169: /* MUTANT (rep_const) */					state->coins += 0;
1169: /* MUTANT (rep_const) */					state->coins += 1;
1169: /* MUTANT (rep_const) */					state->coins += -1;
1169: /* MUTANT (rep_const) */					state->coins += ((3)+1);
1169: /* MUTANT (rep_const) */					state->coins += ((3)-1);
1174: /* MUTANT (rep_op) */	state->coins -= bonus;
1174: /* MUTANT (rep_op) */	state->coins *= bonus;
1174: /* MUTANT (rep_op) */	state->coins %= bonus;
1176: /* MUTANT (del_stmt) */ /* 	return 0; */ 
1176: /* MUTANT (rep_const) */	return 1;
1176: /* MUTANT (rep_const) */	return -1;
1186: /* MUTANT (del_stmt) */ /* 	int z = 0; */ 
1186: /* MUTANT (rep_const) */	int z = 1;
1186: /* MUTANT (rep_const) */	int z = -1;
1187: /* MUTANT (del_stmt) */ /* 	int temphand[MAX_HAND]; */ 
1188: /* MUTANT (del_stmt) */ /* 	int cardDrawn; */ 
1189: /* MUTANT (del_stmt) */ /* 	int i; */ 
1191: /* MUTANT (rep_op) */	while(drawntreasure<=2){
1191: /* MUTANT (rep_op) */	while(drawntreasure>2){
1191: /* MUTANT (rep_op) */	while(drawntreasure>=2){
1191: /* MUTANT (rep_op) */	while(drawntreasure==2){
1191: /* MUTANT (rep_op) */	while(drawntreasure!=2){
1191: /* MUTANT (rep_const) */	while(drawntreasure<0){
1191: /* MUTANT (rep_const) */	while(drawntreasure<1){
1191: /* MUTANT (rep_const) */	while(drawntreasure<-1){
1191: /* MUTANT (rep_const) */	while(drawntreasure<((2)+1)){
1191: /* MUTANT (rep_const) */	while(drawntreasure<((2)-1)){
1191: /* MUTANT (negate) */	while(!(drawntreasure<2)){
1192: /* MUTANT (rep_op) */		if (state->deckCount[currentPlayer] <=1){//if the deck is empty we need to shuffle discard and add to deck
1192: /* MUTANT (rep_op) */		if (state->deckCount[currentPlayer] >1){//if the deck is empty we need to shuffle discard and add to deck
1192: /* MUTANT (rep_op) */		if (state->deckCount[currentPlayer] >=1){//if the deck is empty we need to shuffle discard and add to deck
1192: /* MUTANT (rep_op) */		if (state->deckCount[currentPlayer] ==1){//if the deck is empty we need to shuffle discard and add to deck
1192: /* MUTANT (rep_op) */		if (state->deckCount[currentPlayer] !=1){//if the deck is empty we need to shuffle discard and add to deck
1192: /* MUTANT (rep_const) */		if (state->deckCount[currentPlayer] <0){//if the deck is empty we need to shuffle discard and add to deck
1192: /* MUTANT (rep_const) */		if (state->deckCount[currentPlayer] <-1){//if the deck is empty we need to shuffle discard and add to deck
1192: /* MUTANT (rep_const) */		if (state->deckCount[currentPlayer] <((1)+1)){//if the deck is empty we need to shuffle discard and add to deck
1192: /* MUTANT (negate) */		if(! (state->deckCount[currentPlayer] <1)){//if the deck is empty we need to shuffle discard and add to deck
1193: /* MUTANT (rep_op) */			for (i = 0; i <= state->discardCount[currentPlayer]; i++){
1193: /* MUTANT (rep_op) */			for (i = 0; i > state->discardCount[currentPlayer]; i++){
1193: /* MUTANT (rep_op) */			for (i = 0; i >= state->discardCount[currentPlayer]; i++){
1193: /* MUTANT (rep_op) */			for (i = 0; i == state->discardCount[currentPlayer]; i++){
1193: /* MUTANT (rep_op) */			for (i = 0; i != state->discardCount[currentPlayer]; i++){
1193: /* MUTANT (rep_op) */			for (i = 0; i < state->discardCount[currentPlayer]; i--){
1193: /* MUTANT (rep_const) */			for (i = 1; i < state->discardCount[currentPlayer]; i++){
1193: /* MUTANT (rep_const) */			for (i = -1; i < state->discardCount[currentPlayer]; i++){
1196: /* MUTANT (del_stmt) */ /* 				state->discard[currentPlayer][i] = 0; */ 
1196: /* MUTANT (rep_const) */				state->discard[currentPlayer][i] = 1;
1196: /* MUTANT (rep_const) */				state->discard[currentPlayer][i] = -1;
1200: /* MUTANT (del_stmt) */ /* 			state->discardCount[currentPlayer] = 0; */ 
1200: /* MUTANT (rep_const) */			state->discardCount[currentPlayer] = 1;
1200: /* MUTANT (rep_const) */			state->discardCount[currentPlayer] = -1;
1202: /* MUTANT (del_stmt) */ /* 			shuffle(currentPlayer, state); */ 
1205: /* MUTANT (del_stmt) */ /* 		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1]; */ //top card of hand is most recently drawn card.
1205: /* MUTANT (rep_const) */		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]0];//top card of hand is most recently drawn card.
1205: /* MUTANT (rep_const) */		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]1];//top card of hand is most recently drawn card.
1205: /* MUTANT (rep_const) */		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]((-1)+1)];//top card of hand is most recently drawn card.
1205: /* MUTANT (rep_const) */		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]((-1)-1)];//top card of hand is most recently drawn card.
1206: /* MUTANT (rep_op) */		if (cardDrawn != copper || cardDrawn == silver || cardDrawn == gold)
1206: /* MUTANT (rep_op) */		if (cardDrawn == copper && cardDrawn == silver || cardDrawn == gold)
1206: /* MUTANT (rep_op) */		if (cardDrawn == copper || cardDrawn != silver || cardDrawn == gold)
1206: /* MUTANT (rep_op) */		if (cardDrawn == copper || cardDrawn == silver && cardDrawn == gold)
1206: /* MUTANT (rep_op) */		if (cardDrawn == copper || cardDrawn == silver || cardDrawn != gold)
1206: /* MUTANT (negate) */		if(! (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold))
1207: /* MUTANT (rep_op) */			drawntreasure--;
1209: /* MUTANT (del_stmt) */ /* 			temphand[z]=cardDrawn; */ 
1210: /* MUTANT (del_stmt) */ /* 			state->handCount[currentPlayer]--; */  //this should just remove the top card (the most recently drawn one).
1210: /* MUTANT (rep_op) */			state->handCount[currentPlayer]++; //this should just remove the top card (the most recently drawn one).
1211: /* MUTANT (del_stmt) */ /* 			z++; */ 
1211: /* MUTANT (rep_op) */			z--;
1214: /* MUTANT (rep_op) */	while(z-1<=0){
1214: /* MUTANT (rep_op) */	while(z-1<0){
1214: /* MUTANT (rep_op) */	while(z-1>0){
1214: /* MUTANT (rep_op) */	while(z-1==0){
1214: /* MUTANT (rep_op) */	while(z-1!=0){
1214: /* MUTANT (rep_const) */	while(z-0>=0){
1214: /* MUTANT (rep_const) */	while(z--1>=0){
1214: /* MUTANT (rep_const) */	while(z-((1)+1)>=0){
1214: /* MUTANT (rep_const) */	while(z-1>=1){
1214: /* MUTANT (rep_const) */	while(z-1>=-1){
1214: /* MUTANT (negate) */	while(!(z-1>=0)){
1215: /* MUTANT (del_stmt) */ /* 		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; */  // discard all cards in play that have been drawn
1215: /* MUTANT (rep_op) */		state->discard[currentPlayer][state->discardCount[currentPlayer]--]=temphand[z-1]; // discard all cards in play that have been drawn
1215: /* MUTANT (rep_const) */		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-0]; // discard all cards in play that have been drawn
1215: /* MUTANT (rep_const) */		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z--1]; // discard all cards in play that have been drawn
1215: /* MUTANT (rep_const) */		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-((1)+1)]; // discard all cards in play that have been drawn
1216: /* MUTANT (del_stmt) */ /* 		z=z-1; */ 
1216: /* MUTANT (rep_const) */		z=z-0;
1216: /* MUTANT (rep_const) */		z=z--1;
1216: /* MUTANT (rep_const) */		z=z-((1)+1);
1218: /* MUTANT (rep_const) */	return 1;
1218: /* MUTANT (rep_const) */	return -1;
1224: /* MUTANT (del_stmt) */ /* 	int i; */ 
1227: /* MUTANT (rep_op) */	for (i = 0; i <= 4; i++) {
1227: /* MUTANT (rep_op) */	for (i = 0; i > 4; i++) {
1227: /* MUTANT (rep_op) */	for (i = 0; i >= 4; i++) {
1227: /* MUTANT (rep_op) */	for (i = 0; i == 4; i++) {
1227: /* MUTANT (rep_op) */	for (i = 0; i != 4; i++) {
1227: /* MUTANT (rep_op) */	for (i = 0; i < 4; i--) {
1227: /* MUTANT (rep_const) */	for (i = 1; i < 4; i++) {
1227: /* MUTANT (rep_const) */	for (i = -1; i < 4; i++) {
1227: /* MUTANT (rep_const) */	for (i = 0; i < 0; i++) {
1227: /* MUTANT (rep_const) */	for (i = 0; i < 1; i++) {
1227: /* MUTANT (rep_const) */	for (i = 0; i < -1; i++) {
1227: /* MUTANT (rep_const) */	for (i = 0; i < ((4)+1); i++) {
1227: /* MUTANT (rep_const) */	for (i = 0; i < ((4)-1); i++) {
1228: /* MUTANT (del_stmt) */ /* 		drawCard(currentPlayer, state); */ 
1232: /* MUTANT (rep_op) */	state->numBuys--;
1235: /* MUTANT (rep_op) */	for (i = 0; i <= state->numPlayers; i++) {
1235: /* MUTANT (rep_op) */	for (i = 0; i > state->numPlayers; i++) {
1235: /* MUTANT (rep_op) */	for (i = 0; i >= state->numPlayers; i++) {
1235: /* MUTANT (rep_op) */	for (i = 0; i == state->numPlayers; i++) {
1235: /* MUTANT (rep_op) */	for (i = 0; i != state->numPlayers; i++) {
1235: /* MUTANT (rep_op) */	for (i = 0; i < state->numPlayers; i--) {
1235: /* MUTANT (rep_const) */	for (i = 1; i < state->numPlayers; i++) {
1235: /* MUTANT (rep_const) */	for (i = -1; i < state->numPlayers; i++) {
1236: /* MUTANT (rep_op) */		if ( i == currentPlayer ) {
1236: /* MUTANT (negate) */		if(! ( i != currentPlayer )) {
1237: /* MUTANT (del_stmt) */ /* 			drawCard(i, state); */ 
1242: /* MUTANT (rep_const) */	discardCard(handPos, currentPlayer, state, 1);
1242: /* MUTANT (rep_const) */	discardCard(handPos, currentPlayer, state, -1);
1244: /* MUTANT (del_stmt) */ /* 	return 0; */ 
1244: /* MUTANT (rep_const) */	return 1;
1244: /* MUTANT (rep_const) */	return -1;
1250: /* MUTANT (del_stmt) */ /* 	int temphand[MAX_HAND]; */ 
1251: /* MUTANT (del_stmt) */ /* 	int i; */ 
1252: /* MUTANT (del_stmt) */ /* 	int x; */ 
1256: /* MUTANT (rep_op) */	for (i = 0; i < state->handCount[currentPlayer]; i++){
1256: /* MUTANT (rep_op) */	for (i = 0; i > state->handCount[currentPlayer]; i++){
1256: /* MUTANT (rep_op) */	for (i = 0; i >= state->handCount[currentPlayer]; i++){
1256: /* MUTANT (rep_op) */	for (i = 0; i == state->handCount[currentPlayer]; i++){
1256: /* MUTANT (rep_op) */	for (i = 0; i != state->handCount[currentPlayer]; i++){
1256: /* MUTANT (rep_op) */	for (i = 0; i <= state->handCount[currentPlayer]; i--){
1256: /* MUTANT (rep_const) */	for (i = 1; i <= state->handCount[currentPlayer]; i++){
1256: /* MUTANT (rep_const) */	for (i = -1; i <= state->handCount[currentPlayer]; i++){
1257: /* MUTANT (del_stmt) */ /* 		temphand[i] = state->hand[currentPlayer][i]; */ //Backup card
1258: /* MUTANT (del_stmt) */ /* 		state->hand[currentPlayer][i] = -1; */ //Set to nothing
1258: /* MUTANT (rep_const) */		state->hand[currentPlayer][i] = 0;//Set to nothing
1258: /* MUTANT (rep_const) */		state->hand[currentPlayer][i] = 1;//Set to nothing
1258: /* MUTANT (rep_const) */		state->hand[currentPlayer][i] = ((-1)+1);//Set to nothing
1258: /* MUTANT (rep_const) */		state->hand[currentPlayer][i] = ((-1)-1);//Set to nothing
1263: /* MUTANT (rep_const) */	updateCoins(currentPlayer, state, 0);
1263: /* MUTANT (rep_const) */	updateCoins(currentPlayer, state, 1);
1263: /* MUTANT (rep_const) */	updateCoins(currentPlayer, state, -1);
1263: /* MUTANT (rep_const) */	updateCoins(currentPlayer, state, ((5)+1));
1263: /* MUTANT (rep_const) */	updateCoins(currentPlayer, state, ((5)-1));
1264: /* MUTANT (del_stmt) */ /* 	x = 1; */ //Condition to loop on
1264: /* MUTANT (rep_const) */	x = 0;//Condition to loop on
1264: /* MUTANT (rep_const) */	x = -1;//Condition to loop on
1264: /* MUTANT (rep_const) */	x = ((1)+1);//Condition to loop on
1265: /* MUTANT (rep_op) */	while( x != 1) {//Buy one card
1265: /* MUTANT (rep_const) */	while( x == 0) {//Buy one card
1265: /* MUTANT (rep_const) */	while( x == -1) {//Buy one card
1265: /* MUTANT (rep_const) */	while( x == ((1)+1)) {//Buy one card
1265: /* MUTANT (negate) */	while(!( x == 1)) {//Buy one card
1266: /* MUTANT (rep_op) */		if (supplyCount(choice1, state) < 0){
1266: /* MUTANT (rep_op) */		if (supplyCount(choice1, state) > 0){
1266: /* MUTANT (rep_op) */		if (supplyCount(choice1, state) >= 0){
1266: /* MUTANT (rep_op) */		if (supplyCount(choice1, state) == 0){
1266: /* MUTANT (rep_op) */		if (supplyCount(choice1, state) != 0){
1266: /* MUTANT (rep_const) */		if (supplyCount(choice1, state) <= 1){
1266: /* MUTANT (rep_const) */		if (supplyCount(choice1, state) <= -1){
1266: /* MUTANT (negate) */		if(! (supplyCount(choice1, state) <= 0)){
1267: /* MUTANT (negate) */			if(! (DEBUG))
1270: /* MUTANT (negate) */			if(! (DEBUG)){
1271: /* MUTANT (del_stmt) */ /* 				printf("Cards Left: %d\n", supplyCount(choice1, state)); */ 
1274: /* MUTANT (rep_op) */		else if (state->coins <= getCost(choice1)){
1274: /* MUTANT (rep_op) */		else if (state->coins > getCost(choice1)){
1274: /* MUTANT (rep_op) */		else if (state->coins >= getCost(choice1)){
1274: /* MUTANT (rep_op) */		else if (state->coins == getCost(choice1)){
1274: /* MUTANT (rep_op) */		else if (state->coins != getCost(choice1)){
1274: /* MUTANT (negate) */		else if(! (state->coins < getCost(choice1))){
1275: /* MUTANT (del_stmt) */ /* 			printf("That card is too expensive!\n"); */ 
1277: /* MUTANT (negate) */			if(! (DEBUG)){
1278: /* MUTANT (del_stmt) */ /* 				printf("Coins: %d < %d\n", state->coins, getCost(choice1)); */ 
1283: /* MUTANT (negate) */			if(! (DEBUG)){
1284: /* MUTANT (del_stmt) */ /* 				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]); */ 
1284: /* MUTANT (rep_op) */				printf("Deck Count: %d\n", state->handCount[currentPlayer] - state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
1284: /* MUTANT (rep_op) */				printf("Deck Count: %d\n", state->handCount[currentPlayer] * state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
1284: /* MUTANT (rep_op) */				printf("Deck Count: %d\n", state->handCount[currentPlayer] % state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
1284: /* MUTANT (rep_op) */				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] - state->discardCount[currentPlayer]);
1284: /* MUTANT (rep_op) */				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] * state->discardCount[currentPlayer]);
1284: /* MUTANT (rep_op) */				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] % state->discardCount[currentPlayer]);
1287: /* MUTANT (rep_const) */			gainCard(choice1, state, 1, currentPlayer);//Gain the card
1287: /* MUTANT (rep_const) */			gainCard(choice1, state, -1, currentPlayer);//Gain the card
1288: /* MUTANT (del_stmt) */ /* 			x = 0; */ //No more buying cards
1288: /* MUTANT (rep_const) */			x = 1;//No more buying cards
1288: /* MUTANT (rep_const) */			x = -1;//No more buying cards
1290: /* MUTANT (negate) */			if(! (DEBUG)){
1291: /* MUTANT (del_stmt) */ /* 				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]); */ 
1291: /* MUTANT (rep_op) */				printf("Deck Count: %d\n", state->handCount[currentPlayer] - state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
1291: /* MUTANT (rep_op) */				printf("Deck Count: %d\n", state->handCount[currentPlayer] * state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
1291: /* MUTANT (rep_op) */				printf("Deck Count: %d\n", state->handCount[currentPlayer] % state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
1291: /* MUTANT (rep_op) */				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] - state->discardCount[currentPlayer]);
1291: /* MUTANT (rep_op) */				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] * state->discardCount[currentPlayer]);
1291: /* MUTANT (rep_op) */				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] % state->discardCount[currentPlayer]);
1298: /* MUTANT (rep_op) */	for (i = 0; i < state->handCount[currentPlayer]; i++){
1298: /* MUTANT (rep_op) */	for (i = 0; i > state->handCount[currentPlayer]; i++){
1298: /* MUTANT (rep_op) */	for (i = 0; i >= state->handCount[currentPlayer]; i++){
1298: /* MUTANT (rep_op) */	for (i = 0; i == state->handCount[currentPlayer]; i++){
1298: /* MUTANT (rep_op) */	for (i = 0; i != state->handCount[currentPlayer]; i++){
1298: /* MUTANT (rep_op) */	for (i = 0; i <= state->handCount[currentPlayer]; i--){
1298: /* MUTANT (rep_const) */	for (i = 1; i <= state->handCount[currentPlayer]; i++){
1298: /* MUTANT (rep_const) */	for (i = -1; i <= state->handCount[currentPlayer]; i++){
1299: /* MUTANT (del_stmt) */ /* 		state->hand[currentPlayer][i] = temphand[i]; */ 
1300: /* MUTANT (del_stmt) */ /* 		temphand[i] = -1; */ 
1300: /* MUTANT (rep_const) */		temphand[i] = 0;
1300: /* MUTANT (rep_const) */		temphand[i] = 1;
1300: /* MUTANT (rep_const) */		temphand[i] = ((-1)+1);
1300: /* MUTANT (rep_const) */		temphand[i] = ((-1)-1);
1304: /* MUTANT (rep_const) */	return 1;
1304: /* MUTANT (rep_const) */	return -1;
1308: /* MUTANT (del_stmt) */ /* 	int i; */ 
1309: /* MUTANT (del_stmt) */ /* 	int j; */ 
1311: /* MUTANT (del_stmt) */ /* 	j = state->hand[currentPlayer][choice1]; */   //store card we will trash
1313: /* MUTANT (rep_op) */	if (state->hand[currentPlayer][choice1] <= copper || state->hand[currentPlayer][choice1] > gold)
1313: /* MUTANT (rep_op) */	if (state->hand[currentPlayer][choice1] > copper || state->hand[currentPlayer][choice1] > gold)
1313: /* MUTANT (rep_op) */	if (state->hand[currentPlayer][choice1] >= copper || state->hand[currentPlayer][choice1] > gold)
1313: /* MUTANT (rep_op) */	if (state->hand[currentPlayer][choice1] == copper || state->hand[currentPlayer][choice1] > gold)
1313: /* MUTANT (rep_op) */	if (state->hand[currentPlayer][choice1] != copper || state->hand[currentPlayer][choice1] > gold)
1313: /* MUTANT (rep_op) */	if (state->hand[currentPlayer][choice1] < copper && state->hand[currentPlayer][choice1] > gold)
1313: /* MUTANT (rep_op) */	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] <= gold)
1313: /* MUTANT (rep_op) */	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] < gold)
1313: /* MUTANT (rep_op) */	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] >= gold)
1313: /* MUTANT (rep_op) */	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] == gold)
1313: /* MUTANT (rep_op) */	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] != gold)
1313: /* MUTANT (negate) */	if(! (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold))
1315: /* MUTANT (del_stmt) */ /* 			return -1; */ 
1315: /* MUTANT (rep_const) */			return 0;
1315: /* MUTANT (rep_const) */			return 1;
1315: /* MUTANT (rep_const) */			return ((-1)+1);
1315: /* MUTANT (rep_const) */			return ((-1)-1);
1318: /* MUTANT (rep_op) */	if (choice2 <= treasure_map || choice2 < curse)
1318: /* MUTANT (rep_op) */	if (choice2 < treasure_map || choice2 < curse)
1318: /* MUTANT (rep_op) */	if (choice2 >= treasure_map || choice2 < curse)
1318: /* MUTANT (rep_op) */	if (choice2 == treasure_map || choice2 < curse)
1318: /* MUTANT (rep_op) */	if (choice2 != treasure_map || choice2 < curse)
1318: /* MUTANT (rep_op) */	if (choice2 > treasure_map && choice2 < curse)
1318: /* MUTANT (rep_op) */	if (choice2 > treasure_map || choice2 <= curse)
1318: /* MUTANT (rep_op) */	if (choice2 > treasure_map || choice2 > curse)
1318: /* MUTANT (rep_op) */	if (choice2 > treasure_map || choice2 >= curse)
1318: /* MUTANT (rep_op) */	if (choice2 > treasure_map || choice2 == curse)
1318: /* MUTANT (rep_op) */	if (choice2 > treasure_map || choice2 != curse)
1318: /* MUTANT (negate) */	if(! (choice2 > treasure_map || choice2 < curse))
1320: /* MUTANT (del_stmt) */ /* 			return -1; */ 
1320: /* MUTANT (rep_const) */			return 0;
1320: /* MUTANT (rep_const) */			return 1;
1320: /* MUTANT (rep_const) */			return ((-1)+1);
1320: /* MUTANT (rep_const) */			return ((-1)-1);
1323: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) - 3) > getCost(choice2) )
1323: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) * 3) > getCost(choice2) )
1323: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) % 3) > getCost(choice2) )
1323: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) <= getCost(choice2) )
1323: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) < getCost(choice2) )
1323: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) >= getCost(choice2) )
1323: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) == getCost(choice2) )
1323: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) != getCost(choice2) )
1323: /* MUTANT (rep_const) */	if ( (getCost(state->hand[currentPlayer][choice1]) + 0) > getCost(choice2) )
1323: /* MUTANT (rep_const) */	if ( (getCost(state->hand[currentPlayer][choice1]) + 1) > getCost(choice2) )
1323: /* MUTANT (rep_const) */	if ( (getCost(state->hand[currentPlayer][choice1]) + -1) > getCost(choice2) )
1323: /* MUTANT (rep_const) */	if ( (getCost(state->hand[currentPlayer][choice1]) + ((3)+1)) > getCost(choice2) )
1323: /* MUTANT (rep_const) */	if ( (getCost(state->hand[currentPlayer][choice1]) + ((3)-1)) > getCost(choice2) )
1323: /* MUTANT (negate) */	if(! ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ))
1325: /* MUTANT (del_stmt) */ /* 			return -1; */ 
1325: /* MUTANT (rep_const) */			return 0;
1325: /* MUTANT (rep_const) */			return 1;
1325: /* MUTANT (rep_const) */			return ((-1)+1);
1325: /* MUTANT (rep_const) */			return ((-1)-1);
1328: /* MUTANT (rep_const) */	gainCard(choice2, state, 0, currentPlayer);
1328: /* MUTANT (rep_const) */	gainCard(choice2, state, 1, currentPlayer);
1328: /* MUTANT (rep_const) */	gainCard(choice2, state, -1, currentPlayer);
1328: /* MUTANT (rep_const) */	gainCard(choice2, state, ((2)+1), currentPlayer);
1328: /* MUTANT (rep_const) */	gainCard(choice2, state, ((2)-1), currentPlayer);
1331: /* MUTANT (del_stmt) */ /* 	discardCard(handPos, currentPlayer, state, 0); */ 
1331: /* MUTANT (rep_const) */	discardCard(handPos, currentPlayer, state, 1);
1331: /* MUTANT (rep_const) */	discardCard(handPos, currentPlayer, state, -1);
1334: /* MUTANT (rep_op) */	for (i = 0; i <= state->handCount[currentPlayer]; i++)
1334: /* MUTANT (rep_op) */	for (i = 0; i > state->handCount[currentPlayer]; i++)
1334: /* MUTANT (rep_op) */	for (i = 0; i >= state->handCount[currentPlayer]; i++)
1334: /* MUTANT (rep_op) */	for (i = 0; i == state->handCount[currentPlayer]; i++)
1334: /* MUTANT (rep_op) */	for (i = 0; i != state->handCount[currentPlayer]; i++)
1334: /* MUTANT (rep_op) */	for (i = 0; i < state->handCount[currentPlayer]; i--)
1334: /* MUTANT (rep_const) */	for (i = 1; i < state->handCount[currentPlayer]; i++)
1334: /* MUTANT (rep_const) */	for (i = -1; i < state->handCount[currentPlayer]; i++)
1336: /* MUTANT (rep_op) */			if (state->hand[currentPlayer][i] != j)
1336: /* MUTANT (negate) */			if(! (state->hand[currentPlayer][i] == j))
1338: /* MUTANT (del_stmt) */ /* 					discardCard(i, currentPlayer, state, 0); */  
1338: /* MUTANT (rep_const) */					discardCard(i, currentPlayer, state, 1); 
1338: /* MUTANT (rep_const) */					discardCard(i, currentPlayer, state, -1); 
1339: /* MUTANT (del_stmt) */ /* 					break; */ 
1343: /* MUTANT (rep_const) */	return 1;
1343: /* MUTANT (rep_const) */	return -1;
1347: /* MUTANT (del_stmt) */ /* 	int i; */ 
1348: /* MUTANT (del_stmt) */ /* 	int j; */ 
1350: /* MUTANT (del_stmt) */ /* 	j = state->hand[currentPlayer][choice1]; */   //store card we will trash
1352: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) - 2) > getCost(choice2) )
1352: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) * 2) > getCost(choice2) )
1352: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) % 2) > getCost(choice2) )
1352: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) <= getCost(choice2) )
1352: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2) )
1352: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) >= getCost(choice2) )
1352: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) == getCost(choice2) )
1352: /* MUTANT (rep_op) */	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) != getCost(choice2) )
1352: /* MUTANT (rep_const) */	if ( (getCost(state->hand[currentPlayer][choice1]) + 0) > getCost(choice2) )
1352: /* MUTANT (rep_const) */	if ( (getCost(state->hand[currentPlayer][choice1]) + 1) > getCost(choice2) )
1352: /* MUTANT (rep_const) */	if ( (getCost(state->hand[currentPlayer][choice1]) + -1) > getCost(choice2) )
1352: /* MUTANT (rep_const) */	if ( (getCost(state->hand[currentPlayer][choice1]) + ((2)+1)) > getCost(choice2) )
1352: /* MUTANT (rep_const) */	if ( (getCost(state->hand[currentPlayer][choice1]) + ((2)-1)) > getCost(choice2) )
1352: /* MUTANT (negate) */	if(! ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ))
1354: /* MUTANT (del_stmt) */ /* 			return -1; */ 
1354: /* MUTANT (rep_const) */			return 0;
1354: /* MUTANT (rep_const) */			return 1;
1354: /* MUTANT (rep_const) */			return ((-1)+1);
1354: /* MUTANT (rep_const) */			return ((-1)-1);
1357: /* MUTANT (rep_const) */	gainCard(choice2, state, 1, currentPlayer);
1357: /* MUTANT (rep_const) */	gainCard(choice2, state, -1, currentPlayer);
1360: /* MUTANT (del_stmt) */ /* 	discardCard(handPos, currentPlayer, state, 0); */ 
1360: /* MUTANT (rep_const) */	discardCard(handPos, currentPlayer, state, 1);
1360: /* MUTANT (rep_const) */	discardCard(handPos, currentPlayer, state, -1);
1363: /* MUTANT (rep_op) */	for (i = 0; i <= state->handCount[currentPlayer]; i++)
1363: /* MUTANT (rep_op) */	for (i = 0; i > state->handCount[currentPlayer]; i++)
1363: /* MUTANT (rep_op) */	for (i = 0; i >= state->handCount[currentPlayer]; i++)
1363: /* MUTANT (rep_op) */	for (i = 0; i == state->handCount[currentPlayer]; i++)
1363: /* MUTANT (rep_op) */	for (i = 0; i != state->handCount[currentPlayer]; i++)
1363: /* MUTANT (rep_op) */	for (i = 0; i < state->handCount[currentPlayer]; i--)
1363: /* MUTANT (rep_const) */	for (i = 1; i < state->handCount[currentPlayer]; i++)
1363: /* MUTANT (rep_const) */	for (i = -1; i < state->handCount[currentPlayer]; i++)
1365: /* MUTANT (rep_op) */			if (state->hand[currentPlayer][j] != j) //Note: changed from [i] 
1365: /* MUTANT (negate) */			if(! (state->hand[currentPlayer][j] == j)) //Note: changed from [i] 
1367: /* MUTANT (del_stmt) */ /* 					discardCard(i, currentPlayer, state, 0); */ 			
1367: /* MUTANT (rep_const) */					discardCard(i, currentPlayer, state, 1);			
1367: /* MUTANT (rep_const) */					discardCard(i, currentPlayer, state, -1);			
1368: /* MUTANT (del_stmt) */ /* 					break; */ 
1373: /* MUTANT (rep_const) */	return 1;
1373: /* MUTANT (rep_const) */	return -1;
